/*
 * Packet.c
 *
 *  Created on: 2013-03-02
 *      Author: danny
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
	this->data_size = data_size;
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
	this->data[0] = 0;
	this->data[1] = (unsigned char)data_size;
	int i;
	for(i = 0; i < data_size; i++) {
		this->data[i+HEADERSIZE] = data[i];
	}
	return this;
}

void killPacket(struct Packet* this) {
	int i;
	free(this->data);
	free(this->type);
}
void encodeString(char* str, struct Queue* q) {
	if(str == NULL || q == NULL) return;
	int i;
	int length = strlen(str);
	char* strBuf = (char*)malloc(sizeof(char)*length);
	strcpy(strBuf, str);
	int packet_size = length / 100 + 1;
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
	for(i = 0; i < packet_size; i++) {
		if(i == packet_size - 1) {
			result = initPacket(length, (unsigned char*)strBuf);
			setHeader(result, 0, 1, STRING); //last packet
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
			result = initPacket(100, (unsigned char*)temp);
			free(temp);
			temp = NULL;
			length -= 100;
		}
		if(i == 0)
			setHeader(result, 1, 0, STRING); //first packet
		else
			setHeader(result, 0, 0, STRING);
		enqueue(q, (void*)result);
	}
	free(strBuf);
	strBuf = NULL;
}

void setHeader(struct Packet* this, int isHead, int isEnd, enum msgType type) {
	if(this == NULL) return;
	if((this->isHead = isHead) == 1) {
		setBit(&this->data[0], 6);
	}
	if((this->isEnd = isEnd) == 1) {
		setBit(&this->data[0], 5);
	}
	*this->type = type;
	this->data[0] = this->data[0] & 0xF0;
	switch(type) {
	case STRING:
		break;
	case CMD:
		this->data[0] = this->data[0] | 0x01;
		break;
	case TXT:
		this->data[0] = this->data[0] | 0x02;
		break;
	case AUDIO:
		this->data[0] = this->data[0] | 0x03;
		break;
	default:
		break;
	}
}

void setBit(unsigned char* byte, int pos) {
	*byte = (*byte | (1 << pos));
}
/*
 * return a sub string from position 0 to pos
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	for(i = 0; i < pos; i++) {
		result[i] = (*str)[i];
	}
	*str = (char*)realloc(*str, len-pos);
	return result;
}
