
StereoSystem.elf:     file format elf32-littlenios2
StereoSystem.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010434 memsz 0x00010434 flags r-x
    LOAD off    0x00011454 vaddr 0x00810454 paddr 0x00812068 align 2**12
         filesz 0x00001c14 memsz 0x00001c14 flags rw-
    LOAD off    0x00013c7c vaddr 0x00813c7c paddr 0x00813c7c align 2**12
         filesz 0x00000000 memsz 0x00000384 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fbac  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006f0  0080fd64  0080fd64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c14  00810454  00812068  00011454  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000384  00813c7c  00813c7c  00013c7c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00013068  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  00013090  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b74  00000000  00000000  00013e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000293a8  00000000  00000000  000159dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008839  00000000  00000000  0003ed84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000170ad  00000000  00000000  000475bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002104  00000000  00000000  0005e66c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024f4  00000000  00000000  00060770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000caf3  00000000  00000000  00062c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006f758  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0006f788  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00073cd8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00073cdb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00073cea  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00073ceb  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00073cec  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00073cf5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00073cfe  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00073d07  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  00073d12  2**0
                  CONTENTS, READONLY
 26 .jdi          00005a69  00000000  00000000  00073d3a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000b352b  00000000  00000000  000797a3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
0080fd64 l    d  .rodata	00000000 .rodata
00810454 l    d  .rwdata	00000000 .rwdata
00813c7c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Colder.c
00000000 l    df *ABS*	00000000 ISR_vectors.c
00000000 l    df *ABS*	00000000 Packet.c
00000000 l    df *ABS*	00000000 Queue.c
00000000 l    df *ABS*	00000000 RS232.c
00000000 l    df *ABS*	00000000 StereoSystem.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00802530 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803760 l     F .text	00000058 __sprint_r
008100ba l     O .rodata	00000010 blanks.3452
008100aa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008057c4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008071c0 l     F .text	00000058 std
008072cc l     F .text	00000008 __fp_lock
008072d4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081085c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081203c l     O .rwdata	00000004 charset
008100f0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00810238 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080a61c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080bfc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080c024 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080c124 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080c244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080c324 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080c480 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080c6ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00812058 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080caec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810e10 l     O .rwdata	00001060 jtag_uart
00811e70 l     O .rwdata	00000030 audio_and_video_config_0
00811ea0 l     O .rwdata	00000030 audio
00811ed0 l     O .rwdata	0000002c character_lcd_0
00811efc l     O .rwdata	00000038 ps2_0
00811f34 l     O .rwdata	0000002c rs232_0
00811f60 l     O .rwdata	00000048 char_drawer
00811fa8 l     O .rwdata	00000054 pixel_buffer_dma_0
00811ffc l     O .rwdata	0000002c SD_Card
0080cf18 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080d150 l     F .text	0000022c altera_avalon_jtag_uart_irq
0080d37c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080d9f8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080eeb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080f0a4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080f3a0 l     F .text	000000dc alt_file_locked
0080f604 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080fae0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080fc94 l     F .text	00000040 alt_sim_halt
008003c8 g     F .text	00000160 decode
0080879c g     F .text	00000094 _mprec_log10
00808888 g     F .text	00000088 __any_on
00809930 g     F .text	00000070 _isatty_r
00810210 g     O .rodata	00000028 __mprec_tinytens
0080c4e0 g     F .text	0000006c alt_main
00800528 g     F .text	00000140 decodeString
00802efc g     F .text	000000a0 _puts_r
00813d70 g     O .bss	00000100 alt_irq
0080e270 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
008099a0 g     F .text	00000078 _lseek_r
00812068 g       *ABS*	00000000 __flash_rwdata_start
0080db70 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080b13c g     F .text	00000088 __eqdf2
00814000 g       *ABS*	00000000 __alt_heap_start
00802e84 g     F .text	00000044 printf
008093fc g     F .text	00000068 __sseek
00807228 g     F .text	000000a4 __sinit
0080ec50 g     F .text	00000114 alt_up_char_buffer_string
0080e088 g     F .text	00000034 read_CE_bit
00807f00 g     F .text	00000084 _setlocale_r
00807328 g     F .text	00000068 __sfmoreglue
00801c80 g     F .text	0000008c checkStartAck
0080c56c g     F .text	00000020 __malloc_unlock
0080e41c g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0080e958 g     F .text	00000090 alt_up_rs232_read_fd
00813c7c g     O .bss	00000004 queue_lock
0080eb80 g     F .text	000000d0 alt_up_char_buffer_draw
00813cbc g     O .bss	00000004 altera_avalon_timer_ts_freq
00808218 g     F .text	000000e0 memmove
00807318 g     F .text	00000010 _cleanup
00808910 g     F .text	000000bc _Balloc
0080b24c g     F .text	00000088 __gtdf2
00801d0c g     F .text	000000a8 updateAcknowledge
00000000  w      *UND*	00000000 __errno
0080daf4 g     F .text	0000007c get_DDRAM_addr
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008098bc g     F .text	00000074 _fstat_r
00813c94 g     O .bss	00000004 errno
00801db4 g     F .text	00000160 sendStats
00813ca8 g     O .bss	00000004 alt_argv
0081a028 g       *ABS*	00000000 _gp
008021d8 g     F .text	000001cc reset
00810c90 g     O .rwdata	00000180 alt_fd_list
0080efe0 g     F .text	00000094 alt_find_dev
00802de4 g     F .text	000000a0 memcpy
0080dd08 g     F .text	0000004c alt_up_character_lcd_write_fd
0080ed64 g     F .text	0000005c alt_up_char_buffer_clear
0080730c g     F .text	0000000c _cleanup_r
0080b3e4 g     F .text	000000f8 __floatsidf
0080f168 g     F .text	00000078 alt_io_redirect
0080b35c g     F .text	00000088 __ltdf2
0080fd64 g       *ABS*	00000000 __DTOR_END__
0080e8e4 g     F .text	00000074 alt_up_rs232_read_data
00802f9c g     F .text	00000014 puts
008086ec g     F .text	000000b0 __ratio
0080d594 g     F .text	00000224 altera_avalon_jtag_uart_read
00802690 g     F .text	00000014 malloc
00802ec8 g     F .text	00000034 _printf_r
0080266c g     F .text	00000008 __udivsi3
0080c184 g     F .text	000000c0 isatty
00810120 g     O .rodata	000000c8 __mprec_tens
008011b4 g     F .text	00000160 setHeader
00807edc g     F .text	00000008 __locale_charset
0080f85c g     F .text	00000090 alt_icache_flush
00813c88 g     O .bss	00000004 __malloc_top_pad
00801c10 g     F .text	00000070 sendStartInit
00812038 g     O .rwdata	00000004 __mb_cur_max
00807ee4 g     F .text	0000000c _localeconv_r
00809008 g     F .text	0000003c __i2b
008078c0 g     F .text	0000049c __sfvwrite_r
008035c0 g     F .text	00000070 _sbrk_r
00813c80 g     O .bss	00000008 up_dev
00809a18 g     F .text	00000078 _read_r
00810c5c g     O .rwdata	0000000c __lc_ctype
00812050 g     O .rwdata	00000004 alt_max_fd
0080e84c g     F .text	00000050 alt_up_rs232_check_parity
0080bb74 g     F .text	00000138 __unpack_d
00809798 g     F .text	00000110 _fclose_r
0080e0bc g     F .text	00000034 read_num_bytes_available
0080718c g     F .text	00000034 fflush
00813c8c g     O .bss	00000004 __malloc_max_sbrked_mem
0080f1e0 g     F .text	000001c0 alt_irq_register
0080e024 g     F .text	00000034 read_RI_bit
008014cc g     F .text	00000038 getBit
0080aaac g     F .text	00000074 __adddf3
00801550 g     F .text	00000048 setAck
00813cec g     O .bss	0000006c com
008085cc g     F .text	00000120 __b2d
00800668 g     F .text	00000028 decodeCmd
0080a06c g     F .text	000005b0 __umoddi3
0080c390 g     F .text	000000f0 lseek
00812034 g     O .rwdata	00000004 _global_impure_ptr
00800204 g     F .text	000001c4 encodeString
00802fcc g     F .text	000005f4 _realloc_r
00814000 g       *ABS*	00000000 __bss_end
0080c8c0 g     F .text	0000010c alt_tick
008023a4 g     F .text	00000070 sendRS232
00809a90 g     F .text	000005dc __udivdi3
00801b54 g     F .text	000000bc send
008101e8 g     O .rodata	00000028 __mprec_bigtens
00809264 g     F .text	00000120 __s2b
00801f14 g     F .text	000000e8 sendAck
0080b5b4 g     F .text	00000194 __floatunsidf
00801598 g     F .text	00000174 strnsep_
008084ec g     F .text	00000060 __mcmp
0080e124 g     F .text	0000002c read_data_byte
008072f4 g     F .text	00000018 __fp_lock_all
00813d58 g     O .bss	00000018 alarm
0080c828 g     F .text	00000098 alt_alarm_stop
0080e058 g     F .text	00000030 read_RE_bit
0080170c g     F .text	0000004c initQueue
00813cc0 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000cc alt_irq_handler
00810c68 g     O .rwdata	00000028 alt_dev_null
0080dff0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0080e2c8 g     F .text	00000078 alt_up_ps2_write_data_byte
0080edc0 g     F .text	00000044 alt_dcache_flush_all
008083b8 g     F .text	00000070 __hi0bits
0080b4dc g     F .text	000000d8 __fixdfsi
00812068 g       *ABS*	00000000 __ram_rwdata_end
00812048 g     O .rwdata	00000008 alt_dev_list
00802184 g     F .text	00000054 setStates
0080c9cc g     F .text	00000120 write
00810454 g       *ABS*	00000000 __ram_rodata_end
0080c050 g     F .text	000000d4 fstat
0080e9e8 g     F .text	00000094 alt_up_rs232_write_fd
00809144 g     F .text	00000120 __pow5mult
00813c98 g     O .bss	00000004 __nlocale_changed
00802674 g     F .text	00000008 __umodsi3
00814000 g       *ABS*	00000000 end
0080e63c g     F .text	000000a8 alt_up_ps2_write_fd
0080eabc g     F .text	00000084 alt_up_char_buffer_init
0080d098 g     F .text	000000b8 altera_avalon_jtag_uart_init
0080fd60 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080da6c g     F .text	00000088 alt_avalon_timer_sc_init
0080b7e0 g     F .text	00000080 __clzsi2
0080d7b8 g     F .text	00000240 altera_avalon_jtag_uart_write
00807218 g     F .text	00000004 __sfp_lock_acquire
00808134 g     F .text	000000e4 memchr
0080dc18 g     F .text	00000078 alt_up_character_lcd_write
008037b8 g     F .text	00001eac ___vfprintf_internal_r
008075ac g     F .text	00000314 _free_r
0080fae4 g     F .text	000001b0 __call_exitprocs
00813c9c g     O .bss	00000004 __mlocale_changed
0081202c g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000004c _start
00813cb0 g     O .bss	00000004 _alt_tick_rate
00808cd4 g     F .text	0000014c __lshift
00813cb4 g     O .bss	00000004 _alt_nticks
0080c58c g     F .text	00000120 read
0080cb80 g     F .text	00000398 alt_sys_init
0080de7c g     F .text	000000b0 alt_up_character_lcd_shift_display
0080f9ac g     F .text	00000134 __register_exitproc
0080e548 g     F .text	00000058 alt_up_ps2_clear_fifo
0080e80c g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00808e20 g     F .text	000001e8 __multiply
0080df2c g     F .text	00000090 alt_up_character_lcd_erase_pos
0080d42c g     F .text	00000074 altera_avalon_jtag_uart_close
008006b8 g     F .text	00000984 RS232_ISR
00810454 g       *ABS*	00000000 __ram_rwdata_start
0080fd64 g       *ABS*	00000000 __ram_rodata_start
008036a4 g     F .text	000000bc strncpy
00813cc4 g     O .bss	00000028 __malloc_current_mallinfo
008089cc g     F .text	0000017c __d2b
00802fb0 g     F .text	0000001c realloc
0080cf50 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080f7a4 g     F .text	000000b8 alt_get_fd
0080bcac g     F .text	000000c8 __fpcmp_parts_d
00809728 g     F .text	00000070 _close_r
0080f938 g     F .text	00000074 memcmp
0080d000 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00814000 g       *ABS*	00000000 __alt_stack_base
0080d048 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00805688 g     F .text	0000013c __swsetup_r
0080aee4 g     F .text	00000258 __divdf3
00807390 g     F .text	000000f0 __sfp
00808830 g     F .text	00000058 __copybits
00810454 g     O .rwdata	00000408 __malloc_av_
00807224 g     F .text	00000004 __sinit_lock_release
0080ab20 g     F .text	000003c4 __muldf3
008094e0 g     F .text	00000060 __sread
0080e778 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0080f684 g     F .text	00000120 alt_find_file
0080ee04 g     F .text	000000b4 alt_dev_llist_insert
0080c54c g     F .text	00000020 __malloc_lock
0080c76c g     F .text	000000bc sbrk
00806f90 g     F .text	000001fc _fflush_r
00809674 g     F .text	000000b4 _calloc_r
00813c7c g       *ABS*	00000000 __bss_start
00801504 g     F .text	0000004c setBit
008082f8 g     F .text	00000098 memset
00802414 g     F .text	0000011c main
00813cac g     O .bss	00000004 alt_envp
00813c90 g     O .bss	00000004 __malloc_max_total_mem
0080eb40 g     F .text	00000040 alt_up_char_buffer_open_dev
0080cfa8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00802118 g     F .text	0000006c failReceive
0080103c g     F .text	000000e8 initPacket
0080ddcc g     F .text	000000b0 alt_up_character_lcd_shift_cursor
008093f4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008098a8 g     F .text	00000014 fclose
0080e4cc g     F .text	0000007c alt_up_ps2_read_data_byte
00802034 g     F .text	000000e4 checkAck
00813e70 g     O .bss	00000190 _atexit0
008059dc g     F .text	000015b4 _dtoa_r
008026a4 g     F .text	00000740 _malloc_r
00812054 g     O .rwdata	00000004 alt_errno
00801124 g     F .text	00000090 killPacket
00807e24 g     F .text	000000b8 _fwalk
0080e6e4 g     F .text	00000040 alt_up_ps2_open_dev
008025ac g     F .text	00000060 __divsi3
00810244 g     O .rodata	00000014 __thenan_df
0080dbd8 g     F .text	00000040 alt_up_character_lcd_open_dev
00807480 g     F .text	0000012c _malloc_trim_r
0080e21c g     F .text	00000054 alt_up_ps2_enable_read_interrupt
008019a8 g     F .text	0000006c killQueueData
0080fd64 g       *ABS*	00000000 __CTOR_END__
0080dba4 g     F .text	00000034 alt_up_character_lcd_init
00809540 g     F .text	000000bc strcmp
0080fd64 g       *ABS*	00000000 __flash_rodata_start
0080fd64 g       *ABS*	00000000 __DTOR_LIST__
0080ea7c g     F .text	00000040 alt_up_rs232_open_dev
0080b1c4 g     F .text	00000088 __nedf2
0080cb4c g     F .text	00000034 alt_irq_init
0080c70c g     F .text	00000060 alt_release_fd
0080e0f0 g     F .text	00000034 read_data_valid
0080dfbc g     F .text	00000034 alt_up_character_lcd_cursor_off
00810258 g     O .rodata	00000100 __clz_tab
00813ca0 g     O .bss	00000004 _PathLocale
0080e3b0 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0080f8ec g     F .text	00000014 atexit
008095fc g     F .text	00000078 _write_r
00807f84 g     F .text	0000001c setlocale
00812030 g     O .rwdata	00000004 _impure_ptr
00813ca4 g     O .bss	00000004 alt_argc
00813cb8 g     O .bss	00000004 altera_avalon_timer_ts_base
0080ef7c g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
0080854c g     F .text	00000080 __ulp
00809384 g     F .text	00000040 __isinfd
008072dc g     F .text	00000018 __fp_unlock_all
00812040 g     O .rwdata	00000008 alt_fs_list
0080e724 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0080e89c g     F .text	00000048 alt_up_rs232_write_data
00801758 g     F .text	0000014c enqueue
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807ef0 g     F .text	00000010 localeconv
00801a14 g     F .text	00000140 initRS232
00801314 g     F .text	000001b8 readPacketHeader
008018a4 g     F .text	00000104 dequeue
00812068 g       *ABS*	00000000 _edata
00814000 g       *ABS*	00000000 _end
008001b8 g       *ABS*	00000000 __ram_exceptions_end
0080d4a0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00809464 g     F .text	0000007c __swrite
00812028 g     O .rwdata	00000004 __malloc_trim_threshold
0080f664 g     F .text	00000020 altera_nios2_qsys_irq_init
0080f900 g     F .text	00000038 exit
00807d5c g     F .text	000000c8 _fwalk_reent
0080e150 g     F .text	000000cc alt_up_ps2_init
00808b48 g     F .text	0000018c __mdiff
0080260c g     F .text	00000060 __modsi3
00800690 g     F .text	00000028 decodePlaylist
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080721c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080dc90 g     F .text	00000078 alt_up_character_lcd_string
0080fcd4 g     F .text	00000020 _exit
008093c4 g     F .text	00000030 __isnand
0080bd74 g     F .text	00000154 alt_alarm_start
0080b748 g     F .text	00000098 __muldi3
00807fa0 g     F .text	00000194 __smakebuf_r
0080e340 g     F .text	00000070 alt_up_ps2_wait_for_ack
00803630 g     F .text	00000074 strlen
0080f47c g     F .text	00000188 open
0080b2d4 g     F .text	00000088 __gedf2
0080f074 g     F .text	00000030 alt_icache_flush_all
0080dd54 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00812064 g     O .rwdata	00000004 alt_priority_mask
00805664 g     F .text	00000024 __vfprintf_internal
0080e5a0 g     F .text	0000009c alt_up_ps2_read_fd
0080aa2c g     F .text	00000080 __subdf3
00808428 g     F .text	000000c4 __lo0bits
00801ffc g     F .text	00000038 switchAck
0081205c g     O .rwdata	00000008 alt_alarm_list
0080ef18 g     F .text	00000064 _do_ctors
0080e7d0 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0080bec8 g     F .text	000000fc close
0080c2a4 g     F .text	00000080 alt_load
0080b860 g     F .text	00000314 __pack_d
0080267c g     F .text	00000014 free
00807220 g     F .text	00000004 __sinit_lock_acquire
00809044 g     F .text	00000100 __multadd
00808390 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18cf5c04 	addi	r3,r3,15728
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18cf5c04 	addi	r3,r3,15728
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  8001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c4:	00bffd16 	blt	zero,r2,8001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d0:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d4:	d6a80a14 	ori	gp,gp,41000
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d8:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001dc:	108f1f14 	ori	r2,r2,15484

    movhi r3, %hi(__bss_end)
  8001e0:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e4:	18d00014 	ori	r3,r3,16384

    beq r2, r3, 1f
  8001e8:	10c00326 	beq	r2,r3,8001f8 <_start+0x40>

0:
    stw zero, (r2)
  8001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f4:	10fffd36 	bltu	r2,r3,8001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f8:	080c2a40 	call	80c2a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001fc:	080c4e00 	call	80c4e0 <alt_main>

00800200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800200:	003fff06 	br	800200 <alt_after_alt_main>

00800204 <encodeString>:

/*
 * encode the string into multiply packets and put into queue
 *
 */
void encodeString(char* str, struct Queue* q) {
  800204:	defff504 	addi	sp,sp,-44
  800208:	dfc00a15 	stw	ra,40(sp)
  80020c:	df000915 	stw	fp,36(sp)
  800210:	df000904 	addi	fp,sp,36
  800214:	e13ffe15 	stw	r4,-8(fp)
  800218:	e17fff15 	stw	r5,-4(fp)
	if(str == NULL || q == NULL) return;
  80021c:	e0bffe17 	ldw	r2,-8(fp)
  800220:	1005003a 	cmpeq	r2,r2,zero
  800224:	1000631e 	bne	r2,zero,8003b4 <encodeString+0x1b0>
  800228:	e0bfff17 	ldw	r2,-4(fp)
  80022c:	1004c03a 	cmpne	r2,r2,zero
  800230:	1000011e 	bne	r2,zero,800238 <encodeString+0x34>
  800234:	00005f06 	br	8003b4 <encodeString+0x1b0>
	int i;
	int length = strlen(str);
  800238:	e13ffe17 	ldw	r4,-8(fp)
  80023c:	08036300 	call	803630 <strlen>
  800240:	e0bffb15 	stw	r2,-20(fp)
	char* strBuf = (char*)malloc(sizeof(char)*length);
  800244:	e13ffb17 	ldw	r4,-20(fp)
  800248:	08026900 	call	802690 <malloc>
  80024c:	e0bffd15 	stw	r2,-12(fp)
	strncpy(strBuf, str, length);
  800250:	e13ffd17 	ldw	r4,-12(fp)
  800254:	e1bffb17 	ldw	r6,-20(fp)
  800258:	e17ffe17 	ldw	r5,-8(fp)
  80025c:	08036a40 	call	8036a4 <strncpy>
	int packet_size = length / 100;
  800260:	e13ffb17 	ldw	r4,-20(fp)
  800264:	01401904 	movi	r5,100
  800268:	08025ac0 	call	8025ac <__divsi3>
  80026c:	e0bffa15 	stw	r2,-24(fp)
	if(length % 100 >0) {
  800270:	e13ffb17 	ldw	r4,-20(fp)
  800274:	01401904 	movi	r5,100
  800278:	080260c0 	call	80260c <__modsi3>
  80027c:	10800050 	cmplti	r2,r2,1
  800280:	1000031e 	bne	r2,zero,800290 <encodeString+0x8c>
		packet_size+=1;
  800284:	e0bffa17 	ldw	r2,-24(fp)
  800288:	10800044 	addi	r2,r2,1
  80028c:	e0bffa15 	stw	r2,-24(fp)
	}
	int* num_packets = (int*)malloc(sizeof(int));
  800290:	01000104 	movi	r4,4
  800294:	08026900 	call	802690 <malloc>
  800298:	e0bff915 	stw	r2,-28(fp)
	*num_packets = packet_size;
  80029c:	e0fff917 	ldw	r3,-28(fp)
  8002a0:	e0bffa17 	ldw	r2,-24(fp)
  8002a4:	18800015 	stw	r2,0(r3)
	enqueue(com.pendingPacketSize, (void*)num_packets);
  8002a8:	00802074 	movhi	r2,129
  8002ac:	108f3b04 	addi	r2,r2,15596
  8002b0:	11000f17 	ldw	r4,60(r2)
  8002b4:	e17ff917 	ldw	r5,-28(fp)
  8002b8:	08017580 	call	801758 <enqueue>
	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
  8002bc:	e03ffc15 	stw	zero,-16(fp)
  8002c0:	00003506 	br	800398 <encodeString+0x194>
		if(i == packet_size - 1) {
  8002c4:	e0bffa17 	ldw	r2,-24(fp)
  8002c8:	10ffffc4 	addi	r3,r2,-1
  8002cc:	e0bffc17 	ldw	r2,-16(fp)
  8002d0:	18800b1e 	bne	r3,r2,800300 <encodeString+0xfc>
			result = initPacket(length, (unsigned char*)strBuf);
  8002d4:	e0bffd17 	ldw	r2,-12(fp)
  8002d8:	100b883a 	mov	r5,r2
  8002dc:	e13ffb17 	ldw	r4,-20(fp)
  8002e0:	080103c0 	call	80103c <initPacket>
  8002e4:	e0bff815 	stw	r2,-32(fp)
			setHeader(result, 0, 1, STRING); //last packet
  8002e8:	e13ff817 	ldw	r4,-32(fp)
  8002ec:	000b883a 	mov	r5,zero
  8002f0:	01800044 	movi	r6,1
  8002f4:	000f883a 	mov	r7,zero
  8002f8:	08011b40 	call	8011b4 <setHeader>
  8002fc:	00000e06 	br	800338 <encodeString+0x134>
		}
		else {
			char* temp = strnsep_(&strBuf, 100);
  800300:	e13ffd04 	addi	r4,fp,-12
  800304:	01401904 	movi	r5,100
  800308:	08015980 	call	801598 <strnsep_>
  80030c:	e0bff715 	stw	r2,-36(fp)
			result = initPacket(100, (unsigned char*)temp);
  800310:	e17ff717 	ldw	r5,-36(fp)
  800314:	01001904 	movi	r4,100
  800318:	080103c0 	call	80103c <initPacket>
  80031c:	e0bff815 	stw	r2,-32(fp)
			free(temp);
  800320:	e13ff717 	ldw	r4,-36(fp)
  800324:	080267c0 	call	80267c <free>
			temp = NULL;
  800328:	e03ff715 	stw	zero,-36(fp)
			length -= 100;
  80032c:	e0bffb17 	ldw	r2,-20(fp)
  800330:	10bfe704 	addi	r2,r2,-100
  800334:	e0bffb15 	stw	r2,-20(fp)
		}
		if(i == 0)
  800338:	e0bffc17 	ldw	r2,-16(fp)
  80033c:	1004c03a 	cmpne	r2,r2,zero
  800340:	1000061e 	bne	r2,zero,80035c <encodeString+0x158>
			setHeader(result, 1, 0, STRING); //first packet
  800344:	e13ff817 	ldw	r4,-32(fp)
  800348:	01400044 	movi	r5,1
  80034c:	000d883a 	mov	r6,zero
  800350:	000f883a 	mov	r7,zero
  800354:	08011b40 	call	8011b4 <setHeader>
  800358:	00000906 	br	800380 <encodeString+0x17c>
		else if(i != packet_size - 1)
  80035c:	e0bffa17 	ldw	r2,-24(fp)
  800360:	10ffffc4 	addi	r3,r2,-1
  800364:	e0bffc17 	ldw	r2,-16(fp)
  800368:	18800526 	beq	r3,r2,800380 <encodeString+0x17c>
			setHeader(result, 0, 0, STRING);
  80036c:	e13ff817 	ldw	r4,-32(fp)
  800370:	000b883a 	mov	r5,zero
  800374:	000d883a 	mov	r6,zero
  800378:	000f883a 	mov	r7,zero
  80037c:	08011b40 	call	8011b4 <setHeader>
		enqueue(q, (void*)result);
  800380:	e13fff17 	ldw	r4,-4(fp)
  800384:	e17ff817 	ldw	r5,-32(fp)
  800388:	08017580 	call	801758 <enqueue>
	}
	int* num_packets = (int*)malloc(sizeof(int));
	*num_packets = packet_size;
	enqueue(com.pendingPacketSize, (void*)num_packets);
	struct Packet* result;
	for(i = 0; i < packet_size; i++) {
  80038c:	e0bffc17 	ldw	r2,-16(fp)
  800390:	10800044 	addi	r2,r2,1
  800394:	e0bffc15 	stw	r2,-16(fp)
  800398:	e0fffc17 	ldw	r3,-16(fp)
  80039c:	e0bffa17 	ldw	r2,-24(fp)
  8003a0:	18bfc816 	blt	r3,r2,8002c4 <encodeString+0xc0>
			setHeader(result, 1, 0, STRING); //first packet
		else if(i != packet_size - 1)
			setHeader(result, 0, 0, STRING);
		enqueue(q, (void*)result);
	}
	result = NULL;
  8003a4:	e03ff815 	stw	zero,-32(fp)
	free(strBuf);
  8003a8:	e13ffd17 	ldw	r4,-12(fp)
  8003ac:	080267c0 	call	80267c <free>
	strBuf = NULL;
  8003b0:	e03ffd15 	stw	zero,-12(fp)
}
  8003b4:	e037883a 	mov	sp,fp
  8003b8:	dfc00117 	ldw	ra,4(sp)
  8003bc:	df000017 	ldw	fp,0(sp)
  8003c0:	dec00204 	addi	sp,sp,8
  8003c4:	f800283a 	ret

008003c8 <decode>:

void* decode(struct Queue* this) {
  8003c8:	defff704 	addi	sp,sp,-36
  8003cc:	dfc00815 	stw	ra,32(sp)
  8003d0:	df000715 	stw	fp,28(sp)
  8003d4:	dc000615 	stw	r16,24(sp)
  8003d8:	df000604 	addi	fp,sp,24
  8003dc:	e13ffe15 	stw	r4,-8(fp)
	int len = this->size;
  8003e0:	e0bffe17 	ldw	r2,-8(fp)
  8003e4:	10800017 	ldw	r2,0(r2)
  8003e8:	e0bffd15 	stw	r2,-12(fp)
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
  8003ec:	e0bffd17 	ldw	r2,-12(fp)
  8003f0:	1085883a 	add	r2,r2,r2
  8003f4:	1085883a 	add	r2,r2,r2
  8003f8:	1009883a 	mov	r4,r2
  8003fc:	08026900 	call	802690 <malloc>
  800400:	e0bffc15 	stw	r2,-16(fp)
	void* result = NULL;
  800404:	e03ffb15 	stw	zero,-20(fp)
	int i = 0;
  800408:	e03ffa15 	stw	zero,-24(fp)
	for(i = 0; i < len; i++) {
  80040c:	e03ffa15 	stw	zero,-24(fp)
  800410:	00000c06 	br	800444 <decode+0x7c>
		packets[i] = (struct Packet*)dequeue(this);
  800414:	e0bffa17 	ldw	r2,-24(fp)
  800418:	1085883a 	add	r2,r2,r2
  80041c:	1085883a 	add	r2,r2,r2
  800420:	1007883a 	mov	r3,r2
  800424:	e0bffc17 	ldw	r2,-16(fp)
  800428:	18a1883a 	add	r16,r3,r2
  80042c:	e13ffe17 	ldw	r4,-8(fp)
  800430:	08018a40 	call	8018a4 <dequeue>
  800434:	80800015 	stw	r2,0(r16)
void* decode(struct Queue* this) {
	int len = this->size;
	struct Packet** packets = (struct Packet**)malloc(sizeof(struct Packet*)*len);
	void* result = NULL;
	int i = 0;
	for(i = 0; i < len; i++) {
  800438:	e0bffa17 	ldw	r2,-24(fp)
  80043c:	10800044 	addi	r2,r2,1
  800440:	e0bffa15 	stw	r2,-24(fp)
  800444:	e0fffa17 	ldw	r3,-24(fp)
  800448:	e0bffd17 	ldw	r2,-12(fp)
  80044c:	18bff116 	blt	r3,r2,800414 <decode+0x4c>
		packets[i] = (struct Packet*)dequeue(this);
	}

	switch(*(packets[0]->type)) {
  800450:	e0bffc17 	ldw	r2,-16(fp)
  800454:	10800017 	ldw	r2,0(r2)
  800458:	10800217 	ldw	r2,8(r2)
  80045c:	10800017 	ldw	r2,0(r2)
  800460:	e0bfff15 	stw	r2,-4(fp)
  800464:	e0ffff17 	ldw	r3,-4(fp)
  800468:	18800060 	cmpeqi	r2,r3,1
  80046c:	10000c1e 	bne	r2,zero,8004a0 <decode+0xd8>
  800470:	e0ffff17 	ldw	r3,-4(fp)
  800474:	18800070 	cmpltui	r2,r3,1
  800478:	1000041e 	bne	r2,zero,80048c <decode+0xc4>
  80047c:	e0ffff17 	ldw	r3,-4(fp)
  800480:	188000a0 	cmpeqi	r2,r3,2
  800484:	10000b1e 	bne	r2,zero,8004b4 <decode+0xec>
  800488:	00000e06 	br	8004c4 <decode+0xfc>
	case STRING:
		result = decodeString(packets, len);
  80048c:	e13ffc17 	ldw	r4,-16(fp)
  800490:	e17ffd17 	ldw	r5,-12(fp)
  800494:	08005280 	call	800528 <decodeString>
  800498:	e0bffb15 	stw	r2,-20(fp)
		break;
  80049c:	00000906 	br	8004c4 <decode+0xfc>
	case CMD:
		result = decodeCmd(packets, len);
  8004a0:	e13ffc17 	ldw	r4,-16(fp)
  8004a4:	e17ffd17 	ldw	r5,-12(fp)
  8004a8:	08006680 	call	800668 <decodeCmd>
  8004ac:	e0bffb15 	stw	r2,-20(fp)
		break;
  8004b0:	00000406 	br	8004c4 <decode+0xfc>
	case PLAYLIST:
		result = decodePlaylist(packets, len);
  8004b4:	e13ffc17 	ldw	r4,-16(fp)
  8004b8:	e17ffd17 	ldw	r5,-12(fp)
  8004bc:	08006900 	call	800690 <decodePlaylist>
  8004c0:	e0bffb15 	stw	r2,-20(fp)
		break;
	default:
		break;
	}
	for(i = 0; i < len ; i++ ) {
  8004c4:	e03ffa15 	stw	zero,-24(fp)
  8004c8:	00000a06 	br	8004f4 <decode+0x12c>
		killPacket(&packets[i]);
  8004cc:	e0bffa17 	ldw	r2,-24(fp)
  8004d0:	1085883a 	add	r2,r2,r2
  8004d4:	1085883a 	add	r2,r2,r2
  8004d8:	1007883a 	mov	r3,r2
  8004dc:	e0bffc17 	ldw	r2,-16(fp)
  8004e0:	1889883a 	add	r4,r3,r2
  8004e4:	08011240 	call	801124 <killPacket>
		result = decodePlaylist(packets, len);
		break;
	default:
		break;
	}
	for(i = 0; i < len ; i++ ) {
  8004e8:	e0bffa17 	ldw	r2,-24(fp)
  8004ec:	10800044 	addi	r2,r2,1
  8004f0:	e0bffa15 	stw	r2,-24(fp)
  8004f4:	e0fffa17 	ldw	r3,-24(fp)
  8004f8:	e0bffd17 	ldw	r2,-12(fp)
  8004fc:	18bff316 	blt	r3,r2,8004cc <decode+0x104>
		killPacket(&packets[i]);
	}
	free(packets);
  800500:	e13ffc17 	ldw	r4,-16(fp)
  800504:	080267c0 	call	80267c <free>
	packets = NULL;
  800508:	e03ffc15 	stw	zero,-16(fp)
	return result;
  80050c:	e0bffb17 	ldw	r2,-20(fp)
}
  800510:	e037883a 	mov	sp,fp
  800514:	dfc00217 	ldw	ra,8(sp)
  800518:	df000117 	ldw	fp,4(sp)
  80051c:	dc000017 	ldw	r16,0(sp)
  800520:	dec00304 	addi	sp,sp,12
  800524:	f800283a 	ret

00800528 <decodeString>:

void* decodeString(struct Packet** p, int size) {
  800528:	defff704 	addi	sp,sp,-36
  80052c:	dfc00815 	stw	ra,32(sp)
  800530:	df000715 	stw	fp,28(sp)
  800534:	df000704 	addi	fp,sp,28
  800538:	e13ffe15 	stw	r4,-8(fp)
  80053c:	e17fff15 	stw	r5,-4(fp)
	int i = 0, j = 0, k = 0;
  800540:	e03ffd15 	stw	zero,-12(fp)
  800544:	e03ffc15 	stw	zero,-16(fp)
  800548:	e03ffb15 	stw	zero,-20(fp)
	int char_len = (size-1)*100+p[size-1]->data_size;
  80054c:	e0bfff17 	ldw	r2,-4(fp)
  800550:	11001924 	muli	r4,r2,100
  800554:	e0bfff17 	ldw	r2,-4(fp)
  800558:	1085883a 	add	r2,r2,r2
  80055c:	1085883a 	add	r2,r2,r2
  800560:	1007883a 	mov	r3,r2
  800564:	e0bffe17 	ldw	r2,-8(fp)
  800568:	1885883a 	add	r2,r3,r2
  80056c:	10bfff04 	addi	r2,r2,-4
  800570:	10800017 	ldw	r2,0(r2)
  800574:	10800117 	ldw	r2,4(r2)
  800578:	2085883a 	add	r2,r4,r2
  80057c:	10bfe704 	addi	r2,r2,-100
  800580:	e0bffa15 	stw	r2,-24(fp)
	char* result = (char*)malloc(sizeof(char)*char_len);
  800584:	e13ffa17 	ldw	r4,-24(fp)
  800588:	08026900 	call	802690 <malloc>
  80058c:	e0bff915 	stw	r2,-28(fp)
	for(i = 0; i < size; i++) {
  800590:	e03ffd15 	stw	zero,-12(fp)
  800594:	00002606 	br	800630 <decodeString+0x108>
		for(j = 0; j < p[i]->data_size; j++) {
  800598:	e03ffc15 	stw	zero,-16(fp)
  80059c:	00001706 	br	8005fc <decodeString+0xd4>
			result[k] = p[i]->data[j+HEADERSIZE];
  8005a0:	e0bffb17 	ldw	r2,-20(fp)
  8005a4:	1007883a 	mov	r3,r2
  8005a8:	e0bff917 	ldw	r2,-28(fp)
  8005ac:	1889883a 	add	r4,r3,r2
  8005b0:	e0bffd17 	ldw	r2,-12(fp)
  8005b4:	1085883a 	add	r2,r2,r2
  8005b8:	1085883a 	add	r2,r2,r2
  8005bc:	1007883a 	mov	r3,r2
  8005c0:	e0bffe17 	ldw	r2,-8(fp)
  8005c4:	1885883a 	add	r2,r3,r2
  8005c8:	10800017 	ldw	r2,0(r2)
  8005cc:	10c00017 	ldw	r3,0(r2)
  8005d0:	e0bffc17 	ldw	r2,-16(fp)
  8005d4:	1885883a 	add	r2,r3,r2
  8005d8:	10800084 	addi	r2,r2,2
  8005dc:	10800003 	ldbu	r2,0(r2)
  8005e0:	20800005 	stb	r2,0(r4)
			k++;
  8005e4:	e0bffb17 	ldw	r2,-20(fp)
  8005e8:	10800044 	addi	r2,r2,1
  8005ec:	e0bffb15 	stw	r2,-20(fp)
void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
		for(j = 0; j < p[i]->data_size; j++) {
  8005f0:	e0bffc17 	ldw	r2,-16(fp)
  8005f4:	10800044 	addi	r2,r2,1
  8005f8:	e0bffc15 	stw	r2,-16(fp)
  8005fc:	e0bffd17 	ldw	r2,-12(fp)
  800600:	1085883a 	add	r2,r2,r2
  800604:	1085883a 	add	r2,r2,r2
  800608:	1007883a 	mov	r3,r2
  80060c:	e0bffe17 	ldw	r2,-8(fp)
  800610:	1885883a 	add	r2,r3,r2
  800614:	10800017 	ldw	r2,0(r2)
  800618:	10c00117 	ldw	r3,4(r2)
  80061c:	e0bffc17 	ldw	r2,-16(fp)
  800620:	10ffdf16 	blt	r2,r3,8005a0 <decodeString+0x78>

void* decodeString(struct Packet** p, int size) {
	int i = 0, j = 0, k = 0;
	int char_len = (size-1)*100+p[size-1]->data_size;
	char* result = (char*)malloc(sizeof(char)*char_len);
	for(i = 0; i < size; i++) {
  800624:	e0bffd17 	ldw	r2,-12(fp)
  800628:	10800044 	addi	r2,r2,1
  80062c:	e0bffd15 	stw	r2,-12(fp)
  800630:	e0fffd17 	ldw	r3,-12(fp)
  800634:	e0bfff17 	ldw	r2,-4(fp)
  800638:	18bfd716 	blt	r3,r2,800598 <decodeString+0x70>
		for(j = 0; j < p[i]->data_size; j++) {
			result[k] = p[i]->data[j+HEADERSIZE];
			k++;
		}
	} result[k] = '\0';
  80063c:	e0bffb17 	ldw	r2,-20(fp)
  800640:	1007883a 	mov	r3,r2
  800644:	e0bff917 	ldw	r2,-28(fp)
  800648:	1885883a 	add	r2,r3,r2
  80064c:	10000005 	stb	zero,0(r2)
	return (void*)result;
  800650:	e0bff917 	ldw	r2,-28(fp)
}
  800654:	e037883a 	mov	sp,fp
  800658:	dfc00117 	ldw	ra,4(sp)
  80065c:	df000017 	ldw	fp,0(sp)
  800660:	dec00204 	addi	sp,sp,8
  800664:	f800283a 	ret

00800668 <decodeCmd>:
void* decodeCmd(struct Packet** p, int size) {
  800668:	defffd04 	addi	sp,sp,-12
  80066c:	df000215 	stw	fp,8(sp)
  800670:	df000204 	addi	fp,sp,8
  800674:	e13ffe15 	stw	r4,-8(fp)
  800678:	e17fff15 	stw	r5,-4(fp)

	return NULL;
  80067c:	0005883a 	mov	r2,zero
}
  800680:	e037883a 	mov	sp,fp
  800684:	df000017 	ldw	fp,0(sp)
  800688:	dec00104 	addi	sp,sp,4
  80068c:	f800283a 	ret

00800690 <decodePlaylist>:
void* decodePlaylist(struct Packet** p, int size) {
  800690:	defffd04 	addi	sp,sp,-12
  800694:	df000215 	stw	fp,8(sp)
  800698:	df000204 	addi	fp,sp,8
  80069c:	e13ffe15 	stw	r4,-8(fp)
  8006a0:	e17fff15 	stw	r5,-4(fp)

	return NULL;
  8006a4:	0005883a 	mov	r2,zero
}
  8006a8:	e037883a 	mov	sp,fp
  8006ac:	df000017 	ldw	fp,0(sp)
  8006b0:	dec00104 	addi	sp,sp,4
  8006b4:	f800283a 	ret

008006b8 <RS232_ISR>:

#include "ISR_vectors.h"

struct RS232 com;

alt_u32 RS232_ISR(void* up_dev) {
  8006b8:	defff604 	addi	sp,sp,-40
  8006bc:	dfc00915 	stw	ra,36(sp)
  8006c0:	df000815 	stw	fp,32(sp)
  8006c4:	df000804 	addi	fp,sp,32
  8006c8:	e13ffd15 	stw	r4,-12(fp)
	if(queue_lock == 1) return alt_ticks_per_second()/1000;
  8006cc:	00802074 	movhi	r2,129
  8006d0:	108f1f04 	addi	r2,r2,15484
  8006d4:	10800017 	ldw	r2,0(r2)
  8006d8:	10800058 	cmpnei	r2,r2,1
  8006dc:	1000081e 	bne	r2,zero,800700 <RS232_ISR+0x48>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8006e0:	00802074 	movhi	r2,129
  8006e4:	108f2c04 	addi	r2,r2,15536
  8006e8:	10800017 	ldw	r2,0(r2)
  8006ec:	1009883a 	mov	r4,r2
  8006f0:	0140fa04 	movi	r5,1000
  8006f4:	080266c0 	call	80266c <__udivsi3>
  8006f8:	e0bfff15 	stw	r2,-4(fp)
  8006fc:	00024906 	br	801024 <RS232_ISR+0x96c>
	alt_up_rs232_dev *serial_dev = ((struct alt_up_dev*)up_dev)->RS232_dev;
  800700:	e0bffd17 	ldw	r2,-12(fp)
  800704:	10800017 	ldw	r2,0(r2)
  800708:	e0bffc15 	stw	r2,-16(fp)
	unsigned char* cert;
	int i = 0;
  80070c:	e03ffa15 	stw	zero,-24(fp)
	int len = 0;
  800710:	e03ff915 	stw	zero,-28(fp)
	switch(*(com.stateMachine)) {
  800714:	00802074 	movhi	r2,129
  800718:	108f3b04 	addi	r2,r2,15596
  80071c:	10801117 	ldw	r2,68(r2)
  800720:	10800017 	ldw	r2,0(r2)
  800724:	e0bffe15 	stw	r2,-8(fp)
  800728:	e0fffe17 	ldw	r3,-8(fp)
  80072c:	188002e8 	cmpgeui	r2,r3,11
  800730:	1002351e 	bne	r2,zero,801008 <RS232_ISR+0x950>
  800734:	e13ffe17 	ldw	r4,-8(fp)
  800738:	e13ffe17 	ldw	r4,-8(fp)
  80073c:	2105883a 	add	r2,r4,r4
  800740:	1087883a 	add	r3,r2,r2
  800744:	00802034 	movhi	r2,128
  800748:	1081d604 	addi	r2,r2,1880
  80074c:	1885883a 	add	r2,r3,r2
  800750:	10800017 	ldw	r2,0(r2)
  800754:	1000683a 	jmp	r2
  800758:	008008cc 	andi	r2,zero,35
  80075c:	00800a34 	movhi	r2,40
  800760:	00800c54 	movui	r2,49
  800764:	00800d74 	movhi	r2,53
  800768:	00800e98 	cmpnei	r2,zero,58
  80076c:	00801008 	cmpgei	r2,zero,64
  800770:	00801008 	cmpgei	r2,zero,64
  800774:	00800a84 	movi	r2,42
  800778:	00800af8 	rdprs	r2,zero,43
  80077c:	00800784 	movi	r2,30
  800780:	008007d4 	movui	r2,31
	case startInit:
		cert = sendStartInit();
  800784:	0801c100 	call	801c10 <sendStartInit>
  800788:	e0bffb15 	stw	r2,-20(fp)
		sendRS232(serial_dev, cert, 3);
  80078c:	e13ffc17 	ldw	r4,-16(fp)
  800790:	e17ffb17 	ldw	r5,-20(fp)
  800794:	018000c4 	movi	r6,3
  800798:	08023a40 	call	8023a4 <sendRS232>
		free(cert);
  80079c:	e13ffb17 	ldw	r4,-20(fp)
  8007a0:	080267c0 	call	80267c <free>
		cert = NULL;
  8007a4:	e03ffb15 	stw	zero,-20(fp)
		com.failReceive = 0;
  8007a8:	00802074 	movhi	r2,129
  8007ac:	108f3b04 	addi	r2,r2,15596
  8007b0:	10001615 	stw	zero,88(r2)
  8007b4:	00802074 	movhi	r2,129
  8007b8:	108f2c04 	addi	r2,r2,15536
  8007bc:	10800017 	ldw	r2,0(r2)
  8007c0:	1009883a 	mov	r4,r2
		return alt_ticks_per_second()/20;
  8007c4:	01400504 	movi	r5,20
  8007c8:	080266c0 	call	80266c <__udivsi3>
  8007cc:	e0bfff15 	stw	r2,-4(fp)
  8007d0:	00021406 	br	801024 <RS232_ISR+0x96c>
	case waitStart:
		i = 0;
  8007d4:	e03ffa15 	stw	zero,-24(fp)
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  8007d8:	e13ffc17 	ldw	r4,-16(fp)
  8007dc:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  8007e0:	e0bff915 	stw	r2,-28(fp)
  8007e4:	e0bff917 	ldw	r2,-28(fp)
  8007e8:	108000d0 	cmplti	r2,r2,3
  8007ec:	1000211e 	bne	r2,zero,800874 <RS232_ISR+0x1bc>
  8007f0:	00000006 	br	8007f4 <RS232_ISR+0x13c>
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  8007f4:	e13ffc17 	ldw	r4,-16(fp)
  8007f8:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  8007fc:	1005003a 	cmpeq	r2,r2,zero
  800800:	103ffc1e 	bne	r2,zero,8007f4 <RS232_ISR+0x13c>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  800804:	e0bffa17 	ldw	r2,-24(fp)
  800808:	1007883a 	mov	r3,r2
  80080c:	00802074 	movhi	r2,129
  800810:	108f3b04 	addi	r2,r2,15596
  800814:	188b883a 	add	r5,r3,r2
  800818:	e13ffc17 	ldw	r4,-16(fp)
  80081c:	01802074 	movhi	r6,129
  800820:	318f4784 	addi	r6,r6,15646
  800824:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
				i++;
  800828:	e0bffa17 	ldw	r2,-24(fp)
  80082c:	10800044 	addi	r2,r2,1
  800830:	e0bffa15 	stw	r2,-24(fp)
			} while(i < 3);
  800834:	e0bffa17 	ldw	r2,-24(fp)
  800838:	108000d0 	cmplti	r2,r2,3
  80083c:	103fed1e 	bne	r2,zero,8007f4 <RS232_ISR+0x13c>
			if(checkStartAck(com.data[0]) == 1) {
  800840:	00802074 	movhi	r2,129
  800844:	108f3b04 	addi	r2,r2,15596
  800848:	10800003 	ldbu	r2,0(r2)
  80084c:	11003fcc 	andi	r4,r2,255
  800850:	0801c800 	call	801c80 <checkStartAck>
  800854:	10800058 	cmpnei	r2,r2,1
  800858:	1000031e 	bne	r2,zero,800868 <RS232_ISR+0x1b0>
				setStates(sendStates);
  80085c:	01000044 	movi	r4,1
  800860:	08021840 	call	802184 <setStates>
  800864:	00001106 	br	8008ac <RS232_ISR+0x1f4>
			} else
				setStates(startInit);
  800868:	01000244 	movi	r4,9
  80086c:	08021840 	call	802184 <setStates>
  800870:	00000e06 	br	8008ac <RS232_ISR+0x1f4>
		} else {
			com.failReceive++;
  800874:	00802074 	movhi	r2,129
  800878:	108f3b04 	addi	r2,r2,15596
  80087c:	10801617 	ldw	r2,88(r2)
  800880:	10c00044 	addi	r3,r2,1
  800884:	00802074 	movhi	r2,129
  800888:	108f3b04 	addi	r2,r2,15596
  80088c:	10c01615 	stw	r3,88(r2)
			if(com.failReceive > 10)
  800890:	00802074 	movhi	r2,129
  800894:	108f3b04 	addi	r2,r2,15596
  800898:	10801617 	ldw	r2,88(r2)
  80089c:	108002d0 	cmplti	r2,r2,11
  8008a0:	1000021e 	bne	r2,zero,8008ac <RS232_ISR+0x1f4>
				setStates(startInit);
  8008a4:	01000244 	movi	r4,9
  8008a8:	08021840 	call	802184 <setStates>
  8008ac:	00802074 	movhi	r2,129
  8008b0:	108f2c04 	addi	r2,r2,15536
  8008b4:	10800017 	ldw	r2,0(r2)
  8008b8:	1009883a 	mov	r4,r2
		}
		return alt_ticks_per_second()/20;
  8008bc:	01400504 	movi	r5,20
  8008c0:	080266c0 	call	80266c <__udivsi3>
  8008c4:	e0bfff15 	stw	r2,-4(fp)
  8008c8:	0001d606 	br	801024 <RS232_ISR+0x96c>
	case checkClient:
		i = 0;
  8008cc:	e03ffa15 	stw	zero,-24(fp)
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  8008d0:	e13ffc17 	ldw	r4,-16(fp)
  8008d4:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  8008d8:	e0bff915 	stw	r2,-28(fp)
  8008dc:	e0bff917 	ldw	r2,-28(fp)
  8008e0:	108000d0 	cmplti	r2,r2,3
  8008e4:	10003d1e 	bne	r2,zero,8009dc <RS232_ISR+0x324>
  8008e8:	00000006 	br	8008ec <RS232_ISR+0x234>
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  8008ec:	e13ffc17 	ldw	r4,-16(fp)
  8008f0:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  8008f4:	1005003a 	cmpeq	r2,r2,zero
  8008f8:	103ffc1e 	bne	r2,zero,8008ec <RS232_ISR+0x234>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  8008fc:	e0bffa17 	ldw	r2,-24(fp)
  800900:	1007883a 	mov	r3,r2
  800904:	00802074 	movhi	r2,129
  800908:	108f3b04 	addi	r2,r2,15596
  80090c:	188b883a 	add	r5,r3,r2
  800910:	e13ffc17 	ldw	r4,-16(fp)
  800914:	01802074 	movhi	r6,129
  800918:	318f4784 	addi	r6,r6,15646
  80091c:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
				i++;
  800920:	e0bffa17 	ldw	r2,-24(fp)
  800924:	10800044 	addi	r2,r2,1
  800928:	e0bffa15 	stw	r2,-24(fp)
			} while(i < 3);
  80092c:	e0bffa17 	ldw	r2,-24(fp)
  800930:	108000d0 	cmplti	r2,r2,3
  800934:	103fed1e 	bne	r2,zero,8008ec <RS232_ISR+0x234>
			if(checkAck(com.data) == 1) {
  800938:	01002074 	movhi	r4,129
  80093c:	210f3b04 	addi	r4,r4,15596
  800940:	08020340 	call	802034 <checkAck>
  800944:	10800058 	cmpnei	r2,r2,1
  800948:	1000211e 	bne	r2,zero,8009d0 <RS232_ISR+0x318>
				if(getBit(com.data[0], 1) == 1) {
  80094c:	00802074 	movhi	r2,129
  800950:	108f3b04 	addi	r2,r2,15596
  800954:	10800003 	ldbu	r2,0(r2)
  800958:	11003fcc 	andi	r4,r2,255
  80095c:	01400044 	movi	r5,1
  800960:	08014cc0 	call	8014cc <getBit>
  800964:	10800058 	cmpnei	r2,r2,1
  800968:	1000161e 	bne	r2,zero,8009c4 <RS232_ISR+0x30c>
					setStates(sendAck0);
  80096c:	010001c4 	movi	r4,7
  800970:	08021840 	call	802184 <setStates>
					com.num_packets = ((int)(com.data[1] << 8))+(int)com.data[2];
  800974:	00802074 	movhi	r2,129
  800978:	108f3b04 	addi	r2,r2,15596
  80097c:	10800043 	ldbu	r2,1(r2)
  800980:	10803fcc 	andi	r2,r2,255
  800984:	1006923a 	slli	r3,r2,8
  800988:	00802074 	movhi	r2,129
  80098c:	108f3b04 	addi	r2,r2,15596
  800990:	10800083 	ldbu	r2,2(r2)
  800994:	10803fcc 	andi	r2,r2,255
  800998:	1887883a 	add	r3,r3,r2
  80099c:	00802074 	movhi	r2,129
  8009a0:	108f3b04 	addi	r2,r2,15596
  8009a4:	10c01715 	stw	r3,92(r2)
					printf("num of packets will be receiving: %d\n", com.num_packets);
  8009a8:	00802074 	movhi	r2,129
  8009ac:	108f3b04 	addi	r2,r2,15596
  8009b0:	11401717 	ldw	r5,92(r2)
  8009b4:	01002074 	movhi	r4,129
  8009b8:	213f5904 	addi	r4,r4,-668
  8009bc:	0802e840 	call	802e84 <printf>
  8009c0:	00001406 	br	800a14 <RS232_ISR+0x35c>
				} else
					setStates(sendStates);
  8009c4:	01000044 	movi	r4,1
  8009c8:	08021840 	call	802184 <setStates>
  8009cc:	00001106 	br	800a14 <RS232_ISR+0x35c>
			} else
				setStates(sendStates);
  8009d0:	01000044 	movi	r4,1
  8009d4:	08021840 	call	802184 <setStates>
  8009d8:	00000e06 	br	800a14 <RS232_ISR+0x35c>
		} else {
			com.failReceive++;
  8009dc:	00802074 	movhi	r2,129
  8009e0:	108f3b04 	addi	r2,r2,15596
  8009e4:	10801617 	ldw	r2,88(r2)
  8009e8:	10c00044 	addi	r3,r2,1
  8009ec:	00802074 	movhi	r2,129
  8009f0:	108f3b04 	addi	r2,r2,15596
  8009f4:	10c01615 	stw	r3,88(r2)
			if(com.failReceive > 100) {
  8009f8:	00802074 	movhi	r2,129
  8009fc:	108f3b04 	addi	r2,r2,15596
  800a00:	10801617 	ldw	r2,88(r2)
  800a04:	10801950 	cmplti	r2,r2,101
  800a08:	1000021e 	bne	r2,zero,800a14 <RS232_ISR+0x35c>
				reset(serial_dev);
  800a0c:	e13ffc17 	ldw	r4,-16(fp)
  800a10:	08021d80 	call	8021d8 <reset>
  800a14:	00802074 	movhi	r2,129
  800a18:	108f2c04 	addi	r2,r2,15536
  800a1c:	10800017 	ldw	r2,0(r2)
  800a20:	1009883a 	mov	r4,r2
			}
		}
		return alt_ticks_per_second()/20;
  800a24:	01400504 	movi	r5,20
  800a28:	080266c0 	call	80266c <__udivsi3>
  800a2c:	e0bfff15 	stw	r2,-4(fp)
  800a30:	00017c06 	br	801024 <RS232_ISR+0x96c>
	case sendStates:
		cert = sendStats();
  800a34:	0801db40 	call	801db4 <sendStats>
  800a38:	e0bffb15 	stw	r2,-20(fp)
		sendRS232(serial_dev, cert, 3);
  800a3c:	e13ffc17 	ldw	r4,-16(fp)
  800a40:	e17ffb17 	ldw	r5,-20(fp)
  800a44:	018000c4 	movi	r6,3
  800a48:	08023a40 	call	8023a4 <sendRS232>
		free(cert);
  800a4c:	e13ffb17 	ldw	r4,-20(fp)
  800a50:	080267c0 	call	80267c <free>
		cert = NULL;
  800a54:	e03ffb15 	stw	zero,-20(fp)
		com.failReceive = 0;
  800a58:	00802074 	movhi	r2,129
  800a5c:	108f3b04 	addi	r2,r2,15596
  800a60:	10001615 	stw	zero,88(r2)
  800a64:	00802074 	movhi	r2,129
  800a68:	108f2c04 	addi	r2,r2,15536
  800a6c:	10800017 	ldw	r2,0(r2)
  800a70:	1009883a 	mov	r4,r2
		return alt_ticks_per_second()/20;
  800a74:	01400504 	movi	r5,20
  800a78:	080266c0 	call	80266c <__udivsi3>
  800a7c:	e0bfff15 	stw	r2,-4(fp)
  800a80:	00016806 	br	801024 <RS232_ISR+0x96c>
	case sendAck0:
		cert = sendAck();
  800a84:	0801f140 	call	801f14 <sendAck>
  800a88:	e0bffb15 	stw	r2,-20(fp)
		sendRS232(serial_dev, cert, 3);
  800a8c:	e13ffc17 	ldw	r4,-16(fp)
  800a90:	e17ffb17 	ldw	r5,-20(fp)
  800a94:	018000c4 	movi	r6,3
  800a98:	08023a40 	call	8023a4 <sendRS232>
		if(cert[1] != 0)
  800a9c:	e0bffb17 	ldw	r2,-20(fp)
  800aa0:	10800044 	addi	r2,r2,1
  800aa4:	10800003 	ldbu	r2,0(r2)
  800aa8:	10803fcc 	andi	r2,r2,255
  800aac:	1005003a 	cmpeq	r2,r2,zero
  800ab0:	1000031e 	bne	r2,zero,800ac0 <RS232_ISR+0x408>
			printf("sth is wrong");
  800ab4:	01002074 	movhi	r4,129
  800ab8:	213f6304 	addi	r4,r4,-628
  800abc:	0802e840 	call	802e84 <printf>
		free(cert);
  800ac0:	e13ffb17 	ldw	r4,-20(fp)
  800ac4:	080267c0 	call	80267c <free>
		cert = NULL;
  800ac8:	e03ffb15 	stw	zero,-20(fp)
		com.failReceive = 0;
  800acc:	00802074 	movhi	r2,129
  800ad0:	108f3b04 	addi	r2,r2,15596
  800ad4:	10001615 	stw	zero,88(r2)
  800ad8:	00802074 	movhi	r2,129
  800adc:	108f2c04 	addi	r2,r2,15536
  800ae0:	10800017 	ldw	r2,0(r2)
  800ae4:	1009883a 	mov	r4,r2
		return alt_ticks_per_second()/20;
  800ae8:	01400504 	movi	r5,20
  800aec:	080266c0 	call	80266c <__udivsi3>
  800af0:	e0bfff15 	stw	r2,-4(fp)
  800af4:	00014b06 	br	801024 <RS232_ISR+0x96c>
	case receiveData0:
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) > 2) {
  800af8:	e13ffc17 	ldw	r4,-16(fp)
  800afc:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  800b00:	e0bff915 	stw	r2,-28(fp)
  800b04:	e0bff917 	ldw	r2,-28(fp)
  800b08:	108000d0 	cmplti	r2,r2,3
  800b0c:	10003b1e 	bne	r2,zero,800bfc <RS232_ISR+0x544>
			//read first 2 bytes for header information
			alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);
  800b10:	e13ffc17 	ldw	r4,-16(fp)
  800b14:	01402074 	movhi	r5,129
  800b18:	294f3b04 	addi	r5,r5,15596
  800b1c:	01802074 	movhi	r6,129
  800b20:	318f4784 	addi	r6,r6,15646
  800b24:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
			alt_up_rs232_read_data(serial_dev, &com.data[1], &com.parity);
  800b28:	01402074 	movhi	r5,129
  800b2c:	294f3b44 	addi	r5,r5,15597
  800b30:	e13ffc17 	ldw	r4,-16(fp)
  800b34:	01802074 	movhi	r6,129
  800b38:	318f4784 	addi	r6,r6,15646
  800b3c:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
			struct Packet* p = readPacketHeader(com.data[0], com.data[1]);
  800b40:	00802074 	movhi	r2,129
  800b44:	108f3b04 	addi	r2,r2,15596
  800b48:	10800003 	ldbu	r2,0(r2)
  800b4c:	11003fcc 	andi	r4,r2,255
  800b50:	00802074 	movhi	r2,129
  800b54:	108f3b04 	addi	r2,r2,15596
  800b58:	10800043 	ldbu	r2,1(r2)
  800b5c:	11403fcc 	andi	r5,r2,255
  800b60:	08013140 	call	801314 <readPacketHeader>
  800b64:	e0bff815 	stw	r2,-32(fp)
			i = 0;
  800b68:	e03ffa15 	stw	zero,-24(fp)
  800b6c:	00000006 	br	800b70 <RS232_ISR+0x4b8>
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  800b70:	e13ffc17 	ldw	r4,-16(fp)
  800b74:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  800b78:	1005003a 	cmpeq	r2,r2,zero
  800b7c:	103ffc1e 	bne	r2,zero,800b70 <RS232_ISR+0x4b8>
				alt_up_rs232_read_data(serial_dev, &(p->data[i+HEADERSIZE]), &com.parity);
  800b80:	e0bff817 	ldw	r2,-32(fp)
  800b84:	10c00017 	ldw	r3,0(r2)
  800b88:	e0bffa17 	ldw	r2,-24(fp)
  800b8c:	1885883a 	add	r2,r3,r2
  800b90:	11400084 	addi	r5,r2,2
  800b94:	e13ffc17 	ldw	r4,-16(fp)
  800b98:	01802074 	movhi	r6,129
  800b9c:	318f4784 	addi	r6,r6,15646
  800ba0:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
			//	printf("%c", p->data[i+HEADERSIZE]);
				i++;
  800ba4:	e0bffa17 	ldw	r2,-24(fp)
  800ba8:	10800044 	addi	r2,r2,1
  800bac:	e0bffa15 	stw	r2,-24(fp)
			} while(p->data_size > i );
  800bb0:	e0bff817 	ldw	r2,-32(fp)
  800bb4:	10c00117 	ldw	r3,4(r2)
  800bb8:	e0bffa17 	ldw	r2,-24(fp)
  800bbc:	10ffec16 	blt	r2,r3,800b70 <RS232_ISR+0x4b8>
			//printf("\n");
			enqueue(com.receivePackets, (void*)p);
  800bc0:	00802074 	movhi	r2,129
  800bc4:	108f3b04 	addi	r2,r2,15596
  800bc8:	11000e17 	ldw	r4,56(r2)
  800bcc:	e17ff817 	ldw	r5,-32(fp)
  800bd0:	08017580 	call	801758 <enqueue>
			com.index_packets++;
  800bd4:	00802074 	movhi	r2,129
  800bd8:	108f3b04 	addi	r2,r2,15596
  800bdc:	10801817 	ldw	r2,96(r2)
  800be0:	10c00044 	addi	r3,r2,1
  800be4:	00802074 	movhi	r2,129
  800be8:	108f3b04 	addi	r2,r2,15596
  800bec:	10c01815 	stw	r3,96(r2)
			setStates(sendAck0);
  800bf0:	010001c4 	movi	r4,7
  800bf4:	08021840 	call	802184 <setStates>
  800bf8:	00000e06 	br	800c34 <RS232_ISR+0x57c>
		} else {
			com.failReceive++;
  800bfc:	00802074 	movhi	r2,129
  800c00:	108f3b04 	addi	r2,r2,15596
  800c04:	10801617 	ldw	r2,88(r2)
  800c08:	10c00044 	addi	r3,r2,1
  800c0c:	00802074 	movhi	r2,129
  800c10:	108f3b04 	addi	r2,r2,15596
  800c14:	10c01615 	stw	r3,88(r2)
			if(com.failReceive > 100) {
  800c18:	00802074 	movhi	r2,129
  800c1c:	108f3b04 	addi	r2,r2,15596
  800c20:	10801617 	ldw	r2,88(r2)
  800c24:	10801950 	cmplti	r2,r2,101
  800c28:	1000021e 	bne	r2,zero,800c34 <RS232_ISR+0x57c>
				reset(serial_dev);
  800c2c:	e13ffc17 	ldw	r4,-16(fp)
  800c30:	08021d80 	call	8021d8 <reset>
  800c34:	00802074 	movhi	r2,129
  800c38:	108f2c04 	addi	r2,r2,15536
  800c3c:	10800017 	ldw	r2,0(r2)
  800c40:	1009883a 	mov	r4,r2
			}
		}
		return alt_ticks_per_second()/20;
  800c44:	01400504 	movi	r5,20
  800c48:	080266c0 	call	80266c <__udivsi3>
  800c4c:	e0bfff15 	stw	r2,-4(fp)
  800c50:	0000f406 	br	801024 <RS232_ISR+0x96c>
	case waitClient:
		i = 0;
  800c54:	e03ffa15 	stw	zero,-24(fp)
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  800c58:	e13ffc17 	ldw	r4,-16(fp)
  800c5c:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  800c60:	e0bff915 	stw	r2,-28(fp)
  800c64:	e0bff917 	ldw	r2,-28(fp)
  800c68:	108000d0 	cmplti	r2,r2,3
  800c6c:	10002b1e 	bne	r2,zero,800d1c <RS232_ISR+0x664>
  800c70:	00000006 	br	800c74 <RS232_ISR+0x5bc>
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  800c74:	e13ffc17 	ldw	r4,-16(fp)
  800c78:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  800c7c:	1005003a 	cmpeq	r2,r2,zero
  800c80:	103ffc1e 	bne	r2,zero,800c74 <RS232_ISR+0x5bc>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  800c84:	e0bffa17 	ldw	r2,-24(fp)
  800c88:	1007883a 	mov	r3,r2
  800c8c:	00802074 	movhi	r2,129
  800c90:	108f3b04 	addi	r2,r2,15596
  800c94:	188b883a 	add	r5,r3,r2
  800c98:	e13ffc17 	ldw	r4,-16(fp)
  800c9c:	01802074 	movhi	r6,129
  800ca0:	318f4784 	addi	r6,r6,15646
  800ca4:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
				i++;
  800ca8:	e0bffa17 	ldw	r2,-24(fp)
  800cac:	10800044 	addi	r2,r2,1
  800cb0:	e0bffa15 	stw	r2,-24(fp)
			} while(i < 3);
  800cb4:	e0bffa17 	ldw	r2,-24(fp)
  800cb8:	108000d0 	cmplti	r2,r2,3
  800cbc:	103fed1e 	bne	r2,zero,800c74 <RS232_ISR+0x5bc>
			if(checkAck(com.data) == 1) {
  800cc0:	01002074 	movhi	r4,129
  800cc4:	210f3b04 	addi	r4,r4,15596
  800cc8:	08020340 	call	802034 <checkAck>
  800ccc:	10800058 	cmpnei	r2,r2,1
  800cd0:	1000031e 	bne	r2,zero,800ce0 <RS232_ISR+0x628>
				setStates(sendData0);
  800cd4:	010000c4 	movi	r4,3
  800cd8:	08021840 	call	802184 <setStates>
  800cdc:	00001d06 	br	800d54 <RS232_ISR+0x69c>
			} else {
				com.failReceive++;
  800ce0:	00802074 	movhi	r2,129
  800ce4:	108f3b04 	addi	r2,r2,15596
  800ce8:	10801617 	ldw	r2,88(r2)
  800cec:	10c00044 	addi	r3,r2,1
  800cf0:	00802074 	movhi	r2,129
  800cf4:	108f3b04 	addi	r2,r2,15596
  800cf8:	10c01615 	stw	r3,88(r2)
				if(com.failReceive > 100)
  800cfc:	00802074 	movhi	r2,129
  800d00:	108f3b04 	addi	r2,r2,15596
  800d04:	10801617 	ldw	r2,88(r2)
  800d08:	10801950 	cmplti	r2,r2,101
  800d0c:	1000111e 	bne	r2,zero,800d54 <RS232_ISR+0x69c>
					setStates(sendStates);
  800d10:	01000044 	movi	r4,1
  800d14:	08021840 	call	802184 <setStates>
  800d18:	00000e06 	br	800d54 <RS232_ISR+0x69c>
			}
		} else {
			com.failReceive++;
  800d1c:	00802074 	movhi	r2,129
  800d20:	108f3b04 	addi	r2,r2,15596
  800d24:	10801617 	ldw	r2,88(r2)
  800d28:	10c00044 	addi	r3,r2,1
  800d2c:	00802074 	movhi	r2,129
  800d30:	108f3b04 	addi	r2,r2,15596
  800d34:	10c01615 	stw	r3,88(r2)
			if(com.failReceive > 100) {
  800d38:	00802074 	movhi	r2,129
  800d3c:	108f3b04 	addi	r2,r2,15596
  800d40:	10801617 	ldw	r2,88(r2)
  800d44:	10801950 	cmplti	r2,r2,101
  800d48:	1000021e 	bne	r2,zero,800d54 <RS232_ISR+0x69c>
				reset(serial_dev);
  800d4c:	e13ffc17 	ldw	r4,-16(fp)
  800d50:	08021d80 	call	8021d8 <reset>
  800d54:	00802074 	movhi	r2,129
  800d58:	108f2c04 	addi	r2,r2,15536
  800d5c:	10800017 	ldw	r2,0(r2)
  800d60:	1009883a 	mov	r4,r2
			}
		}
		return alt_ticks_per_second()/20;
  800d64:	01400504 	movi	r5,20
  800d68:	080266c0 	call	80266c <__udivsi3>
  800d6c:	e0bfff15 	stw	r2,-4(fp)
  800d70:	0000ac06 	br	801024 <RS232_ISR+0x96c>
	case sendData0:
		if(com.packetBuf == NULL) {
  800d74:	00802074 	movhi	r2,129
  800d78:	108f3b04 	addi	r2,r2,15596
  800d7c:	10801017 	ldw	r2,64(r2)
  800d80:	1004c03a 	cmpne	r2,r2,zero
  800d84:	10001a1e 	bne	r2,zero,800df0 <RS232_ISR+0x738>
			if((com.packetBuf = (struct Packet*)dequeue(com.sendPackets))==NULL) {
  800d88:	00802074 	movhi	r2,129
  800d8c:	108f3b04 	addi	r2,r2,15596
  800d90:	11000d17 	ldw	r4,52(r2)
  800d94:	08018a40 	call	8018a4 <dequeue>
  800d98:	1007883a 	mov	r3,r2
  800d9c:	00802074 	movhi	r2,129
  800da0:	108f3b04 	addi	r2,r2,15596
  800da4:	10c01015 	stw	r3,64(r2)
  800da8:	00802074 	movhi	r2,129
  800dac:	108f3b04 	addi	r2,r2,15596
  800db0:	10801017 	ldw	r2,64(r2)
  800db4:	1004c03a 	cmpne	r2,r2,zero
  800db8:	10000d1e 	bne	r2,zero,800df0 <RS232_ISR+0x738>
				printf("Packet sending fail, queue is empty");
  800dbc:	01002074 	movhi	r4,129
  800dc0:	213f6704 	addi	r4,r4,-612
  800dc4:	0802e840 	call	802e84 <printf>
				setStates(sendStates);
  800dc8:	01000044 	movi	r4,1
  800dcc:	08021840 	call	802184 <setStates>
  800dd0:	00802074 	movhi	r2,129
  800dd4:	108f2c04 	addi	r2,r2,15536
  800dd8:	10800017 	ldw	r2,0(r2)
  800ddc:	1009883a 	mov	r4,r2
				return alt_ticks_per_second()/50;
  800de0:	01400c84 	movi	r5,50
  800de4:	080266c0 	call	80266c <__udivsi3>
  800de8:	e0bfff15 	stw	r2,-4(fp)
  800dec:	00008d06 	br	801024 <RS232_ISR+0x96c>
			}
		} setAck(com.packetBuf, com.host_ack);
  800df0:	00802074 	movhi	r2,129
  800df4:	108f3b04 	addi	r2,r2,15596
  800df8:	11001017 	ldw	r4,64(r2)
  800dfc:	00802074 	movhi	r2,129
  800e00:	108f3b04 	addi	r2,r2,15596
  800e04:	11401417 	ldw	r5,80(r2)
  800e08:	08015500 	call	801550 <setAck>

		for(i = 0; i< com.packetBuf->data_size+HEADERSIZE; i++) {
  800e0c:	e03ffa15 	stw	zero,-24(fp)
  800e10:	00000d06 	br	800e48 <RS232_ISR+0x790>
			alt_up_rs232_write_data(serial_dev, com.packetBuf->data[i]);
  800e14:	00802074 	movhi	r2,129
  800e18:	108f3b04 	addi	r2,r2,15596
  800e1c:	10801017 	ldw	r2,64(r2)
  800e20:	10c00017 	ldw	r3,0(r2)
  800e24:	e0bffa17 	ldw	r2,-24(fp)
  800e28:	1885883a 	add	r2,r3,r2
  800e2c:	10800003 	ldbu	r2,0(r2)
  800e30:	11403fcc 	andi	r5,r2,255
  800e34:	e13ffc17 	ldw	r4,-16(fp)
  800e38:	080e89c0 	call	80e89c <alt_up_rs232_write_data>
				setStates(sendStates);
				return alt_ticks_per_second()/50;
			}
		} setAck(com.packetBuf, com.host_ack);

		for(i = 0; i< com.packetBuf->data_size+HEADERSIZE; i++) {
  800e3c:	e0bffa17 	ldw	r2,-24(fp)
  800e40:	10800044 	addi	r2,r2,1
  800e44:	e0bffa15 	stw	r2,-24(fp)
  800e48:	00802074 	movhi	r2,129
  800e4c:	108f3b04 	addi	r2,r2,15596
  800e50:	10801017 	ldw	r2,64(r2)
  800e54:	10800117 	ldw	r2,4(r2)
  800e58:	10c00084 	addi	r3,r2,2
  800e5c:	e0bffa17 	ldw	r2,-24(fp)
  800e60:	10ffec16 	blt	r2,r3,800e14 <RS232_ISR+0x75c>
			alt_up_rs232_write_data(serial_dev, com.packetBuf->data[i]);
		}
		setStates(waitAck0);
  800e64:	01000104 	movi	r4,4
  800e68:	08021840 	call	802184 <setStates>
		com.failReceive = 0;
  800e6c:	00802074 	movhi	r2,129
  800e70:	108f3b04 	addi	r2,r2,15596
  800e74:	10001615 	stw	zero,88(r2)
  800e78:	00802074 	movhi	r2,129
  800e7c:	108f2c04 	addi	r2,r2,15536
  800e80:	10800017 	ldw	r2,0(r2)
  800e84:	1009883a 	mov	r4,r2
		return alt_ticks_per_second()/20;
  800e88:	01400504 	movi	r5,20
  800e8c:	080266c0 	call	80266c <__udivsi3>
  800e90:	e0bfff15 	stw	r2,-4(fp)
  800e94:	00006306 	br	801024 <RS232_ISR+0x96c>
	case waitAck0:
		i = 0;
  800e98:	e03ffa15 	stw	zero,-24(fp)
		if((len = alt_up_rs232_get_used_space_in_read_FIFO(serial_dev)) >= 3) {
  800e9c:	e13ffc17 	ldw	r4,-16(fp)
  800ea0:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  800ea4:	e0bff915 	stw	r2,-28(fp)
  800ea8:	e0bff917 	ldw	r2,-28(fp)
  800eac:	108000d0 	cmplti	r2,r2,3
  800eb0:	10003f1e 	bne	r2,zero,800fb0 <RS232_ISR+0x8f8>
  800eb4:	00000006 	br	800eb8 <RS232_ISR+0x800>
			do {
				while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) == 0);
  800eb8:	e13ffc17 	ldw	r4,-16(fp)
  800ebc:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  800ec0:	1005003a 	cmpeq	r2,r2,zero
  800ec4:	103ffc1e 	bne	r2,zero,800eb8 <RS232_ISR+0x800>
				alt_up_rs232_read_data(serial_dev, &com.data[i], &com.parity);
  800ec8:	e0bffa17 	ldw	r2,-24(fp)
  800ecc:	1007883a 	mov	r3,r2
  800ed0:	00802074 	movhi	r2,129
  800ed4:	108f3b04 	addi	r2,r2,15596
  800ed8:	188b883a 	add	r5,r3,r2
  800edc:	e13ffc17 	ldw	r4,-16(fp)
  800ee0:	01802074 	movhi	r6,129
  800ee4:	318f4784 	addi	r6,r6,15646
  800ee8:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
				i++;
  800eec:	e0bffa17 	ldw	r2,-24(fp)
  800ef0:	10800044 	addi	r2,r2,1
  800ef4:	e0bffa15 	stw	r2,-24(fp)
			} while(i < 3);
  800ef8:	e0bffa17 	ldw	r2,-24(fp)
  800efc:	108000d0 	cmplti	r2,r2,3
  800f00:	103fed1e 	bne	r2,zero,800eb8 <RS232_ISR+0x800>
			if(checkAck(com.data) == 1) {
  800f04:	01002074 	movhi	r4,129
  800f08:	210f3b04 	addi	r4,r4,15596
  800f0c:	08020340 	call	802034 <checkAck>
  800f10:	10800058 	cmpnei	r2,r2,1
  800f14:	1000231e 	bne	r2,zero,800fa4 <RS232_ISR+0x8ec>
				com.index_send_packets++;
  800f18:	00802074 	movhi	r2,129
  800f1c:	108f3b04 	addi	r2,r2,15596
  800f20:	10801a17 	ldw	r2,104(r2)
  800f24:	10c00044 	addi	r3,r2,1
  800f28:	00802074 	movhi	r2,129
  800f2c:	108f3b04 	addi	r2,r2,15596
  800f30:	10c01a15 	stw	r3,104(r2)
				killPacket(&(com.packetBuf));
  800f34:	01002074 	movhi	r4,129
  800f38:	210f4b04 	addi	r4,r4,15660
  800f3c:	08011240 	call	801124 <killPacket>
				if(com.index_send_packets < com.num_send_packets)
  800f40:	00802074 	movhi	r2,129
  800f44:	108f3b04 	addi	r2,r2,15596
  800f48:	10c01a17 	ldw	r3,104(r2)
  800f4c:	00802074 	movhi	r2,129
  800f50:	108f3b04 	addi	r2,r2,15596
  800f54:	10801917 	ldw	r2,100(r2)
  800f58:	1880030e 	bge	r3,r2,800f68 <RS232_ISR+0x8b0>
					setStates(sendData0);
  800f5c:	010000c4 	movi	r4,3
  800f60:	08021840 	call	802184 <setStates>
  800f64:	00002006 	br	800fe8 <RS232_ISR+0x930>
				else {
					com.index_send_packets = com.num_send_packets = 0;
  800f68:	00802074 	movhi	r2,129
  800f6c:	108f3b04 	addi	r2,r2,15596
  800f70:	10001915 	stw	zero,100(r2)
  800f74:	00802074 	movhi	r2,129
  800f78:	108f3b04 	addi	r2,r2,15596
  800f7c:	10c01917 	ldw	r3,100(r2)
  800f80:	00802074 	movhi	r2,129
  800f84:	108f3b04 	addi	r2,r2,15596
  800f88:	10c01a15 	stw	r3,104(r2)
					setStates(sendStates);
  800f8c:	01000044 	movi	r4,1
  800f90:	08021840 	call	802184 <setStates>
					com.isRdySend = 0;
  800f94:	00802074 	movhi	r2,129
  800f98:	108f3b04 	addi	r2,r2,15596
  800f9c:	10001515 	stw	zero,84(r2)
  800fa0:	00001106 	br	800fe8 <RS232_ISR+0x930>
				}
			} else {
				setStates(sendData0);
  800fa4:	010000c4 	movi	r4,3
  800fa8:	08021840 	call	802184 <setStates>
  800fac:	00000e06 	br	800fe8 <RS232_ISR+0x930>
			}
		} else {
			com.failReceive++;
  800fb0:	00802074 	movhi	r2,129
  800fb4:	108f3b04 	addi	r2,r2,15596
  800fb8:	10801617 	ldw	r2,88(r2)
  800fbc:	10c00044 	addi	r3,r2,1
  800fc0:	00802074 	movhi	r2,129
  800fc4:	108f3b04 	addi	r2,r2,15596
  800fc8:	10c01615 	stw	r3,88(r2)
			if(com.failReceive > 100) {
  800fcc:	00802074 	movhi	r2,129
  800fd0:	108f3b04 	addi	r2,r2,15596
  800fd4:	10801617 	ldw	r2,88(r2)
  800fd8:	10801950 	cmplti	r2,r2,101
  800fdc:	1000021e 	bne	r2,zero,800fe8 <RS232_ISR+0x930>
				reset(serial_dev);
  800fe0:	e13ffc17 	ldw	r4,-16(fp)
  800fe4:	08021d80 	call	8021d8 <reset>
  800fe8:	00802074 	movhi	r2,129
  800fec:	108f2c04 	addi	r2,r2,15536
  800ff0:	10800017 	ldw	r2,0(r2)
  800ff4:	1009883a 	mov	r4,r2
			}
		}
		return alt_ticks_per_second()/20;
  800ff8:	01400504 	movi	r5,20
  800ffc:	080266c0 	call	80266c <__udivsi3>
  801000:	e0bfff15 	stw	r2,-4(fp)
  801004:	00000706 	br	801024 <RS232_ISR+0x96c>
  801008:	00802074 	movhi	r2,129
  80100c:	108f2c04 	addi	r2,r2,15536
  801010:	10800017 	ldw	r2,0(r2)
  801014:	1009883a 	mov	r4,r2
	default:
		break;
	}

	return alt_ticks_per_second()/20;
  801018:	01400504 	movi	r5,20
  80101c:	080266c0 	call	80266c <__udivsi3>
  801020:	e0bfff15 	stw	r2,-4(fp)
  801024:	e0bfff17 	ldw	r2,-4(fp)
}
  801028:	e037883a 	mov	sp,fp
  80102c:	dfc00117 	ldw	ra,4(sp)
  801030:	df000017 	ldw	fp,0(sp)
  801034:	dec00204 	addi	sp,sp,8
  801038:	f800283a 	ret

0080103c <initPacket>:
 *      Author: danny
 */

#include "Packet.h"

struct Packet* initPacket(int data_size, unsigned char* data) {
  80103c:	defffa04 	addi	sp,sp,-24
  801040:	dfc00515 	stw	ra,20(sp)
  801044:	df000415 	stw	fp,16(sp)
  801048:	df000404 	addi	fp,sp,16
  80104c:	e13ffe15 	stw	r4,-8(fp)
  801050:	e17fff15 	stw	r5,-4(fp)
	struct Packet* this = (struct Packet*)malloc(sizeof(struct Packet));
  801054:	01000504 	movi	r4,20
  801058:	08026900 	call	802690 <malloc>
  80105c:	e0bffd15 	stw	r2,-12(fp)
	this->data_size = data_size;
  801060:	e0fffd17 	ldw	r3,-12(fp)
  801064:	e0bffe17 	ldw	r2,-8(fp)
  801068:	18800115 	stw	r2,4(r3)
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
  80106c:	e0bffe17 	ldw	r2,-8(fp)
  801070:	10800084 	addi	r2,r2,2
  801074:	1009883a 	mov	r4,r2
  801078:	08026900 	call	802690 <malloc>
  80107c:	1007883a 	mov	r3,r2
  801080:	e0bffd17 	ldw	r2,-12(fp)
  801084:	10c00015 	stw	r3,0(r2)
	this->data[0] = 0;
  801088:	e0bffd17 	ldw	r2,-12(fp)
  80108c:	10800017 	ldw	r2,0(r2)
  801090:	10000005 	stb	zero,0(r2)
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
  801094:	e0bffd17 	ldw	r2,-12(fp)
  801098:	10800017 	ldw	r2,0(r2)
  80109c:	10c00044 	addi	r3,r2,1
  8010a0:	e0bffe17 	ldw	r2,-8(fp)
  8010a4:	10800084 	addi	r2,r2,2
  8010a8:	18800005 	stb	r2,0(r3)
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
  8010ac:	01000104 	movi	r4,4
  8010b0:	08026900 	call	802690 <malloc>
  8010b4:	1007883a 	mov	r3,r2
  8010b8:	e0bffd17 	ldw	r2,-12(fp)
  8010bc:	10c00215 	stw	r3,8(r2)
	int i;
	for(i = 0; i < data_size; i++) {
  8010c0:	e03ffc15 	stw	zero,-16(fp)
  8010c4:	00000e06 	br	801100 <initPacket+0xc4>
		this->data[i+HEADERSIZE] = data[i];
  8010c8:	e0bffd17 	ldw	r2,-12(fp)
  8010cc:	10c00017 	ldw	r3,0(r2)
  8010d0:	e0bffc17 	ldw	r2,-16(fp)
  8010d4:	1885883a 	add	r2,r3,r2
  8010d8:	11000084 	addi	r4,r2,2
  8010dc:	e0bffc17 	ldw	r2,-16(fp)
  8010e0:	1007883a 	mov	r3,r2
  8010e4:	e0bfff17 	ldw	r2,-4(fp)
  8010e8:	1885883a 	add	r2,r3,r2
  8010ec:	10800003 	ldbu	r2,0(r2)
  8010f0:	20800005 	stb	r2,0(r4)
	this->data = (unsigned char*)malloc(sizeof(unsigned char)*(data_size+HEADERSIZE));
	this->data[0] = 0;
	this->data[1] = (unsigned char)(data_size + HEADERSIZE);
	this->type = (enum msgType*)malloc(sizeof(enum msgType));
	int i;
	for(i = 0; i < data_size; i++) {
  8010f4:	e0bffc17 	ldw	r2,-16(fp)
  8010f8:	10800044 	addi	r2,r2,1
  8010fc:	e0bffc15 	stw	r2,-16(fp)
  801100:	e0fffc17 	ldw	r3,-16(fp)
  801104:	e0bffe17 	ldw	r2,-8(fp)
  801108:	18bfef16 	blt	r3,r2,8010c8 <initPacket+0x8c>
		this->data[i+HEADERSIZE] = data[i];
	}
	return this;
  80110c:	e0bffd17 	ldw	r2,-12(fp)
}
  801110:	e037883a 	mov	sp,fp
  801114:	dfc00117 	ldw	ra,4(sp)
  801118:	df000017 	ldw	fp,0(sp)
  80111c:	dec00204 	addi	sp,sp,8
  801120:	f800283a 	ret

00801124 <killPacket>:

void killPacket(struct Packet** this) {
  801124:	defffd04 	addi	sp,sp,-12
  801128:	dfc00215 	stw	ra,8(sp)
  80112c:	df000115 	stw	fp,4(sp)
  801130:	df000104 	addi	fp,sp,4
  801134:	e13fff15 	stw	r4,-4(fp)
	if(this == NULL) {
  801138:	e0bfff17 	ldw	r2,-4(fp)
  80113c:	1004c03a 	cmpne	r2,r2,zero
  801140:	1000041e 	bne	r2,zero,801154 <killPacket+0x30>
		printf("packet is null when attempt to removed\n");
  801144:	01002074 	movhi	r4,129
  801148:	213f7004 	addi	r4,r4,-576
  80114c:	0802f9c0 	call	802f9c <puts>
		return;
  801150:	00001306 	br	8011a0 <killPacket+0x7c>
	}
	free((*this)->data);
  801154:	e0bfff17 	ldw	r2,-4(fp)
  801158:	10800017 	ldw	r2,0(r2)
  80115c:	11000017 	ldw	r4,0(r2)
  801160:	080267c0 	call	80267c <free>
	(*this)->data = NULL;
  801164:	e0bfff17 	ldw	r2,-4(fp)
  801168:	10800017 	ldw	r2,0(r2)
  80116c:	10000015 	stw	zero,0(r2)
	free((*this)->type);
  801170:	e0bfff17 	ldw	r2,-4(fp)
  801174:	10800017 	ldw	r2,0(r2)
  801178:	11000217 	ldw	r4,8(r2)
  80117c:	080267c0 	call	80267c <free>
	(*this)->type = NULL;
  801180:	e0bfff17 	ldw	r2,-4(fp)
  801184:	10800017 	ldw	r2,0(r2)
  801188:	10000215 	stw	zero,8(r2)
	free(*this);
  80118c:	e0bfff17 	ldw	r2,-4(fp)
  801190:	11000017 	ldw	r4,0(r2)
  801194:	080267c0 	call	80267c <free>
	*this = NULL;
  801198:	e0bfff17 	ldw	r2,-4(fp)
  80119c:	10000015 	stw	zero,0(r2)
}
  8011a0:	e037883a 	mov	sp,fp
  8011a4:	dfc00117 	ldw	ra,4(sp)
  8011a8:	df000017 	ldw	fp,0(sp)
  8011ac:	dec00204 	addi	sp,sp,8
  8011b0:	f800283a 	ret

008011b4 <setHeader>:

void setHeader(struct Packet* this, int isHead, int isEnd, enum msgType type) {
  8011b4:	defff904 	addi	sp,sp,-28
  8011b8:	dfc00615 	stw	ra,24(sp)
  8011bc:	df000515 	stw	fp,20(sp)
  8011c0:	df000504 	addi	fp,sp,20
  8011c4:	e13ffb15 	stw	r4,-20(fp)
  8011c8:	e17ffc15 	stw	r5,-16(fp)
  8011cc:	e1bffd15 	stw	r6,-12(fp)
  8011d0:	e1fffe15 	stw	r7,-8(fp)
	if(this == NULL) return;
  8011d4:	e0bffb17 	ldw	r2,-20(fp)
  8011d8:	1005003a 	cmpeq	r2,r2,zero
  8011dc:	1000481e 	bne	r2,zero,801300 <setHeader+0x14c>
	if((this->isHead = isHead) == 1) {
  8011e0:	e0fffb17 	ldw	r3,-20(fp)
  8011e4:	e0bffc17 	ldw	r2,-16(fp)
  8011e8:	18800315 	stw	r2,12(r3)
  8011ec:	e0bffb17 	ldw	r2,-20(fp)
  8011f0:	10800317 	ldw	r2,12(r2)
  8011f4:	10800058 	cmpnei	r2,r2,1
  8011f8:	1000041e 	bne	r2,zero,80120c <setHeader+0x58>
		setBit(&this->data[0], 6);
  8011fc:	e0bffb17 	ldw	r2,-20(fp)
  801200:	11000017 	ldw	r4,0(r2)
  801204:	01400184 	movi	r5,6
  801208:	08015040 	call	801504 <setBit>
	}
	if((this->isEnd = isEnd) == 1) {
  80120c:	e0fffb17 	ldw	r3,-20(fp)
  801210:	e0bffd17 	ldw	r2,-12(fp)
  801214:	18800415 	stw	r2,16(r3)
  801218:	e0bffb17 	ldw	r2,-20(fp)
  80121c:	10800417 	ldw	r2,16(r2)
  801220:	10800058 	cmpnei	r2,r2,1
  801224:	1000041e 	bne	r2,zero,801238 <setHeader+0x84>
		setBit(&this->data[0], 5);
  801228:	e0bffb17 	ldw	r2,-20(fp)
  80122c:	11000017 	ldw	r4,0(r2)
  801230:	01400144 	movi	r5,5
  801234:	08015040 	call	801504 <setBit>
	}
	*(this->type) = type;
  801238:	e0bffb17 	ldw	r2,-20(fp)
  80123c:	10c00217 	ldw	r3,8(r2)
  801240:	e0bffe17 	ldw	r2,-8(fp)
  801244:	18800015 	stw	r2,0(r3)
	this->data[0] = this->data[0] & 0xF0;
  801248:	e0bffb17 	ldw	r2,-20(fp)
  80124c:	11000017 	ldw	r4,0(r2)
  801250:	e0bffb17 	ldw	r2,-20(fp)
  801254:	10800017 	ldw	r2,0(r2)
  801258:	10c00003 	ldbu	r3,0(r2)
  80125c:	00bffc04 	movi	r2,-16
  801260:	1884703a 	and	r2,r3,r2
  801264:	20800005 	stb	r2,0(r4)
	switch(type) {
  801268:	e0bffe17 	ldw	r2,-8(fp)
  80126c:	e0bfff15 	stw	r2,-4(fp)
  801270:	e0ffff17 	ldw	r3,-4(fp)
  801274:	18800060 	cmpeqi	r2,r3,1
  801278:	10000a1e 	bne	r2,zero,8012a4 <setHeader+0xf0>
  80127c:	e0ffff17 	ldw	r3,-4(fp)
  801280:	18800070 	cmpltui	r2,r3,1
  801284:	10001e1e 	bne	r2,zero,801300 <setHeader+0x14c>
  801288:	e0ffff17 	ldw	r3,-4(fp)
  80128c:	188000a0 	cmpeqi	r2,r3,2
  801290:	10000c1e 	bne	r2,zero,8012c4 <setHeader+0x110>
  801294:	e0ffff17 	ldw	r3,-4(fp)
  801298:	188000e0 	cmpeqi	r2,r3,3
  80129c:	1000111e 	bne	r2,zero,8012e4 <setHeader+0x130>
  8012a0:	00001706 	br	801300 <setHeader+0x14c>
	case STRING:
		break;
	case CMD:
		this->data[0] = this->data[0] | 0x01;
  8012a4:	e0bffb17 	ldw	r2,-20(fp)
  8012a8:	10c00017 	ldw	r3,0(r2)
  8012ac:	e0bffb17 	ldw	r2,-20(fp)
  8012b0:	10800017 	ldw	r2,0(r2)
  8012b4:	10800003 	ldbu	r2,0(r2)
  8012b8:	10800054 	ori	r2,r2,1
  8012bc:	18800005 	stb	r2,0(r3)
		break;
  8012c0:	00000f06 	br	801300 <setHeader+0x14c>
	case PLAYLIST:
		this->data[0] = this->data[0] | 0x02;
  8012c4:	e0bffb17 	ldw	r2,-20(fp)
  8012c8:	10c00017 	ldw	r3,0(r2)
  8012cc:	e0bffb17 	ldw	r2,-20(fp)
  8012d0:	10800017 	ldw	r2,0(r2)
  8012d4:	10800003 	ldbu	r2,0(r2)
  8012d8:	10800094 	ori	r2,r2,2
  8012dc:	18800005 	stb	r2,0(r3)
		break;
  8012e0:	00000706 	br	801300 <setHeader+0x14c>
	case AUDIO:
		this->data[0] = this->data[0] | 0x03;
  8012e4:	e0bffb17 	ldw	r2,-20(fp)
  8012e8:	10c00017 	ldw	r3,0(r2)
  8012ec:	e0bffb17 	ldw	r2,-20(fp)
  8012f0:	10800017 	ldw	r2,0(r2)
  8012f4:	10800003 	ldbu	r2,0(r2)
  8012f8:	108000d4 	ori	r2,r2,3
  8012fc:	18800005 	stb	r2,0(r3)
		break;
	default:
		break;
	}
}
  801300:	e037883a 	mov	sp,fp
  801304:	dfc00117 	ldw	ra,4(sp)
  801308:	df000017 	ldw	fp,0(sp)
  80130c:	dec00204 	addi	sp,sp,8
  801310:	f800283a 	ret

00801314 <readPacketHeader>:

/*
 * Read the header of receivng packets and return new Packet with header information
 */
struct Packet* readPacketHeader(unsigned char byte1, unsigned char byte2) {
  801314:	defffa04 	addi	sp,sp,-24
  801318:	dfc00515 	stw	ra,20(sp)
  80131c:	df000415 	stw	fp,16(sp)
  801320:	df000404 	addi	fp,sp,16
  801324:	e13ffd05 	stb	r4,-12(fp)
  801328:	e17ffe05 	stb	r5,-8(fp)
	struct Packet* result = (struct Packet*)malloc(sizeof(struct Packet));
  80132c:	01000504 	movi	r4,20
  801330:	08026900 	call	802690 <malloc>
  801334:	e0bffc15 	stw	r2,-16(fp)
	if(result == NULL) {
  801338:	e0bffc17 	ldw	r2,-16(fp)
  80133c:	1004c03a 	cmpne	r2,r2,zero
  801340:	1000031e 	bne	r2,zero,801350 <readPacketHeader+0x3c>
		printf("packet is null at malloc with header\n");
  801344:	01002074 	movhi	r4,129
  801348:	213f7a04 	addi	r4,r4,-536
  80134c:	0802f9c0 	call	802f9c <puts>
	}
	com.client_ack = getBit(byte1, 7);
  801350:	e13ffd03 	ldbu	r4,-12(fp)
  801354:	014001c4 	movi	r5,7
  801358:	08014cc0 	call	8014cc <getBit>
  80135c:	1007883a 	mov	r3,r2
  801360:	00802074 	movhi	r2,129
  801364:	108f3b04 	addi	r2,r2,15596
  801368:	10c01315 	stw	r3,76(r2)
	result->data_size = (int)byte2 - HEADERSIZE;
  80136c:	e0bffe03 	ldbu	r2,-8(fp)
  801370:	10ffff84 	addi	r3,r2,-2
  801374:	e0bffc17 	ldw	r2,-16(fp)
  801378:	10c00115 	stw	r3,4(r2)
	result->data = (unsigned char*)malloc(sizeof(unsigned char)*((int)byte2+HEADERSIZE));
  80137c:	e0bffe03 	ldbu	r2,-8(fp)
  801380:	10800084 	addi	r2,r2,2
  801384:	1009883a 	mov	r4,r2
  801388:	08026900 	call	802690 <malloc>
  80138c:	1007883a 	mov	r3,r2
  801390:	e0bffc17 	ldw	r2,-16(fp)
  801394:	10c00015 	stw	r3,0(r2)
	if(result->data == NULL) {
  801398:	e0bffc17 	ldw	r2,-16(fp)
  80139c:	10800017 	ldw	r2,0(r2)
  8013a0:	1004c03a 	cmpne	r2,r2,zero
  8013a4:	1000031e 	bne	r2,zero,8013b4 <readPacketHeader+0xa0>
		printf("data inside packet is null when malloc with header\n");
  8013a8:	01002074 	movhi	r4,129
  8013ac:	213f8404 	addi	r4,r4,-496
  8013b0:	0802f9c0 	call	802f9c <puts>
	}
	result->data[0] = byte1;
  8013b4:	e0bffc17 	ldw	r2,-16(fp)
  8013b8:	10c00017 	ldw	r3,0(r2)
  8013bc:	e0bffd03 	ldbu	r2,-12(fp)
  8013c0:	18800005 	stb	r2,0(r3)
	result->data[1] = byte2;
  8013c4:	e0bffc17 	ldw	r2,-16(fp)
  8013c8:	10800017 	ldw	r2,0(r2)
  8013cc:	10c00044 	addi	r3,r2,1
  8013d0:	e0bffe03 	ldbu	r2,-8(fp)
  8013d4:	18800005 	stb	r2,0(r3)
	result->isHead = getBit(byte1, 6);
  8013d8:	e13ffd03 	ldbu	r4,-12(fp)
  8013dc:	01400184 	movi	r5,6
  8013e0:	08014cc0 	call	8014cc <getBit>
  8013e4:	1007883a 	mov	r3,r2
  8013e8:	e0bffc17 	ldw	r2,-16(fp)
  8013ec:	10c00315 	stw	r3,12(r2)
	result->isEnd = getBit(byte1, 5);
  8013f0:	e13ffd03 	ldbu	r4,-12(fp)
  8013f4:	01400144 	movi	r5,5
  8013f8:	08014cc0 	call	8014cc <getBit>
  8013fc:	1007883a 	mov	r3,r2
  801400:	e0bffc17 	ldw	r2,-16(fp)
  801404:	10c00415 	stw	r3,16(r2)
	result->type = (enum msgType*)malloc(sizeof(enum msgType));
  801408:	01000104 	movi	r4,4
  80140c:	08026900 	call	802690 <malloc>
  801410:	1007883a 	mov	r3,r2
  801414:	e0bffc17 	ldw	r2,-16(fp)
  801418:	10c00215 	stw	r3,8(r2)
	switch((int)(byte1 & 0x0F)) {
  80141c:	e0bffd03 	ldbu	r2,-12(fp)
  801420:	108003cc 	andi	r2,r2,15
  801424:	e0bfff15 	stw	r2,-4(fp)
  801428:	e0ffff17 	ldw	r3,-4(fp)
  80142c:	18800060 	cmpeqi	r2,r3,1
  801430:	1000121e 	bne	r2,zero,80147c <readPacketHeader+0x168>
  801434:	e0ffff17 	ldw	r3,-4(fp)
  801438:	18800088 	cmpgei	r2,r3,2
  80143c:	1000041e 	bne	r2,zero,801450 <readPacketHeader+0x13c>
  801440:	e0ffff17 	ldw	r3,-4(fp)
  801444:	1805003a 	cmpeq	r2,r3,zero
  801448:	1000081e 	bne	r2,zero,80146c <readPacketHeader+0x158>
  80144c:	00001906 	br	8014b4 <readPacketHeader+0x1a0>
  801450:	e0ffff17 	ldw	r3,-4(fp)
  801454:	188000a0 	cmpeqi	r2,r3,2
  801458:	10000d1e 	bne	r2,zero,801490 <readPacketHeader+0x17c>
  80145c:	e0ffff17 	ldw	r3,-4(fp)
  801460:	188000e0 	cmpeqi	r2,r3,3
  801464:	10000f1e 	bne	r2,zero,8014a4 <readPacketHeader+0x190>
  801468:	00001206 	br	8014b4 <readPacketHeader+0x1a0>
	case 0:
		*result->type = STRING;
  80146c:	e0bffc17 	ldw	r2,-16(fp)
  801470:	10800217 	ldw	r2,8(r2)
  801474:	10000015 	stw	zero,0(r2)
		break;
  801478:	00000e06 	br	8014b4 <readPacketHeader+0x1a0>
	case 1:
		*result->type = CMD;
  80147c:	e0bffc17 	ldw	r2,-16(fp)
  801480:	10c00217 	ldw	r3,8(r2)
  801484:	00800044 	movi	r2,1
  801488:	18800015 	stw	r2,0(r3)
		break;
  80148c:	00000906 	br	8014b4 <readPacketHeader+0x1a0>
	case 2:
		*result->type = PLAYLIST;
  801490:	e0bffc17 	ldw	r2,-16(fp)
  801494:	10c00217 	ldw	r3,8(r2)
  801498:	00800084 	movi	r2,2
  80149c:	18800015 	stw	r2,0(r3)
		break;
  8014a0:	00000406 	br	8014b4 <readPacketHeader+0x1a0>
	case 3:
		*result->type = AUDIO;
  8014a4:	e0bffc17 	ldw	r2,-16(fp)
  8014a8:	10c00217 	ldw	r3,8(r2)
  8014ac:	008000c4 	movi	r2,3
  8014b0:	18800015 	stw	r2,0(r3)
		break;
	default:
		break;
	}
	return result;
  8014b4:	e0bffc17 	ldw	r2,-16(fp)
}
  8014b8:	e037883a 	mov	sp,fp
  8014bc:	dfc00117 	ldw	ra,4(sp)
  8014c0:	df000017 	ldw	fp,0(sp)
  8014c4:	dec00204 	addi	sp,sp,8
  8014c8:	f800283a 	ret

008014cc <getBit>:

int getBit(unsigned char byte, int pos) {
  8014cc:	defffd04 	addi	sp,sp,-12
  8014d0:	df000215 	stw	fp,8(sp)
  8014d4:	df000204 	addi	fp,sp,8
  8014d8:	e17fff15 	stw	r5,-4(fp)
  8014dc:	e13ffe05 	stb	r4,-8(fp)
	return ((byte & (1 << pos)) == 0) ? 0 : 1;
  8014e0:	e0fffe03 	ldbu	r3,-8(fp)
  8014e4:	e0bfff17 	ldw	r2,-4(fp)
  8014e8:	1885d83a 	sra	r2,r3,r2
  8014ec:	1080004c 	andi	r2,r2,1
  8014f0:	1004c03a 	cmpne	r2,r2,zero
}
  8014f4:	e037883a 	mov	sp,fp
  8014f8:	df000017 	ldw	fp,0(sp)
  8014fc:	dec00104 	addi	sp,sp,4
  801500:	f800283a 	ret

00801504 <setBit>:
void setBit(unsigned char* byte, int pos) {
  801504:	defffd04 	addi	sp,sp,-12
  801508:	df000215 	stw	fp,8(sp)
  80150c:	df000204 	addi	fp,sp,8
  801510:	e13ffe15 	stw	r4,-8(fp)
  801514:	e17fff15 	stw	r5,-4(fp)
	*byte = (*byte | (1 << pos));
  801518:	e0bffe17 	ldw	r2,-8(fp)
  80151c:	10800003 	ldbu	r2,0(r2)
  801520:	1009883a 	mov	r4,r2
  801524:	00c00044 	movi	r3,1
  801528:	e0bfff17 	ldw	r2,-4(fp)
  80152c:	1884983a 	sll	r2,r3,r2
  801530:	2084b03a 	or	r2,r4,r2
  801534:	1007883a 	mov	r3,r2
  801538:	e0bffe17 	ldw	r2,-8(fp)
  80153c:	10c00005 	stb	r3,0(r2)
}
  801540:	e037883a 	mov	sp,fp
  801544:	df000017 	ldw	fp,0(sp)
  801548:	dec00104 	addi	sp,sp,4
  80154c:	f800283a 	ret

00801550 <setAck>:

void setAck(struct Packet* this, int ack) {
  801550:	defffc04 	addi	sp,sp,-16
  801554:	dfc00315 	stw	ra,12(sp)
  801558:	df000215 	stw	fp,8(sp)
  80155c:	df000204 	addi	fp,sp,8
  801560:	e13ffe15 	stw	r4,-8(fp)
  801564:	e17fff15 	stw	r5,-4(fp)
	if(ack == 1) {
  801568:	e0bfff17 	ldw	r2,-4(fp)
  80156c:	10800058 	cmpnei	r2,r2,1
  801570:	1000041e 	bne	r2,zero,801584 <setAck+0x34>
		setBit(&this->data[0], 7);
  801574:	e0bffe17 	ldw	r2,-8(fp)
  801578:	11000017 	ldw	r4,0(r2)
  80157c:	014001c4 	movi	r5,7
  801580:	08015040 	call	801504 <setBit>
	}
}
  801584:	e037883a 	mov	sp,fp
  801588:	dfc00117 	ldw	ra,4(sp)
  80158c:	df000017 	ldw	fp,0(sp)
  801590:	dec00204 	addi	sp,sp,8
  801594:	f800283a 	ret

00801598 <strnsep_>:
/*
 * return a sub string from position 0 to pos and leave old string from pos to end
 * @parm pos index of string to cut
 */
char* strnsep_(char** str, int pos) {
  801598:	defff504 	addi	sp,sp,-44
  80159c:	dfc00a15 	stw	ra,40(sp)
  8015a0:	df000915 	stw	fp,36(sp)
  8015a4:	df000904 	addi	fp,sp,36
  8015a8:	e13ffb15 	stw	r4,-20(fp)
  8015ac:	e17ffc15 	stw	r5,-16(fp)
  8015b0:	e6ffff15 	stw	sp,-4(fp)
  8015b4:	d805883a 	mov	r2,sp
  8015b8:	e0bffd15 	stw	r2,-12(fp)
	char* result = (char*)malloc(sizeof(char)*pos);
  8015bc:	e13ffc17 	ldw	r4,-16(fp)
  8015c0:	08026900 	call	802690 <malloc>
  8015c4:	e0bff915 	stw	r2,-28(fp)
	int i;
	int len = strlen(*str);
  8015c8:	e0bffb17 	ldw	r2,-20(fp)
  8015cc:	11000017 	ldw	r4,0(r2)
  8015d0:	08036300 	call	803630 <strlen>
  8015d4:	e0bff715 	stw	r2,-36(fp)
	char temp[len-pos];
  8015d8:	e0fff717 	ldw	r3,-36(fp)
  8015dc:	e0bffc17 	ldw	r2,-16(fp)
  8015e0:	1885c83a 	sub	r2,r3,r2
  8015e4:	108000c4 	addi	r2,r2,3
  8015e8:	108000c4 	addi	r2,r2,3
  8015ec:	1004d0ba 	srli	r2,r2,2
  8015f0:	1085883a 	add	r2,r2,r2
  8015f4:	1085883a 	add	r2,r2,r2
  8015f8:	d8b7c83a 	sub	sp,sp,r2
  8015fc:	e6fffe15 	stw	sp,-8(fp)
  801600:	e0fffe17 	ldw	r3,-8(fp)
  801604:	188000c4 	addi	r2,r3,3
  801608:	1004d0ba 	srli	r2,r2,2
  80160c:	1085883a 	add	r2,r2,r2
  801610:	1085883a 	add	r2,r2,r2
  801614:	e0bffe15 	stw	r2,-8(fp)
  801618:	e0bffe17 	ldw	r2,-8(fp)
  80161c:	e0bffa15 	stw	r2,-24(fp)
	for(i = 0; i < len; i++) {
  801620:	e03ff815 	stw	zero,-32(fp)
  801624:	00001c06 	br	801698 <strnsep_+0x100>
		if(i < pos)
  801628:	e0fff817 	ldw	r3,-32(fp)
  80162c:	e0bffc17 	ldw	r2,-16(fp)
  801630:	18800b0e 	bge	r3,r2,801660 <strnsep_+0xc8>
			result[i] = (*str)[i];
  801634:	e0bff817 	ldw	r2,-32(fp)
  801638:	1007883a 	mov	r3,r2
  80163c:	e0bff917 	ldw	r2,-28(fp)
  801640:	1889883a 	add	r4,r3,r2
  801644:	e0bffb17 	ldw	r2,-20(fp)
  801648:	10c00017 	ldw	r3,0(r2)
  80164c:	e0bff817 	ldw	r2,-32(fp)
  801650:	1885883a 	add	r2,r3,r2
  801654:	10800003 	ldbu	r2,0(r2)
  801658:	20800005 	stb	r2,0(r4)
  80165c:	00000b06 	br	80168c <strnsep_+0xf4>
		else
			temp[i-pos] = (*str)[i];
  801660:	e0fff817 	ldw	r3,-32(fp)
  801664:	e0bffc17 	ldw	r2,-16(fp)
  801668:	1889c83a 	sub	r4,r3,r2
  80166c:	e0bffb17 	ldw	r2,-20(fp)
  801670:	10c00017 	ldw	r3,0(r2)
  801674:	e0bff817 	ldw	r2,-32(fp)
  801678:	1885883a 	add	r2,r3,r2
  80167c:	10c00003 	ldbu	r3,0(r2)
  801680:	e0bffa17 	ldw	r2,-24(fp)
  801684:	1105883a 	add	r2,r2,r4
  801688:	10c00005 	stb	r3,0(r2)
char* strnsep_(char** str, int pos) {
	char* result = (char*)malloc(sizeof(char)*pos);
	int i;
	int len = strlen(*str);
	char temp[len-pos];
	for(i = 0; i < len; i++) {
  80168c:	e0bff817 	ldw	r2,-32(fp)
  801690:	10800044 	addi	r2,r2,1
  801694:	e0bff815 	stw	r2,-32(fp)
  801698:	e0fff817 	ldw	r3,-32(fp)
  80169c:	e0bff717 	ldw	r2,-36(fp)
  8016a0:	18bfe116 	blt	r3,r2,801628 <strnsep_+0x90>
		if(i < pos)
			result[i] = (*str)[i];
		else
			temp[i-pos] = (*str)[i];
	}
	*str = (char*)realloc(*str, len-pos);
  8016a4:	e0bffb17 	ldw	r2,-20(fp)
  8016a8:	11000017 	ldw	r4,0(r2)
  8016ac:	e0fff717 	ldw	r3,-36(fp)
  8016b0:	e0bffc17 	ldw	r2,-16(fp)
  8016b4:	1885c83a 	sub	r2,r3,r2
  8016b8:	100b883a 	mov	r5,r2
  8016bc:	0802fb00 	call	802fb0 <realloc>
  8016c0:	1007883a 	mov	r3,r2
  8016c4:	e0bffb17 	ldw	r2,-20(fp)
  8016c8:	10c00015 	stw	r3,0(r2)
	strncpy(*str, temp, len-pos);
  8016cc:	e0bffb17 	ldw	r2,-20(fp)
  8016d0:	11000017 	ldw	r4,0(r2)
  8016d4:	e17ffa17 	ldw	r5,-24(fp)
  8016d8:	e0fff717 	ldw	r3,-36(fp)
  8016dc:	e0bffc17 	ldw	r2,-16(fp)
  8016e0:	1885c83a 	sub	r2,r3,r2
  8016e4:	100d883a 	mov	r6,r2
  8016e8:	08036a40 	call	8036a4 <strncpy>
	return result;
  8016ec:	e0bff917 	ldw	r2,-28(fp)
  8016f0:	e6fffd17 	ldw	sp,-12(fp)
}
  8016f4:	e6ffff17 	ldw	sp,-4(fp)
  8016f8:	e037883a 	mov	sp,fp
  8016fc:	dfc00117 	ldw	ra,4(sp)
  801700:	df000017 	ldw	fp,0(sp)
  801704:	dec00204 	addi	sp,sp,8
  801708:	f800283a 	ret

0080170c <initQueue>:
 */

#include "Queue.h"
int queue_lock = 0;

struct Queue* initQueue() {
  80170c:	defffd04 	addi	sp,sp,-12
  801710:	dfc00215 	stw	ra,8(sp)
  801714:	df000115 	stw	fp,4(sp)
  801718:	df000104 	addi	fp,sp,4
	struct Queue* this = (struct Queue*)malloc(sizeof(struct Queue));
  80171c:	01000304 	movi	r4,12
  801720:	08026900 	call	802690 <malloc>
  801724:	e0bfff15 	stw	r2,-4(fp)
	this->size = 0;
  801728:	e0bfff17 	ldw	r2,-4(fp)
  80172c:	10000015 	stw	zero,0(r2)
	this->tail = NULL;
  801730:	e0bfff17 	ldw	r2,-4(fp)
  801734:	10000215 	stw	zero,8(r2)
	this->head = NULL;
  801738:	e0bfff17 	ldw	r2,-4(fp)
  80173c:	10000115 	stw	zero,4(r2)
	return this;
  801740:	e0bfff17 	ldw	r2,-4(fp)
}
  801744:	e037883a 	mov	sp,fp
  801748:	dfc00117 	ldw	ra,4(sp)
  80174c:	df000017 	ldw	fp,0(sp)
  801750:	dec00204 	addi	sp,sp,8
  801754:	f800283a 	ret

00801758 <enqueue>:

void enqueue(struct Queue* this, void* obj) {
  801758:	defffb04 	addi	sp,sp,-20
  80175c:	dfc00415 	stw	ra,16(sp)
  801760:	df000315 	stw	fp,12(sp)
  801764:	dc000215 	stw	r16,8(sp)
  801768:	df000204 	addi	fp,sp,8
  80176c:	e13ffe15 	stw	r4,-8(fp)
  801770:	e17fff15 	stw	r5,-4(fp)
	if(this == NULL || obj == NULL || obj == this->tail->obj) {
  801774:	e0bffe17 	ldw	r2,-8(fp)
  801778:	1005003a 	cmpeq	r2,r2,zero
  80177c:	1000081e 	bne	r2,zero,8017a0 <enqueue+0x48>
  801780:	e0bfff17 	ldw	r2,-4(fp)
  801784:	1005003a 	cmpeq	r2,r2,zero
  801788:	1000051e 	bne	r2,zero,8017a0 <enqueue+0x48>
  80178c:	e0bffe17 	ldw	r2,-8(fp)
  801790:	10800217 	ldw	r2,8(r2)
  801794:	10c00217 	ldw	r3,8(r2)
  801798:	e0bfff17 	ldw	r2,-4(fp)
  80179c:	1880041e 	bne	r3,r2,8017b0 <enqueue+0x58>
		printf("ENQUEUE fail\n");
  8017a0:	01002074 	movhi	r4,129
  8017a4:	213f9104 	addi	r4,r4,-444
  8017a8:	0802f9c0 	call	802f9c <puts>
		return;
  8017ac:	00003706 	br	80188c <enqueue+0x134>
	}
	queue_lock = 1;
  8017b0:	00800044 	movi	r2,1
  8017b4:	d0a71515 	stw	r2,-25516(gp)
	if(this->size == 0) {
  8017b8:	e0bffe17 	ldw	r2,-8(fp)
  8017bc:	10800017 	ldw	r2,0(r2)
  8017c0:	1004c03a 	cmpne	r2,r2,zero
  8017c4:	1000141e 	bne	r2,zero,801818 <enqueue+0xc0>
		this->head = (struct QueueData*)malloc(sizeof(struct QueueData));
  8017c8:	01000304 	movi	r4,12
  8017cc:	08026900 	call	802690 <malloc>
  8017d0:	1007883a 	mov	r3,r2
  8017d4:	e0bffe17 	ldw	r2,-8(fp)
  8017d8:	10c00115 	stw	r3,4(r2)
		this->head->next = NULL;
  8017dc:	e0bffe17 	ldw	r2,-8(fp)
  8017e0:	10800117 	ldw	r2,4(r2)
  8017e4:	10000015 	stw	zero,0(r2)
		this->head->prev = NULL;
  8017e8:	e0bffe17 	ldw	r2,-8(fp)
  8017ec:	10800117 	ldw	r2,4(r2)
  8017f0:	10000115 	stw	zero,4(r2)
		this->head->obj = obj;
  8017f4:	e0bffe17 	ldw	r2,-8(fp)
  8017f8:	10c00117 	ldw	r3,4(r2)
  8017fc:	e0bfff17 	ldw	r2,-4(fp)
  801800:	18800215 	stw	r2,8(r3)
		this->tail = this->head;
  801804:	e0bffe17 	ldw	r2,-8(fp)
  801808:	10c00117 	ldw	r3,4(r2)
  80180c:	e0bffe17 	ldw	r2,-8(fp)
  801810:	10c00215 	stw	r3,8(r2)
  801814:	00001706 	br	801874 <enqueue+0x11c>
	} else {
		this->tail->next = (struct QueueData*)malloc(sizeof(struct QueueData));
  801818:	e0bffe17 	ldw	r2,-8(fp)
  80181c:	14000217 	ldw	r16,8(r2)
  801820:	01000304 	movi	r4,12
  801824:	08026900 	call	802690 <malloc>
  801828:	80800015 	stw	r2,0(r16)
		this->tail->next->prev = this->tail;
  80182c:	e0bffe17 	ldw	r2,-8(fp)
  801830:	10800217 	ldw	r2,8(r2)
  801834:	10c00017 	ldw	r3,0(r2)
  801838:	e0bffe17 	ldw	r2,-8(fp)
  80183c:	10800217 	ldw	r2,8(r2)
  801840:	18800115 	stw	r2,4(r3)
		this->tail = this->tail->next;
  801844:	e0bffe17 	ldw	r2,-8(fp)
  801848:	10800217 	ldw	r2,8(r2)
  80184c:	10c00017 	ldw	r3,0(r2)
  801850:	e0bffe17 	ldw	r2,-8(fp)
  801854:	10c00215 	stw	r3,8(r2)
		this->tail->obj = obj;
  801858:	e0bffe17 	ldw	r2,-8(fp)
  80185c:	10c00217 	ldw	r3,8(r2)
  801860:	e0bfff17 	ldw	r2,-4(fp)
  801864:	18800215 	stw	r2,8(r3)
		this->tail->next = NULL;
  801868:	e0bffe17 	ldw	r2,-8(fp)
  80186c:	10800217 	ldw	r2,8(r2)
  801870:	10000015 	stw	zero,0(r2)
	}
	this->size++;
  801874:	e0bffe17 	ldw	r2,-8(fp)
  801878:	10800017 	ldw	r2,0(r2)
  80187c:	10c00044 	addi	r3,r2,1
  801880:	e0bffe17 	ldw	r2,-8(fp)
  801884:	10c00015 	stw	r3,0(r2)
	queue_lock = 0;
  801888:	d0271515 	stw	zero,-25516(gp)
}
  80188c:	e037883a 	mov	sp,fp
  801890:	dfc00217 	ldw	ra,8(sp)
  801894:	df000117 	ldw	fp,4(sp)
  801898:	dc000017 	ldw	r16,0(sp)
  80189c:	dec00304 	addi	sp,sp,12
  8018a0:	f800283a 	ret

008018a4 <dequeue>:

void* dequeue(struct Queue* this) {
  8018a4:	defffa04 	addi	sp,sp,-24
  8018a8:	dfc00515 	stw	ra,20(sp)
  8018ac:	df000415 	stw	fp,16(sp)
  8018b0:	df000404 	addi	fp,sp,16
  8018b4:	e13ffe15 	stw	r4,-8(fp)
	if(this == NULL || this->size <= 0) {
  8018b8:	e0bffe17 	ldw	r2,-8(fp)
  8018bc:	1005003a 	cmpeq	r2,r2,zero
  8018c0:	1000041e 	bne	r2,zero,8018d4 <dequeue+0x30>
  8018c4:	e0bffe17 	ldw	r2,-8(fp)
  8018c8:	10800017 	ldw	r2,0(r2)
  8018cc:	10800048 	cmpgei	r2,r2,1
  8018d0:	1000051e 	bne	r2,zero,8018e8 <dequeue+0x44>
		printf("dequeue returns null\n");
  8018d4:	01002074 	movhi	r4,129
  8018d8:	213f9504 	addi	r4,r4,-428
  8018dc:	0802f9c0 	call	802f9c <puts>
		return NULL;
  8018e0:	e03fff15 	stw	zero,-4(fp)
  8018e4:	00002a06 	br	801990 <dequeue+0xec>
	}
	queue_lock = 1;
  8018e8:	00800044 	movi	r2,1
  8018ec:	d0a71515 	stw	r2,-25516(gp)
	if(this->size == 1)
  8018f0:	e0bffe17 	ldw	r2,-8(fp)
  8018f4:	10800017 	ldw	r2,0(r2)
  8018f8:	10800058 	cmpnei	r2,r2,1
  8018fc:	1000021e 	bne	r2,zero,801908 <dequeue+0x64>
		this->tail = NULL;
  801900:	e0bffe17 	ldw	r2,-8(fp)
  801904:	10000215 	stw	zero,8(r2)
	struct QueueData* temp = this->head;
  801908:	e0bffe17 	ldw	r2,-8(fp)
  80190c:	10800117 	ldw	r2,4(r2)
  801910:	e0bffd15 	stw	r2,-12(fp)
	void* result = this->head->obj;
  801914:	e0bffe17 	ldw	r2,-8(fp)
  801918:	10800117 	ldw	r2,4(r2)
  80191c:	10800217 	ldw	r2,8(r2)
  801920:	e0bffc15 	stw	r2,-16(fp)
	this->head = this->head->next;
  801924:	e0bffe17 	ldw	r2,-8(fp)
  801928:	10800117 	ldw	r2,4(r2)
  80192c:	10c00017 	ldw	r3,0(r2)
  801930:	e0bffe17 	ldw	r2,-8(fp)
  801934:	10c00115 	stw	r3,4(r2)
	temp->obj = NULL;
  801938:	e0bffd17 	ldw	r2,-12(fp)
  80193c:	10000215 	stw	zero,8(r2)
	if(this->head != NULL)
  801940:	e0bffe17 	ldw	r2,-8(fp)
  801944:	10800117 	ldw	r2,4(r2)
  801948:	1005003a 	cmpeq	r2,r2,zero
  80194c:	1000031e 	bne	r2,zero,80195c <dequeue+0xb8>
		this->head->prev = NULL;
  801950:	e0bffe17 	ldw	r2,-8(fp)
  801954:	10800117 	ldw	r2,4(r2)
  801958:	10000115 	stw	zero,4(r2)
	temp->next = NULL;
  80195c:	e0bffd17 	ldw	r2,-12(fp)
  801960:	10000015 	stw	zero,0(r2)
	free(temp);
  801964:	e13ffd17 	ldw	r4,-12(fp)
  801968:	080267c0 	call	80267c <free>
	temp = NULL;
  80196c:	e03ffd15 	stw	zero,-12(fp)
	this->size--;
  801970:	e0bffe17 	ldw	r2,-8(fp)
  801974:	10800017 	ldw	r2,0(r2)
  801978:	10ffffc4 	addi	r3,r2,-1
  80197c:	e0bffe17 	ldw	r2,-8(fp)
  801980:	10c00015 	stw	r3,0(r2)
	queue_lock = 0;
  801984:	d0271515 	stw	zero,-25516(gp)
	return result;
  801988:	e0bffc17 	ldw	r2,-16(fp)
  80198c:	e0bfff15 	stw	r2,-4(fp)
  801990:	e0bfff17 	ldw	r2,-4(fp)
}
  801994:	e037883a 	mov	sp,fp
  801998:	dfc00117 	ldw	ra,4(sp)
  80199c:	df000017 	ldw	fp,0(sp)
  8019a0:	dec00204 	addi	sp,sp,8
  8019a4:	f800283a 	ret

008019a8 <killQueueData>:

void killQueueData(struct QueueData** this) {
  8019a8:	defffd04 	addi	sp,sp,-12
  8019ac:	dfc00215 	stw	ra,8(sp)
  8019b0:	df000115 	stw	fp,4(sp)
  8019b4:	df000104 	addi	fp,sp,4
  8019b8:	e13fff15 	stw	r4,-4(fp)
	if(this == NULL) return;
  8019bc:	e0bfff17 	ldw	r2,-4(fp)
  8019c0:	1005003a 	cmpeq	r2,r2,zero
  8019c4:	10000e1e 	bne	r2,zero,801a00 <killQueueData+0x58>
	(*this)->next =NULL;
  8019c8:	e0bfff17 	ldw	r2,-4(fp)
  8019cc:	10800017 	ldw	r2,0(r2)
  8019d0:	10000015 	stw	zero,0(r2)
	(*this)->prev = NULL;
  8019d4:	e0bfff17 	ldw	r2,-4(fp)
  8019d8:	10800017 	ldw	r2,0(r2)
  8019dc:	10000115 	stw	zero,4(r2)
	(*this)->obj = NULL;
  8019e0:	e0bfff17 	ldw	r2,-4(fp)
  8019e4:	10800017 	ldw	r2,0(r2)
  8019e8:	10000215 	stw	zero,8(r2)
	free(*this);
  8019ec:	e0bfff17 	ldw	r2,-4(fp)
  8019f0:	11000017 	ldw	r4,0(r2)
  8019f4:	080267c0 	call	80267c <free>
	*this = NULL;
  8019f8:	e0bfff17 	ldw	r2,-4(fp)
  8019fc:	10000015 	stw	zero,0(r2)
}
  801a00:	e037883a 	mov	sp,fp
  801a04:	dfc00117 	ldw	ra,4(sp)
  801a08:	df000017 	ldw	fp,0(sp)
  801a0c:	dec00204 	addi	sp,sp,8
  801a10:	f800283a 	ret

00801a14 <initRS232>:
struct alt_up_dev up_dev;

/*
 * Initialization of Serail communication
 */
struct RS232 initRS232() {
  801a14:	deffe104 	addi	sp,sp,-124
  801a18:	dfc01e15 	stw	ra,120(sp)
  801a1c:	df001d15 	stw	fp,116(sp)
  801a20:	df001d04 	addi	fp,sp,116
  801a24:	e13fff15 	stw	r4,-4(fp)
	struct RS232 com_local;
	com_local.receivePackets = initQueue();
  801a28:	080170c0 	call	80170c <initQueue>
  801a2c:	e0bff215 	stw	r2,-56(fp)
	com_local.sendPackets = initQueue();
  801a30:	080170c0 	call	80170c <initQueue>
  801a34:	e0bff115 	stw	r2,-60(fp)
	com_local.pendingPacketSize = initQueue();
  801a38:	080170c0 	call	80170c <initQueue>
  801a3c:	e0bff315 	stw	r2,-52(fp)
	com_local.client_ack = 0;
  801a40:	e03ff715 	stw	zero,-36(fp)
	com_local.host_ack = 0;
  801a44:	e03ff815 	stw	zero,-32(fp)
	com_local.isRdySend = 0;
  801a48:	e03ff915 	stw	zero,-28(fp)
	com_local.failReceive = 0;
  801a4c:	e03ffa15 	stw	zero,-24(fp)
	com_local.stateMachine = (enum States*)malloc(sizeof(enum States));
  801a50:	01000104 	movi	r4,4
  801a54:	08026900 	call	802690 <malloc>
  801a58:	e0bff515 	stw	r2,-44(fp)
	com_local.pastState = (enum States*)malloc(sizeof(enum States));
  801a5c:	01000104 	movi	r4,4
  801a60:	08026900 	call	802690 <malloc>
  801a64:	e0bff615 	stw	r2,-40(fp)
	*com_local.stateMachine = startInit;
  801a68:	e0fff517 	ldw	r3,-44(fp)
  801a6c:	00800244 	movi	r2,9
  801a70:	18800015 	stw	r2,0(r3)
	*com_local.pastState = startInit;
  801a74:	e0fff617 	ldw	r3,-40(fp)
  801a78:	00800244 	movi	r2,9
  801a7c:	18800015 	stw	r2,0(r3)
	com_local.num_packets = com_local.index_packets = 0;
  801a80:	e03ffc15 	stw	zero,-16(fp)
  801a84:	e0bffc17 	ldw	r2,-16(fp)
  801a88:	e0bffb15 	stw	r2,-20(fp)
	com_local.num_send_packets = com_local.index_send_packets = 0;
  801a8c:	e03ffe15 	stw	zero,-8(fp)
  801a90:	e0bffe17 	ldw	r2,-8(fp)
  801a94:	e0bffd15 	stw	r2,-12(fp)
	com_local.packetBuf = NULL;
  801a98:	e03ff415 	stw	zero,-48(fp)

	printf("UART Initialization\n");
  801a9c:	01002074 	movhi	r4,129
  801aa0:	213f9b04 	addi	r4,r4,-404
  801aa4:	0802f9c0 	call	802f9c <puts>
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
  801aa8:	01002074 	movhi	r4,129
  801aac:	213fa004 	addi	r4,r4,-384
  801ab0:	080ea7c0 	call	80ea7c <alt_up_rs232_open_dev>
  801ab4:	e0bfe315 	stw	r2,-116(fp)
	up_dev.RS232_dev = uart;
  801ab8:	e0bfe317 	ldw	r2,-116(fp)
  801abc:	d0a71615 	stw	r2,-25512(gp)

	printf("Clearing read buffer to start\n");
  801ac0:	01002074 	movhi	r4,129
  801ac4:	213fa404 	addi	r4,r4,-368
  801ac8:	0802f9c0 	call	802f9c <puts>
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
  801acc:	00000606 	br	801ae8 <initRS232+0xd4>
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
  801ad0:	e13fe317 	ldw	r4,-116(fp)
  801ad4:	01402074 	movhi	r5,129
  801ad8:	294f3b04 	addi	r5,r5,15596
  801adc:	01802074 	movhi	r6,129
  801ae0:	318f4784 	addi	r6,r6,15646
  801ae4:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
	printf("UART Initialization\n");
	alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
	up_dev.RS232_dev = uart;

	printf("Clearing read buffer to start\n");
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
  801ae8:	e13fe317 	ldw	r4,-116(fp)
  801aec:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  801af0:	1004c03a 	cmpne	r2,r2,zero
  801af4:	103ff61e 	bne	r2,zero,801ad0 <initRS232+0xbc>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  801af8:	00802074 	movhi	r2,129
  801afc:	108f2c04 	addi	r2,r2,15536
  801b00:	10800017 	ldw	r2,0(r2)
  801b04:	100b883a 	mov	r5,r2
		alt_up_rs232_read_data(uart, &com.data[0], &com.parity);
	}
	alt_alarm_start(&alarm, alt_ticks_per_second(), RS232_ISR, (void*)&up_dev);
  801b08:	01002074 	movhi	r4,129
  801b0c:	210f5604 	addi	r4,r4,15704
  801b10:	01802034 	movhi	r6,128
  801b14:	3181ae04 	addi	r6,r6,1720
  801b18:	d1e71604 	addi	r7,gp,-25512
  801b1c:	080bd740 	call	80bd74 <alt_alarm_start>

	printf("UART Initialization finished\n");
  801b20:	01002074 	movhi	r4,129
  801b24:	213fac04 	addi	r4,r4,-336
  801b28:	0802f9c0 	call	802f9c <puts>
	return com_local;
  801b2c:	e13fff17 	ldw	r4,-4(fp)
  801b30:	e17fe404 	addi	r5,fp,-112
  801b34:	01801b04 	movi	r6,108
  801b38:	0802de40 	call	802de4 <memcpy>
}
  801b3c:	e0bfff17 	ldw	r2,-4(fp)
  801b40:	e037883a 	mov	sp,fp
  801b44:	dfc00117 	ldw	ra,4(sp)
  801b48:	df000017 	ldw	fp,0(sp)
  801b4c:	dec00204 	addi	sp,sp,8
  801b50:	f800283a 	ret

00801b54 <send>:
/*
 * Send data to the other end
 * @parm data data to send; must be void*
 * @parm type type of data to send
 */
int send(void* data, enum msgType type) {
  801b54:	defffa04 	addi	sp,sp,-24
  801b58:	dfc00515 	stw	ra,20(sp)
  801b5c:	df000415 	stw	fp,16(sp)
  801b60:	df000404 	addi	fp,sp,16
  801b64:	e13ffc15 	stw	r4,-16(fp)
  801b68:	e17ffd15 	stw	r5,-12(fp)
	if(data == NULL) return -1;
  801b6c:	e0bffc17 	ldw	r2,-16(fp)
  801b70:	1004c03a 	cmpne	r2,r2,zero
  801b74:	1000031e 	bne	r2,zero,801b84 <send+0x30>
  801b78:	00bfffc4 	movi	r2,-1
  801b7c:	e0bffe15 	stw	r2,-8(fp)
  801b80:	00001d06 	br	801bf8 <send+0xa4>
	switch(type) {
  801b84:	e0fffd17 	ldw	r3,-12(fp)
  801b88:	e0ffff15 	stw	r3,-4(fp)
  801b8c:	e0ffff17 	ldw	r3,-4(fp)
  801b90:	18800060 	cmpeqi	r2,r3,1
  801b94:	1000131e 	bne	r2,zero,801be4 <send+0x90>
  801b98:	e0ffff17 	ldw	r3,-4(fp)
  801b9c:	18800070 	cmpltui	r2,r3,1
  801ba0:	1000071e 	bne	r2,zero,801bc0 <send+0x6c>
  801ba4:	e0ffff17 	ldw	r3,-4(fp)
  801ba8:	188000a0 	cmpeqi	r2,r3,2
  801bac:	10000d1e 	bne	r2,zero,801be4 <send+0x90>
  801bb0:	e0ffff17 	ldw	r3,-4(fp)
  801bb4:	188000e0 	cmpeqi	r2,r3,3
  801bb8:	10000a1e 	bne	r2,zero,801be4 <send+0x90>
  801bbc:	00000606 	br	801bd8 <send+0x84>
	case STRING:
		encodeString((char*)data, com.sendPackets);
  801bc0:	e13ffc17 	ldw	r4,-16(fp)
  801bc4:	00802074 	movhi	r2,129
  801bc8:	108f3b04 	addi	r2,r2,15596
  801bcc:	11400d17 	ldw	r5,52(r2)
  801bd0:	08002040 	call	800204 <encodeString>
		break;
  801bd4:	00000306 	br	801be4 <send+0x90>
	case PLAYLIST:
		break;
	case AUDIO:
		break;
	default:
		return -1;
  801bd8:	00bfffc4 	movi	r2,-1
  801bdc:	e0bffe15 	stw	r2,-8(fp)
  801be0:	00000506 	br	801bf8 <send+0xa4>
	}
	com.isRdySend = 1;
  801be4:	00c02074 	movhi	r3,129
  801be8:	18cf3b04 	addi	r3,r3,15596
  801bec:	00800044 	movi	r2,1
  801bf0:	18801515 	stw	r2,84(r3)
	return 0;
  801bf4:	e03ffe15 	stw	zero,-8(fp)
  801bf8:	e0bffe17 	ldw	r2,-8(fp)
}
  801bfc:	e037883a 	mov	sp,fp
  801c00:	dfc00117 	ldw	ra,4(sp)
  801c04:	df000017 	ldw	fp,0(sp)
  801c08:	dec00204 	addi	sp,sp,8
  801c0c:	f800283a 	ret

00801c10 <sendStartInit>:

unsigned char* sendStartInit() {
  801c10:	defffd04 	addi	sp,sp,-12
  801c14:	dfc00215 	stw	ra,8(sp)
  801c18:	df000115 	stw	fp,4(sp)
  801c1c:	df000104 	addi	fp,sp,4
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  801c20:	010000c4 	movi	r4,3
  801c24:	08026900 	call	802690 <malloc>
  801c28:	e0bfff15 	stw	r2,-4(fp)
	cert[0] = 0xA3; //set the format as 1010+(client_ack)(host_ack)+11
  801c2c:	e0ffff17 	ldw	r3,-4(fp)
  801c30:	00bfe8c4 	movi	r2,-93
  801c34:	18800005 	stb	r2,0(r3)
	cert[1] = 0xAA; //10101010
  801c38:	e0bfff17 	ldw	r2,-4(fp)
  801c3c:	10c00044 	addi	r3,r2,1
  801c40:	00bfea84 	movi	r2,-86
  801c44:	18800005 	stb	r2,0(r3)
	cert[2] = 0xAA; //10101010
  801c48:	e0bfff17 	ldw	r2,-4(fp)
  801c4c:	10c00084 	addi	r3,r2,2
  801c50:	00bfea84 	movi	r2,-86
  801c54:	18800005 	stb	r2,0(r3)

	updateAcknowledge(&cert[0]);
  801c58:	e13fff17 	ldw	r4,-4(fp)
  801c5c:	0801d0c0 	call	801d0c <updateAcknowledge>
	setStates(waitStart);
  801c60:	01000284 	movi	r4,10
  801c64:	08021840 	call	802184 <setStates>
	return cert;
  801c68:	e0bfff17 	ldw	r2,-4(fp)

}
  801c6c:	e037883a 	mov	sp,fp
  801c70:	dfc00117 	ldw	ra,4(sp)
  801c74:	df000017 	ldw	fp,0(sp)
  801c78:	dec00204 	addi	sp,sp,8
  801c7c:	f800283a 	ret

00801c80 <checkStartAck>:

int checkStartAck(unsigned char byte) {
  801c80:	defffc04 	addi	sp,sp,-16
  801c84:	dfc00315 	stw	ra,12(sp)
  801c88:	df000215 	stw	fp,8(sp)
  801c8c:	df000204 	addi	fp,sp,8
  801c90:	e13ffe05 	stb	r4,-8(fp)
	if(((int)(byte & 0xF3) == 0xA3)&& getBit(byte, 2) == com.host_ack) {
  801c94:	e0bffe03 	ldbu	r2,-8(fp)
  801c98:	10803ccc 	andi	r2,r2,243
  801c9c:	108028d8 	cmpnei	r2,r2,163
  801ca0:	1000131e 	bne	r2,zero,801cf0 <checkStartAck+0x70>
  801ca4:	e13ffe03 	ldbu	r4,-8(fp)
  801ca8:	01400084 	movi	r5,2
  801cac:	08014cc0 	call	8014cc <getBit>
  801cb0:	1007883a 	mov	r3,r2
  801cb4:	00802074 	movhi	r2,129
  801cb8:	108f3b04 	addi	r2,r2,15596
  801cbc:	10801417 	ldw	r2,80(r2)
  801cc0:	18800b1e 	bne	r3,r2,801cf0 <checkStartAck+0x70>
		com.client_ack = getBit(byte, 3);
  801cc4:	e13ffe03 	ldbu	r4,-8(fp)
  801cc8:	014000c4 	movi	r5,3
  801ccc:	08014cc0 	call	8014cc <getBit>
  801cd0:	1007883a 	mov	r3,r2
  801cd4:	00802074 	movhi	r2,129
  801cd8:	108f3b04 	addi	r2,r2,15596
  801cdc:	10c01315 	stw	r3,76(r2)
		switchAck();
  801ce0:	0801ffc0 	call	801ffc <switchAck>
		return 1;
  801ce4:	00800044 	movi	r2,1
  801ce8:	e0bfff15 	stw	r2,-4(fp)
  801cec:	00000106 	br	801cf4 <checkStartAck+0x74>
	} return 0;
  801cf0:	e03fff15 	stw	zero,-4(fp)
  801cf4:	e0bfff17 	ldw	r2,-4(fp)
}
  801cf8:	e037883a 	mov	sp,fp
  801cfc:	dfc00117 	ldw	ra,4(sp)
  801d00:	df000017 	ldw	fp,0(sp)
  801d04:	dec00204 	addi	sp,sp,8
  801d08:	f800283a 	ret

00801d0c <updateAcknowledge>:

void updateAcknowledge(unsigned char* byte) {
  801d0c:	defffd04 	addi	sp,sp,-12
  801d10:	dfc00215 	stw	ra,8(sp)
  801d14:	df000115 	stw	fp,4(sp)
  801d18:	df000104 	addi	fp,sp,4
  801d1c:	e13fff15 	stw	r4,-4(fp)
	if(com.host_ack == 0)
  801d20:	00802074 	movhi	r2,129
  801d24:	108f3b04 	addi	r2,r2,15596
  801d28:	10801417 	ldw	r2,80(r2)
  801d2c:	1004c03a 	cmpne	r2,r2,zero
  801d30:	1000081e 	bne	r2,zero,801d54 <updateAcknowledge+0x48>
		*byte &= 0xFB; //XXXXX0XX
  801d34:	e0bfff17 	ldw	r2,-4(fp)
  801d38:	10c00003 	ldbu	r3,0(r2)
  801d3c:	00bffec4 	movi	r2,-5
  801d40:	1884703a 	and	r2,r3,r2
  801d44:	1007883a 	mov	r3,r2
  801d48:	e0bfff17 	ldw	r2,-4(fp)
  801d4c:	10c00005 	stb	r3,0(r2)
  801d50:	00000306 	br	801d60 <updateAcknowledge+0x54>
	else
		setBit(byte, 2); //XXXXX1XX
  801d54:	e13fff17 	ldw	r4,-4(fp)
  801d58:	01400084 	movi	r5,2
  801d5c:	08015040 	call	801504 <setBit>
	if(com.client_ack == 0)
  801d60:	00802074 	movhi	r2,129
  801d64:	108f3b04 	addi	r2,r2,15596
  801d68:	10801317 	ldw	r2,76(r2)
  801d6c:	1004c03a 	cmpne	r2,r2,zero
  801d70:	1000081e 	bne	r2,zero,801d94 <updateAcknowledge+0x88>
		*byte &= 0xF7; //XXXX0XXX
  801d74:	e0bfff17 	ldw	r2,-4(fp)
  801d78:	10c00003 	ldbu	r3,0(r2)
  801d7c:	00bffdc4 	movi	r2,-9
  801d80:	1884703a 	and	r2,r3,r2
  801d84:	1007883a 	mov	r3,r2
  801d88:	e0bfff17 	ldw	r2,-4(fp)
  801d8c:	10c00005 	stb	r3,0(r2)
  801d90:	00000306 	br	801da0 <updateAcknowledge+0x94>
	else
		setBit(byte, 3); //XXXX1XXX
  801d94:	e13fff17 	ldw	r4,-4(fp)
  801d98:	014000c4 	movi	r5,3
  801d9c:	08015040 	call	801504 <setBit>
}
  801da0:	e037883a 	mov	sp,fp
  801da4:	dfc00117 	ldw	ra,4(sp)
  801da8:	df000017 	ldw	fp,0(sp)
  801dac:	dec00204 	addi	sp,sp,8
  801db0:	f800283a 	ret

00801db4 <sendStats>:
/*
 * send 3 bytes acknowledge to client at sendStats stage;
 * 1 byte: client_ack + host_ack + receive/send; 2bytes: length of packets if any
 * first byte format: 1111+(client_ack)(host_ack)(send)(receive)
 */
unsigned char* sendStats() {
  801db4:	defffa04 	addi	sp,sp,-24
  801db8:	dfc00515 	stw	ra,20(sp)
  801dbc:	df000415 	stw	fp,16(sp)
  801dc0:	df000404 	addi	fp,sp,16
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  801dc4:	010000c4 	movi	r4,3
  801dc8:	08026900 	call	802690 <malloc>
  801dcc:	e0bffd15 	stw	r2,-12(fp)
	cert[0] = 0xF0; //set the format as 1111+(client_ack)(host_ack)(send)(receive)
  801dd0:	e0fffd17 	ldw	r3,-12(fp)
  801dd4:	00bffc04 	movi	r2,-16
  801dd8:	18800005 	stb	r2,0(r3)
	cert[1] = 0;
  801ddc:	e0bffd17 	ldw	r2,-12(fp)
  801de0:	10800044 	addi	r2,r2,1
  801de4:	10000005 	stb	zero,0(r2)
	cert[2] = 0;
  801de8:	e0bffd17 	ldw	r2,-12(fp)
  801dec:	10800084 	addi	r2,r2,2
  801df0:	10000005 	stb	zero,0(r2)
	int* num_s_packets;

	updateAcknowledge(&cert[0]);
  801df4:	e13ffd17 	ldw	r4,-12(fp)
  801df8:	0801d0c0 	call	801d0c <updateAcknowledge>

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
  801dfc:	00802074 	movhi	r2,129
  801e00:	108f3b04 	addi	r2,r2,15596
  801e04:	10801517 	ldw	r2,84(r2)
  801e08:	10800060 	cmpeqi	r2,r2,1
  801e0c:	1000061e 	bne	r2,zero,801e28 <sendStats+0x74>
  801e10:	00802074 	movhi	r2,129
  801e14:	108f3b04 	addi	r2,r2,15596
  801e18:	10800f17 	ldw	r2,60(r2)
  801e1c:	10800017 	ldw	r2,0(r2)
  801e20:	10800050 	cmplti	r2,r2,1
  801e24:	1000301e 	bne	r2,zero,801ee8 <sendStats+0x134>
		setStates(waitClient);
  801e28:	01000084 	movi	r4,2
  801e2c:	08021840 	call	802184 <setStates>
		setBit(&cert[0], 1); //1111XX10
  801e30:	e13ffd17 	ldw	r4,-12(fp)
  801e34:	01400044 	movi	r5,1
  801e38:	08015040 	call	801504 <setBit>
		com.index_send_packets = 0;
  801e3c:	00802074 	movhi	r2,129
  801e40:	108f3b04 	addi	r2,r2,15596
  801e44:	10001a15 	stw	zero,104(r2)
		num_s_packets = (int*)dequeue(com.pendingPacketSize);
  801e48:	00802074 	movhi	r2,129
  801e4c:	108f3b04 	addi	r2,r2,15596
  801e50:	11000f17 	ldw	r4,60(r2)
  801e54:	08018a40 	call	8018a4 <dequeue>
  801e58:	e0bffc15 	stw	r2,-16(fp)
		com.num_send_packets = *num_s_packets;
  801e5c:	e0bffc17 	ldw	r2,-16(fp)
  801e60:	10c00017 	ldw	r3,0(r2)
  801e64:	00802074 	movhi	r2,129
  801e68:	108f3b04 	addi	r2,r2,15596
  801e6c:	10c01915 	stw	r3,100(r2)
		cert[1] = (unsigned char)(com.num_send_packets/256);
  801e70:	e0bffd17 	ldw	r2,-12(fp)
  801e74:	10800044 	addi	r2,r2,1
  801e78:	e0bffe15 	stw	r2,-8(fp)
  801e7c:	00802074 	movhi	r2,129
  801e80:	108f3b04 	addi	r2,r2,15596
  801e84:	10801917 	ldw	r2,100(r2)
  801e88:	e0bfff15 	stw	r2,-4(fp)
  801e8c:	e0ffff17 	ldw	r3,-4(fp)
  801e90:	1804403a 	cmpge	r2,r3,zero
  801e94:	1000031e 	bne	r2,zero,801ea4 <sendStats+0xf0>
  801e98:	e0bfff17 	ldw	r2,-4(fp)
  801e9c:	10803fc4 	addi	r2,r2,255
  801ea0:	e0bfff15 	stw	r2,-4(fp)
  801ea4:	e0ffff17 	ldw	r3,-4(fp)
  801ea8:	1805d23a 	srai	r2,r3,8
  801eac:	e0fffe17 	ldw	r3,-8(fp)
  801eb0:	18800005 	stb	r2,0(r3)
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
  801eb4:	e0bffd17 	ldw	r2,-12(fp)
  801eb8:	11000084 	addi	r4,r2,2
  801ebc:	00802074 	movhi	r2,129
  801ec0:	108f3b04 	addi	r2,r2,15596
  801ec4:	10801917 	ldw	r2,100(r2)
  801ec8:	1007883a 	mov	r3,r2
  801ecc:	00bfffc4 	movi	r2,-1
  801ed0:	1884703a 	and	r2,r3,r2
  801ed4:	20800005 	stb	r2,0(r4)
		free(num_s_packets);
  801ed8:	e13ffc17 	ldw	r4,-16(fp)
  801edc:	080267c0 	call	80267c <free>
		num_s_packets = NULL;
  801ee0:	e03ffc15 	stw	zero,-16(fp)
	cert[2] = 0;
	int* num_s_packets;

	updateAcknowledge(&cert[0]);

	if(com.isRdySend == 1 || com.pendingPacketSize->size > 0) {
  801ee4:	00000506 	br	801efc <sendStats+0x148>
		cert[1] = (unsigned char)(com.num_send_packets/256);
		cert[2] = (unsigned char)(com.num_send_packets & 0x00FF);
		free(num_s_packets);
		num_s_packets = NULL;
	} else {
		setStates(checkClient);
  801ee8:	0009883a 	mov	r4,zero
  801eec:	08021840 	call	802184 <setStates>
		setBit(&cert[0], 0); //1111XX01
  801ef0:	e13ffd17 	ldw	r4,-12(fp)
  801ef4:	000b883a 	mov	r5,zero
  801ef8:	08015040 	call	801504 <setBit>
	}
	return cert;
  801efc:	e0bffd17 	ldw	r2,-12(fp)
}
  801f00:	e037883a 	mov	sp,fp
  801f04:	dfc00117 	ldw	ra,4(sp)
  801f08:	df000017 	ldw	fp,0(sp)
  801f0c:	dec00204 	addi	sp,sp,8
  801f10:	f800283a 	ret

00801f14 <sendAck>:

unsigned char* sendAck() {
  801f14:	defffc04 	addi	sp,sp,-16
  801f18:	dfc00315 	stw	ra,12(sp)
  801f1c:	df000215 	stw	fp,8(sp)
  801f20:	df000204 	addi	fp,sp,8
	unsigned char* cert = (unsigned char*)malloc(sizeof(unsigned char)*3);
  801f24:	010000c4 	movi	r4,3
  801f28:	08026900 	call	802690 <malloc>
  801f2c:	e0bfff15 	stw	r2,-4(fp)
	if(cert == NULL) {
  801f30:	e0bfff17 	ldw	r2,-4(fp)
  801f34:	1004c03a 	cmpne	r2,r2,zero
  801f38:	1000031e 	bne	r2,zero,801f48 <sendAck+0x34>
		printf("NO MEMORY to send ack!!\n");
  801f3c:	01002074 	movhi	r4,129
  801f40:	213fb404 	addi	r4,r4,-304
  801f44:	0802f9c0 	call	802f9c <puts>
	}
	cert[0] = 0xF0; //set the format as 1111+(client_ack)(host_ack)(send)(receive)
  801f48:	e0ffff17 	ldw	r3,-4(fp)
  801f4c:	00bffc04 	movi	r2,-16
  801f50:	18800005 	stb	r2,0(r3)
	cert[1] = 0;
  801f54:	e0bfff17 	ldw	r2,-4(fp)
  801f58:	10800044 	addi	r2,r2,1
  801f5c:	10000005 	stb	zero,0(r2)
	cert[2] = 0;
  801f60:	e0bfff17 	ldw	r2,-4(fp)
  801f64:	10800084 	addi	r2,r2,2
  801f68:	10000005 	stb	zero,0(r2)

	updateAcknowledge(&cert[0]);
  801f6c:	e13fff17 	ldw	r4,-4(fp)
  801f70:	0801d0c0 	call	801d0c <updateAcknowledge>

	setBit(&cert[0], 0); //1111XX01
  801f74:	e13fff17 	ldw	r4,-4(fp)
  801f78:	000b883a 	mov	r5,zero
  801f7c:	08015040 	call	801504 <setBit>

	char* temp; //need to do something with this later

	if(com.index_packets >= com.num_packets) { //all packets received
  801f80:	00802074 	movhi	r2,129
  801f84:	108f3b04 	addi	r2,r2,15596
  801f88:	10c01817 	ldw	r3,96(r2)
  801f8c:	00802074 	movhi	r2,129
  801f90:	108f3b04 	addi	r2,r2,15596
  801f94:	10801717 	ldw	r2,92(r2)
  801f98:	18801016 	blt	r3,r2,801fdc <sendAck+0xc8>
		setStates(checkClient);
  801f9c:	0009883a 	mov	r4,zero
  801fa0:	08021840 	call	802184 <setStates>
		com.index_packets = 0;
  801fa4:	00802074 	movhi	r2,129
  801fa8:	108f3b04 	addi	r2,r2,15596
  801fac:	10001815 	stw	zero,96(r2)

		//call decode & command here later
		temp = (char*)decode(com.receivePackets);
  801fb0:	00802074 	movhi	r2,129
  801fb4:	108f3b04 	addi	r2,r2,15596
  801fb8:	11000e17 	ldw	r4,56(r2)
  801fbc:	08003c80 	call	8003c8 <decode>
  801fc0:	e0bffe15 	stw	r2,-8(fp)
		printf("%s\n", temp);
  801fc4:	e13ffe17 	ldw	r4,-8(fp)
  801fc8:	0802f9c0 	call	802f9c <puts>
		free(temp);
  801fcc:	e13ffe17 	ldw	r4,-8(fp)
  801fd0:	080267c0 	call	80267c <free>
		temp = NULL;
  801fd4:	e03ffe15 	stw	zero,-8(fp)
  801fd8:	00000206 	br	801fe4 <sendAck+0xd0>
	} else
		setStates(receiveData0);
  801fdc:	01000204 	movi	r4,8
  801fe0:	08021840 	call	802184 <setStates>
	return cert;
  801fe4:	e0bfff17 	ldw	r2,-4(fp)
}
  801fe8:	e037883a 	mov	sp,fp
  801fec:	dfc00117 	ldw	ra,4(sp)
  801ff0:	df000017 	ldw	fp,0(sp)
  801ff4:	dec00204 	addi	sp,sp,8
  801ff8:	f800283a 	ret

00801ffc <switchAck>:
void switchAck() {
  801ffc:	deffff04 	addi	sp,sp,-4
  802000:	df000015 	stw	fp,0(sp)
  802004:	d839883a 	mov	fp,sp
	com.host_ack = (com.host_ack == 0) ? 1 : 0;
  802008:	00802074 	movhi	r2,129
  80200c:	108f3b04 	addi	r2,r2,15596
  802010:	10801417 	ldw	r2,80(r2)
  802014:	1007003a 	cmpeq	r3,r2,zero
  802018:	00802074 	movhi	r2,129
  80201c:	108f3b04 	addi	r2,r2,15596
  802020:	10c01415 	stw	r3,80(r2)
}
  802024:	e037883a 	mov	sp,fp
  802028:	df000017 	ldw	fp,0(sp)
  80202c:	dec00104 	addi	sp,sp,4
  802030:	f800283a 	ret

00802034 <checkAck>:
/*
 * check if the acknowledge byte is valid
 */
int checkAck(unsigned char* bytes) {
  802034:	defffb04 	addi	sp,sp,-20
  802038:	dfc00415 	stw	ra,16(sp)
  80203c:	df000315 	stw	fp,12(sp)
  802040:	dc000215 	stw	r16,8(sp)
  802044:	df000204 	addi	fp,sp,8
  802048:	e13ffe15 	stw	r4,-8(fp)
	if(((bytes[0] & 0xF0) == 0xF0) & (getBit(bytes[0], 2) == com.host_ack)) {
  80204c:	e0bffe17 	ldw	r2,-8(fp)
  802050:	10800003 	ldbu	r2,0(r2)
  802054:	10803fcc 	andi	r2,r2,255
  802058:	10803c0c 	andi	r2,r2,240
  80205c:	10803c20 	cmpeqi	r2,r2,240
  802060:	1021883a 	mov	r16,r2
  802064:	e0bffe17 	ldw	r2,-8(fp)
  802068:	10800003 	ldbu	r2,0(r2)
  80206c:	11003fcc 	andi	r4,r2,255
  802070:	01400084 	movi	r5,2
  802074:	08014cc0 	call	8014cc <getBit>
  802078:	1007883a 	mov	r3,r2
  80207c:	00802074 	movhi	r2,129
  802080:	108f3b04 	addi	r2,r2,15596
  802084:	10801417 	ldw	r2,80(r2)
  802088:	1885003a 	cmpeq	r2,r3,r2
  80208c:	8084703a 	and	r2,r16,r2
  802090:	10803fcc 	andi	r2,r2,255
  802094:	1005003a 	cmpeq	r2,r2,zero
  802098:	1000101e 	bne	r2,zero,8020dc <checkAck+0xa8>
		com.client_ack = getBit(bytes[0], 3);
  80209c:	e0bffe17 	ldw	r2,-8(fp)
  8020a0:	10800003 	ldbu	r2,0(r2)
  8020a4:	11003fcc 	andi	r4,r2,255
  8020a8:	014000c4 	movi	r5,3
  8020ac:	08014cc0 	call	8014cc <getBit>
  8020b0:	1007883a 	mov	r3,r2
  8020b4:	00802074 	movhi	r2,129
  8020b8:	108f3b04 	addi	r2,r2,15596
  8020bc:	10c01315 	stw	r3,76(r2)
		switchAck(); //very important to switch ack for next ack
  8020c0:	0801ffc0 	call	801ffc <switchAck>
		com.failReceive = 0;
  8020c4:	00802074 	movhi	r2,129
  8020c8:	108f3b04 	addi	r2,r2,15596
  8020cc:	10001615 	stw	zero,88(r2)
		return 1;
  8020d0:	00800044 	movi	r2,1
  8020d4:	e0bfff15 	stw	r2,-4(fp)
  8020d8:	00000806 	br	8020fc <checkAck+0xc8>
	} com.failReceive++;
  8020dc:	00802074 	movhi	r2,129
  8020e0:	108f3b04 	addi	r2,r2,15596
  8020e4:	10801617 	ldw	r2,88(r2)
  8020e8:	10c00044 	addi	r3,r2,1
  8020ec:	00802074 	movhi	r2,129
  8020f0:	108f3b04 	addi	r2,r2,15596
  8020f4:	10c01615 	stw	r3,88(r2)
	return 0;
  8020f8:	e03fff15 	stw	zero,-4(fp)
  8020fc:	e0bfff17 	ldw	r2,-4(fp)
}
  802100:	e037883a 	mov	sp,fp
  802104:	dfc00217 	ldw	ra,8(sp)
  802108:	df000117 	ldw	fp,4(sp)
  80210c:	dc000017 	ldw	r16,0(sp)
  802110:	dec00304 	addi	sp,sp,12
  802114:	f800283a 	ret

00802118 <failReceive>:

/*
* increment the frequency of failing receive data;
* go back to past state if it has already fail receiving 100 times
*/
void failReceive(enum States pastState) {
  802118:	defffd04 	addi	sp,sp,-12
  80211c:	dfc00215 	stw	ra,8(sp)
  802120:	df000115 	stw	fp,4(sp)
  802124:	df000104 	addi	fp,sp,4
  802128:	e13fff15 	stw	r4,-4(fp)
	com.failReceive++;
  80212c:	00802074 	movhi	r2,129
  802130:	108f3b04 	addi	r2,r2,15596
  802134:	10801617 	ldw	r2,88(r2)
  802138:	10c00044 	addi	r3,r2,1
  80213c:	00802074 	movhi	r2,129
  802140:	108f3b04 	addi	r2,r2,15596
  802144:	10c01615 	stw	r3,88(r2)
	if(com.failReceive > 100) {
  802148:	00802074 	movhi	r2,129
  80214c:	108f3b04 	addi	r2,r2,15596
  802150:	10801617 	ldw	r2,88(r2)
  802154:	10801950 	cmplti	r2,r2,101
  802158:	1000051e 	bne	r2,zero,802170 <failReceive+0x58>
		setStates(pastState);
  80215c:	e13fff17 	ldw	r4,-4(fp)
  802160:	08021840 	call	802184 <setStates>
		com.failReceive=0;
  802164:	00802074 	movhi	r2,129
  802168:	108f3b04 	addi	r2,r2,15596
  80216c:	10001615 	stw	zero,88(r2)
	}
}
  802170:	e037883a 	mov	sp,fp
  802174:	dfc00117 	ldw	ra,4(sp)
  802178:	df000017 	ldw	fp,0(sp)
  80217c:	dec00204 	addi	sp,sp,8
  802180:	f800283a 	ret

00802184 <setStates>:

void setStates(enum States s) {
  802184:	defffe04 	addi	sp,sp,-8
  802188:	df000115 	stw	fp,4(sp)
  80218c:	df000104 	addi	fp,sp,4
  802190:	e13fff15 	stw	r4,-4(fp)
	*(com.pastState) = *(com.stateMachine);
  802194:	00802074 	movhi	r2,129
  802198:	108f3b04 	addi	r2,r2,15596
  80219c:	10c01217 	ldw	r3,72(r2)
  8021a0:	00802074 	movhi	r2,129
  8021a4:	108f3b04 	addi	r2,r2,15596
  8021a8:	10801117 	ldw	r2,68(r2)
  8021ac:	10800017 	ldw	r2,0(r2)
  8021b0:	18800015 	stw	r2,0(r3)
	*(com.stateMachine) = s;
  8021b4:	00802074 	movhi	r2,129
  8021b8:	108f3b04 	addi	r2,r2,15596
  8021bc:	10c01117 	ldw	r3,68(r2)
  8021c0:	e0bfff17 	ldw	r2,-4(fp)
  8021c4:	18800015 	stw	r2,0(r3)
	//printf("past state: %d\n", *(com.pastState));
	//printf("current state: %d\n", *(com.stateMachine));
}
  8021c8:	e037883a 	mov	sp,fp
  8021cc:	df000017 	ldw	fp,0(sp)
  8021d0:	dec00104 	addi	sp,sp,4
  8021d4:	f800283a 	ret

008021d8 <reset>:
/*
 * Reset the RS232 communication to initial state
 */
void reset(alt_up_rs232_dev *serial_dev) {
  8021d8:	defffb04 	addi	sp,sp,-20
  8021dc:	dfc00415 	stw	ra,16(sp)
  8021e0:	df000315 	stw	fp,12(sp)
  8021e4:	df000304 	addi	fp,sp,12
  8021e8:	e13fff15 	stw	r4,-4(fp)
	printf("Starting reseting connection\n");
  8021ec:	01002074 	movhi	r4,129
  8021f0:	213fba04 	addi	r4,r4,-280
  8021f4:	0802f9c0 	call	802f9c <puts>
	com.client_ack = com.host_ack = 0;
  8021f8:	00802074 	movhi	r2,129
  8021fc:	108f3b04 	addi	r2,r2,15596
  802200:	10001415 	stw	zero,80(r2)
  802204:	00802074 	movhi	r2,129
  802208:	108f3b04 	addi	r2,r2,15596
  80220c:	10c01417 	ldw	r3,80(r2)
  802210:	00802074 	movhi	r2,129
  802214:	108f3b04 	addi	r2,r2,15596
  802218:	10c01315 	stw	r3,76(r2)
	com.failReceive = com.isRdySend = 0;
  80221c:	00802074 	movhi	r2,129
  802220:	108f3b04 	addi	r2,r2,15596
  802224:	10001515 	stw	zero,84(r2)
  802228:	00802074 	movhi	r2,129
  80222c:	108f3b04 	addi	r2,r2,15596
  802230:	10c01517 	ldw	r3,84(r2)
  802234:	00802074 	movhi	r2,129
  802238:	108f3b04 	addi	r2,r2,15596
  80223c:	10c01615 	stw	r3,88(r2)
	com.num_packets = com.num_send_packets = 0;
  802240:	00802074 	movhi	r2,129
  802244:	108f3b04 	addi	r2,r2,15596
  802248:	10001915 	stw	zero,100(r2)
  80224c:	00802074 	movhi	r2,129
  802250:	108f3b04 	addi	r2,r2,15596
  802254:	10c01917 	ldw	r3,100(r2)
  802258:	00802074 	movhi	r2,129
  80225c:	108f3b04 	addi	r2,r2,15596
  802260:	10c01715 	stw	r3,92(r2)
	com.index_packets = com.index_send_packets = 0;
  802264:	00802074 	movhi	r2,129
  802268:	108f3b04 	addi	r2,r2,15596
  80226c:	10001a15 	stw	zero,104(r2)
  802270:	00802074 	movhi	r2,129
  802274:	108f3b04 	addi	r2,r2,15596
  802278:	10c01a17 	ldw	r3,104(r2)
  80227c:	00802074 	movhi	r2,129
  802280:	108f3b04 	addi	r2,r2,15596
  802284:	10c01815 	stw	r3,96(r2)

	struct Packet* p = NULL;
  802288:	e03ffe15 	stw	zero,-8(fp)
	int* len;
	while(com.sendPackets->size > 0) {
  80228c:	00000706 	br	8022ac <reset+0xd4>
		p = (struct Packet*)dequeue(com.sendPackets);
  802290:	00802074 	movhi	r2,129
  802294:	108f3b04 	addi	r2,r2,15596
  802298:	11000d17 	ldw	r4,52(r2)
  80229c:	08018a40 	call	8018a4 <dequeue>
  8022a0:	e0bffe15 	stw	r2,-8(fp)
		killPacket(&p);
  8022a4:	e13ffe04 	addi	r4,fp,-8
  8022a8:	08011240 	call	801124 <killPacket>
	com.num_packets = com.num_send_packets = 0;
	com.index_packets = com.index_send_packets = 0;

	struct Packet* p = NULL;
	int* len;
	while(com.sendPackets->size > 0) {
  8022ac:	00802074 	movhi	r2,129
  8022b0:	108f3b04 	addi	r2,r2,15596
  8022b4:	10800d17 	ldw	r2,52(r2)
  8022b8:	10800017 	ldw	r2,0(r2)
  8022bc:	10800048 	cmpgei	r2,r2,1
  8022c0:	103ff31e 	bne	r2,zero,802290 <reset+0xb8>
		p = (struct Packet*)dequeue(com.sendPackets);
		killPacket(&p);
	}

	while(com.receivePackets->size > 0) {
  8022c4:	00000706 	br	8022e4 <reset+0x10c>
		p = (struct Packet*)dequeue(com.receivePackets);
  8022c8:	00802074 	movhi	r2,129
  8022cc:	108f3b04 	addi	r2,r2,15596
  8022d0:	11000e17 	ldw	r4,56(r2)
  8022d4:	08018a40 	call	8018a4 <dequeue>
  8022d8:	e0bffe15 	stw	r2,-8(fp)
		killPacket(&p);
  8022dc:	e13ffe04 	addi	r4,fp,-8
  8022e0:	08011240 	call	801124 <killPacket>
	while(com.sendPackets->size > 0) {
		p = (struct Packet*)dequeue(com.sendPackets);
		killPacket(&p);
	}

	while(com.receivePackets->size > 0) {
  8022e4:	00802074 	movhi	r2,129
  8022e8:	108f3b04 	addi	r2,r2,15596
  8022ec:	10800e17 	ldw	r2,56(r2)
  8022f0:	10800017 	ldw	r2,0(r2)
  8022f4:	10800048 	cmpgei	r2,r2,1
  8022f8:	103ff31e 	bne	r2,zero,8022c8 <reset+0xf0>
		p = (struct Packet*)dequeue(com.receivePackets);
		killPacket(&p);
	}

	while(com.pendingPacketSize->size > 0) {
  8022fc:	00000806 	br	802320 <reset+0x148>
		len = (int*)dequeue(com.pendingPacketSize);
  802300:	00802074 	movhi	r2,129
  802304:	108f3b04 	addi	r2,r2,15596
  802308:	11000f17 	ldw	r4,60(r2)
  80230c:	08018a40 	call	8018a4 <dequeue>
  802310:	e0bffd15 	stw	r2,-12(fp)
		free(len);
  802314:	e13ffd17 	ldw	r4,-12(fp)
  802318:	080267c0 	call	80267c <free>
		len = NULL;
  80231c:	e03ffd15 	stw	zero,-12(fp)
	while(com.receivePackets->size > 0) {
		p = (struct Packet*)dequeue(com.receivePackets);
		killPacket(&p);
	}

	while(com.pendingPacketSize->size > 0) {
  802320:	00802074 	movhi	r2,129
  802324:	108f3b04 	addi	r2,r2,15596
  802328:	10800f17 	ldw	r2,60(r2)
  80232c:	10800017 	ldw	r2,0(r2)
  802330:	10800048 	cmpgei	r2,r2,1
  802334:	103ff21e 	bne	r2,zero,802300 <reset+0x128>
		len = (int*)dequeue(com.pendingPacketSize);
		free(len);
		len = NULL;
	}
	if(&com.packetBuf != NULL) {
		free(com.packetBuf);
  802338:	00802074 	movhi	r2,129
  80233c:	108f3b04 	addi	r2,r2,15596
  802340:	11001017 	ldw	r4,64(r2)
  802344:	080267c0 	call	80267c <free>
		com.packetBuf = NULL;
  802348:	00802074 	movhi	r2,129
  80234c:	108f3b04 	addi	r2,r2,15596
  802350:	10001015 	stw	zero,64(r2)
	}
	while (alt_up_rs232_get_used_space_in_read_FIFO(serial_dev) != 0);
  802354:	e13fff17 	ldw	r4,-4(fp)
  802358:	080e7d00 	call	80e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>
  80235c:	1004c03a 	cmpne	r2,r2,zero
  802360:	103ffc1e 	bne	r2,zero,802354 <reset+0x17c>
	alt_up_rs232_read_data(serial_dev, &com.data[0], &com.parity);
  802364:	e13fff17 	ldw	r4,-4(fp)
  802368:	01402074 	movhi	r5,129
  80236c:	294f3b04 	addi	r5,r5,15596
  802370:	01802074 	movhi	r6,129
  802374:	318f4784 	addi	r6,r6,15646
  802378:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
	setStates(startInit);
  80237c:	01000244 	movi	r4,9
  802380:	08021840 	call	802184 <setStates>
	printf("WARNNING!! the connection has been reseted.\n");
  802384:	01002074 	movhi	r4,129
  802388:	213fc204 	addi	r4,r4,-248
  80238c:	0802f9c0 	call	802f9c <puts>
}
  802390:	e037883a 	mov	sp,fp
  802394:	dfc00117 	ldw	ra,4(sp)
  802398:	df000017 	ldw	fp,0(sp)
  80239c:	dec00204 	addi	sp,sp,8
  8023a0:	f800283a 	ret

008023a4 <sendRS232>:
/*
 * Send sequence of bytes to serial port
 */
void sendRS232(alt_up_rs232_dev *serial_dev, unsigned char* bytes, int size) {
  8023a4:	defffa04 	addi	sp,sp,-24
  8023a8:	dfc00515 	stw	ra,20(sp)
  8023ac:	df000415 	stw	fp,16(sp)
  8023b0:	df000404 	addi	fp,sp,16
  8023b4:	e13ffd15 	stw	r4,-12(fp)
  8023b8:	e17ffe15 	stw	r5,-8(fp)
  8023bc:	e1bfff15 	stw	r6,-4(fp)
	int i;
	for(i = 0; i < size; i++) {
  8023c0:	e03ffc15 	stw	zero,-16(fp)
  8023c4:	00000b06 	br	8023f4 <sendRS232+0x50>
		alt_up_rs232_write_data(serial_dev, bytes[i]);
  8023c8:	e0bffc17 	ldw	r2,-16(fp)
  8023cc:	1007883a 	mov	r3,r2
  8023d0:	e0bffe17 	ldw	r2,-8(fp)
  8023d4:	1885883a 	add	r2,r3,r2
  8023d8:	10800003 	ldbu	r2,0(r2)
  8023dc:	11403fcc 	andi	r5,r2,255
  8023e0:	e13ffd17 	ldw	r4,-12(fp)
  8023e4:	080e89c0 	call	80e89c <alt_up_rs232_write_data>
/*
 * Send sequence of bytes to serial port
 */
void sendRS232(alt_up_rs232_dev *serial_dev, unsigned char* bytes, int size) {
	int i;
	for(i = 0; i < size; i++) {
  8023e8:	e0bffc17 	ldw	r2,-16(fp)
  8023ec:	10800044 	addi	r2,r2,1
  8023f0:	e0bffc15 	stw	r2,-16(fp)
  8023f4:	e0fffc17 	ldw	r3,-16(fp)
  8023f8:	e0bfff17 	ldw	r2,-4(fp)
  8023fc:	18bff216 	blt	r3,r2,8023c8 <sendRS232+0x24>
		alt_up_rs232_write_data(serial_dev, bytes[i]);
	}
}
  802400:	e037883a 	mov	sp,fp
  802404:	dfc00117 	ldw	ra,4(sp)
  802408:	df000017 	ldw	fp,0(sp)
  80240c:	dec00204 	addi	sp,sp,8
  802410:	f800283a 	ret

00802414 <main>:
#include "Global.h"

int main()
{
  802414:	deffde04 	addi	sp,sp,-136
  802418:	dfc02115 	stw	ra,132(sp)
  80241c:	df002015 	stw	fp,128(sp)
  802420:	dc001f15 	stw	r16,124(sp)
  802424:	df001f04 	addi	fp,sp,124
	com = initRS232();
  802428:	04002074 	movhi	r16,129
  80242c:	840f3b04 	addi	r16,r16,15596
  802430:	e13fe504 	addi	r4,fp,-108
  802434:	0801a140 	call	801a14 <initRS232>
  802438:	8009883a 	mov	r4,r16
  80243c:	e17fe504 	addi	r5,fp,-108
  802440:	01801b04 	movi	r6,108
  802444:	0802de40 	call	802de4 <memcpy>
	char* temp = "Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. ";
  802448:	00802074 	movhi	r2,129
  80244c:	10bfcd04 	addi	r2,r2,-204
  802450:	e0bfe415 	stw	r2,-112(fp)
	char* temp1 = "this is a testing message";
  802454:	00802074 	movhi	r2,129
  802458:	10800304 	addi	r2,r2,12
  80245c:	e0bfe315 	stw	r2,-116(fp)
	char* temp2 = "I hate debugging and testing";
  802460:	00802074 	movhi	r2,129
  802464:	10800a04 	addi	r2,r2,40
  802468:	e0bfe215 	stw	r2,-120(fp)
	int i;
	for(i = 0; i < 39999999; i++) {}
  80246c:	e03fe115 	stw	zero,-124(fp)
  802470:	00000306 	br	802480 <main+0x6c>
  802474:	e0bfe117 	ldw	r2,-124(fp)
  802478:	10800044 	addi	r2,r2,1
  80247c:	e0bfe115 	stw	r2,-124(fp)
  802480:	e0ffe117 	ldw	r3,-124(fp)
  802484:	008098b4 	movhi	r2,610
  802488:	10967f84 	addi	r2,r2,23038
  80248c:	10fff90e 	bge	r2,r3,802474 <main+0x60>
	send((void*)temp1, STRING);
  802490:	e13fe317 	ldw	r4,-116(fp)
  802494:	000b883a 	mov	r5,zero
  802498:	0801b540 	call	801b54 <send>

	while(1) {
		for(i = 0; i < 9999999; i++) {}
  80249c:	e03fe115 	stw	zero,-124(fp)
  8024a0:	00000306 	br	8024b0 <main+0x9c>
  8024a4:	e0bfe117 	ldw	r2,-124(fp)
  8024a8:	10800044 	addi	r2,r2,1
  8024ac:	e0bfe115 	stw	r2,-124(fp)
  8024b0:	e0ffe117 	ldw	r3,-124(fp)
  8024b4:	00802674 	movhi	r2,153
  8024b8:	10a59f84 	addi	r2,r2,-27010
  8024bc:	10fff90e 	bge	r2,r3,8024a4 <main+0x90>
		send((void*)temp2, STRING);
  8024c0:	e13fe217 	ldw	r4,-120(fp)
  8024c4:	000b883a 	mov	r5,zero
  8024c8:	0801b540 	call	801b54 <send>
		for(i = 0; i < 9999999; i++) {}
  8024cc:	e03fe115 	stw	zero,-124(fp)
  8024d0:	00000306 	br	8024e0 <main+0xcc>
  8024d4:	e0bfe117 	ldw	r2,-124(fp)
  8024d8:	10800044 	addi	r2,r2,1
  8024dc:	e0bfe115 	stw	r2,-124(fp)
  8024e0:	e0ffe117 	ldw	r3,-124(fp)
  8024e4:	00802674 	movhi	r2,153
  8024e8:	10a59f84 	addi	r2,r2,-27010
  8024ec:	10fff90e 	bge	r2,r3,8024d4 <main+0xc0>
		send((void*)temp, STRING);
  8024f0:	e13fe417 	ldw	r4,-112(fp)
  8024f4:	000b883a 	mov	r5,zero
  8024f8:	0801b540 	call	801b54 <send>
		for(i = 0; i < 9999999; i++) {}
  8024fc:	e03fe115 	stw	zero,-124(fp)
  802500:	00000306 	br	802510 <main+0xfc>
  802504:	e0bfe117 	ldw	r2,-124(fp)
  802508:	10800044 	addi	r2,r2,1
  80250c:	e0bfe115 	stw	r2,-124(fp)
  802510:	e0ffe117 	ldw	r3,-124(fp)
  802514:	00802674 	movhi	r2,153
  802518:	10a59f84 	addi	r2,r2,-27010
  80251c:	10fff90e 	bge	r2,r3,802504 <main+0xf0>
		send((void*)temp1, STRING);
  802520:	e13fe317 	ldw	r4,-116(fp)
  802524:	000b883a 	mov	r5,zero
  802528:	0801b540 	call	801b54 <send>
	//	usleep(100000);
	//	printf("%s\n", com.data);
	}
  80252c:	003fdb06 	br	80249c <main+0x88>

00802530 <udivmodsi4>:
  802530:	29001b2e 	bgeu	r5,r4,8025a0 <udivmodsi4+0x70>
  802534:	28001a16 	blt	r5,zero,8025a0 <udivmodsi4+0x70>
  802538:	00800044 	movi	r2,1
  80253c:	0007883a 	mov	r3,zero
  802540:	01c007c4 	movi	r7,31
  802544:	00000306 	br	802554 <udivmodsi4+0x24>
  802548:	19c01326 	beq	r3,r7,802598 <udivmodsi4+0x68>
  80254c:	18c00044 	addi	r3,r3,1
  802550:	28000416 	blt	r5,zero,802564 <udivmodsi4+0x34>
  802554:	294b883a 	add	r5,r5,r5
  802558:	1085883a 	add	r2,r2,r2
  80255c:	293ffa36 	bltu	r5,r4,802548 <udivmodsi4+0x18>
  802560:	10000d26 	beq	r2,zero,802598 <udivmodsi4+0x68>
  802564:	0007883a 	mov	r3,zero
  802568:	21400236 	bltu	r4,r5,802574 <udivmodsi4+0x44>
  80256c:	2149c83a 	sub	r4,r4,r5
  802570:	1886b03a 	or	r3,r3,r2
  802574:	1004d07a 	srli	r2,r2,1
  802578:	280ad07a 	srli	r5,r5,1
  80257c:	103ffa1e 	bne	r2,zero,802568 <udivmodsi4+0x38>
  802580:	30000226 	beq	r6,zero,80258c <udivmodsi4+0x5c>
  802584:	2005883a 	mov	r2,r4
  802588:	f800283a 	ret
  80258c:	1809883a 	mov	r4,r3
  802590:	2005883a 	mov	r2,r4
  802594:	f800283a 	ret
  802598:	0007883a 	mov	r3,zero
  80259c:	003ff806 	br	802580 <udivmodsi4+0x50>
  8025a0:	00800044 	movi	r2,1
  8025a4:	0007883a 	mov	r3,zero
  8025a8:	003fef06 	br	802568 <udivmodsi4+0x38>

008025ac <__divsi3>:
  8025ac:	defffe04 	addi	sp,sp,-8
  8025b0:	dc000015 	stw	r16,0(sp)
  8025b4:	dfc00115 	stw	ra,4(sp)
  8025b8:	0021883a 	mov	r16,zero
  8025bc:	20000c16 	blt	r4,zero,8025f0 <__divsi3+0x44>
  8025c0:	000d883a 	mov	r6,zero
  8025c4:	28000e16 	blt	r5,zero,802600 <__divsi3+0x54>
  8025c8:	08025300 	call	802530 <udivmodsi4>
  8025cc:	1007883a 	mov	r3,r2
  8025d0:	8005003a 	cmpeq	r2,r16,zero
  8025d4:	1000011e 	bne	r2,zero,8025dc <__divsi3+0x30>
  8025d8:	00c7c83a 	sub	r3,zero,r3
  8025dc:	1805883a 	mov	r2,r3
  8025e0:	dfc00117 	ldw	ra,4(sp)
  8025e4:	dc000017 	ldw	r16,0(sp)
  8025e8:	dec00204 	addi	sp,sp,8
  8025ec:	f800283a 	ret
  8025f0:	0109c83a 	sub	r4,zero,r4
  8025f4:	04000044 	movi	r16,1
  8025f8:	000d883a 	mov	r6,zero
  8025fc:	283ff20e 	bge	r5,zero,8025c8 <__divsi3+0x1c>
  802600:	014bc83a 	sub	r5,zero,r5
  802604:	8021003a 	cmpeq	r16,r16,zero
  802608:	003fef06 	br	8025c8 <__divsi3+0x1c>

0080260c <__modsi3>:
  80260c:	deffff04 	addi	sp,sp,-4
  802610:	dfc00015 	stw	ra,0(sp)
  802614:	01800044 	movi	r6,1
  802618:	2807883a 	mov	r3,r5
  80261c:	20000416 	blt	r4,zero,802630 <__modsi3+0x24>
  802620:	28000c16 	blt	r5,zero,802654 <__modsi3+0x48>
  802624:	dfc00017 	ldw	ra,0(sp)
  802628:	dec00104 	addi	sp,sp,4
  80262c:	08025301 	jmpi	802530 <udivmodsi4>
  802630:	0109c83a 	sub	r4,zero,r4
  802634:	28000b16 	blt	r5,zero,802664 <__modsi3+0x58>
  802638:	180b883a 	mov	r5,r3
  80263c:	01800044 	movi	r6,1
  802640:	08025300 	call	802530 <udivmodsi4>
  802644:	0085c83a 	sub	r2,zero,r2
  802648:	dfc00017 	ldw	ra,0(sp)
  80264c:	dec00104 	addi	sp,sp,4
  802650:	f800283a 	ret
  802654:	014bc83a 	sub	r5,zero,r5
  802658:	dfc00017 	ldw	ra,0(sp)
  80265c:	dec00104 	addi	sp,sp,4
  802660:	08025301 	jmpi	802530 <udivmodsi4>
  802664:	0147c83a 	sub	r3,zero,r5
  802668:	003ff306 	br	802638 <__modsi3+0x2c>

0080266c <__udivsi3>:
  80266c:	000d883a 	mov	r6,zero
  802670:	08025301 	jmpi	802530 <udivmodsi4>

00802674 <__umodsi3>:
  802674:	01800044 	movi	r6,1
  802678:	08025301 	jmpi	802530 <udivmodsi4>

0080267c <free>:
  80267c:	00802074 	movhi	r2,129
  802680:	10880c04 	addi	r2,r2,8240
  802684:	200b883a 	mov	r5,r4
  802688:	11000017 	ldw	r4,0(r2)
  80268c:	08075ac1 	jmpi	8075ac <_free_r>

00802690 <malloc>:
  802690:	00802074 	movhi	r2,129
  802694:	10880c04 	addi	r2,r2,8240
  802698:	200b883a 	mov	r5,r4
  80269c:	11000017 	ldw	r4,0(r2)
  8026a0:	08026a41 	jmpi	8026a4 <_malloc_r>

008026a4 <_malloc_r>:
  8026a4:	defff604 	addi	sp,sp,-40
  8026a8:	28c002c4 	addi	r3,r5,11
  8026ac:	00800584 	movi	r2,22
  8026b0:	dc800215 	stw	r18,8(sp)
  8026b4:	dfc00915 	stw	ra,36(sp)
  8026b8:	df000815 	stw	fp,32(sp)
  8026bc:	ddc00715 	stw	r23,28(sp)
  8026c0:	dd800615 	stw	r22,24(sp)
  8026c4:	dd400515 	stw	r21,20(sp)
  8026c8:	dd000415 	stw	r20,16(sp)
  8026cc:	dcc00315 	stw	r19,12(sp)
  8026d0:	dc400115 	stw	r17,4(sp)
  8026d4:	dc000015 	stw	r16,0(sp)
  8026d8:	2025883a 	mov	r18,r4
  8026dc:	10c01236 	bltu	r2,r3,802728 <_malloc_r+0x84>
  8026e0:	04400404 	movi	r17,16
  8026e4:	8940142e 	bgeu	r17,r5,802738 <_malloc_r+0x94>
  8026e8:	00800304 	movi	r2,12
  8026ec:	0007883a 	mov	r3,zero
  8026f0:	90800015 	stw	r2,0(r18)
  8026f4:	1805883a 	mov	r2,r3
  8026f8:	dfc00917 	ldw	ra,36(sp)
  8026fc:	df000817 	ldw	fp,32(sp)
  802700:	ddc00717 	ldw	r23,28(sp)
  802704:	dd800617 	ldw	r22,24(sp)
  802708:	dd400517 	ldw	r21,20(sp)
  80270c:	dd000417 	ldw	r20,16(sp)
  802710:	dcc00317 	ldw	r19,12(sp)
  802714:	dc800217 	ldw	r18,8(sp)
  802718:	dc400117 	ldw	r17,4(sp)
  80271c:	dc000017 	ldw	r16,0(sp)
  802720:	dec00a04 	addi	sp,sp,40
  802724:	f800283a 	ret
  802728:	00bffe04 	movi	r2,-8
  80272c:	18a2703a 	and	r17,r3,r2
  802730:	883fed16 	blt	r17,zero,8026e8 <_malloc_r+0x44>
  802734:	897fec36 	bltu	r17,r5,8026e8 <_malloc_r+0x44>
  802738:	9009883a 	mov	r4,r18
  80273c:	080c54c0 	call	80c54c <__malloc_lock>
  802740:	00807dc4 	movi	r2,503
  802744:	14402b2e 	bgeu	r2,r17,8027f4 <_malloc_r+0x150>
  802748:	8806d27a 	srli	r3,r17,9
  80274c:	18003f1e 	bne	r3,zero,80284c <_malloc_r+0x1a8>
  802750:	880cd0fa 	srli	r6,r17,3
  802754:	300490fa 	slli	r2,r6,3
  802758:	02c02074 	movhi	r11,129
  80275c:	5ac11504 	addi	r11,r11,1108
  802760:	12cb883a 	add	r5,r2,r11
  802764:	2c000317 	ldw	r16,12(r5)
  802768:	580f883a 	mov	r7,r11
  80276c:	2c00041e 	bne	r5,r16,802780 <_malloc_r+0xdc>
  802770:	00000a06 	br	80279c <_malloc_r+0xf8>
  802774:	1800860e 	bge	r3,zero,802990 <_malloc_r+0x2ec>
  802778:	84000317 	ldw	r16,12(r16)
  80277c:	2c000726 	beq	r5,r16,80279c <_malloc_r+0xf8>
  802780:	80800117 	ldw	r2,4(r16)
  802784:	00ffff04 	movi	r3,-4
  802788:	10c8703a 	and	r4,r2,r3
  80278c:	2447c83a 	sub	r3,r4,r17
  802790:	008003c4 	movi	r2,15
  802794:	10fff70e 	bge	r2,r3,802774 <_malloc_r+0xd0>
  802798:	31bfffc4 	addi	r6,r6,-1
  80279c:	32400044 	addi	r9,r6,1
  8027a0:	02802074 	movhi	r10,129
  8027a4:	52811704 	addi	r10,r10,1116
  8027a8:	54000217 	ldw	r16,8(r10)
  8027ac:	8280a026 	beq	r16,r10,802a30 <_malloc_r+0x38c>
  8027b0:	80800117 	ldw	r2,4(r16)
  8027b4:	00ffff04 	movi	r3,-4
  8027b8:	10ca703a 	and	r5,r2,r3
  8027bc:	2c4dc83a 	sub	r6,r5,r17
  8027c0:	008003c4 	movi	r2,15
  8027c4:	11808316 	blt	r2,r6,8029d4 <_malloc_r+0x330>
  8027c8:	52800315 	stw	r10,12(r10)
  8027cc:	52800215 	stw	r10,8(r10)
  8027d0:	30002916 	blt	r6,zero,802878 <_malloc_r+0x1d4>
  8027d4:	8147883a 	add	r3,r16,r5
  8027d8:	18800117 	ldw	r2,4(r3)
  8027dc:	9009883a 	mov	r4,r18
  8027e0:	10800054 	ori	r2,r2,1
  8027e4:	18800115 	stw	r2,4(r3)
  8027e8:	080c56c0 	call	80c56c <__malloc_unlock>
  8027ec:	80c00204 	addi	r3,r16,8
  8027f0:	003fc006 	br	8026f4 <_malloc_r+0x50>
  8027f4:	02c02074 	movhi	r11,129
  8027f8:	5ac11504 	addi	r11,r11,1108
  8027fc:	8ac5883a 	add	r2,r17,r11
  802800:	14000317 	ldw	r16,12(r2)
  802804:	580f883a 	mov	r7,r11
  802808:	8806d0fa 	srli	r3,r17,3
  80280c:	14006c26 	beq	r2,r16,8029c0 <_malloc_r+0x31c>
  802810:	80c00117 	ldw	r3,4(r16)
  802814:	00bfff04 	movi	r2,-4
  802818:	81800317 	ldw	r6,12(r16)
  80281c:	1886703a 	and	r3,r3,r2
  802820:	80c7883a 	add	r3,r16,r3
  802824:	18800117 	ldw	r2,4(r3)
  802828:	81400217 	ldw	r5,8(r16)
  80282c:	9009883a 	mov	r4,r18
  802830:	10800054 	ori	r2,r2,1
  802834:	18800115 	stw	r2,4(r3)
  802838:	31400215 	stw	r5,8(r6)
  80283c:	29800315 	stw	r6,12(r5)
  802840:	080c56c0 	call	80c56c <__malloc_unlock>
  802844:	80c00204 	addi	r3,r16,8
  802848:	003faa06 	br	8026f4 <_malloc_r+0x50>
  80284c:	00800104 	movi	r2,4
  802850:	10c0052e 	bgeu	r2,r3,802868 <_malloc_r+0x1c4>
  802854:	00800504 	movi	r2,20
  802858:	10c07836 	bltu	r2,r3,802a3c <_malloc_r+0x398>
  80285c:	198016c4 	addi	r6,r3,91
  802860:	300490fa 	slli	r2,r6,3
  802864:	003fbc06 	br	802758 <_malloc_r+0xb4>
  802868:	8804d1ba 	srli	r2,r17,6
  80286c:	11800e04 	addi	r6,r2,56
  802870:	300490fa 	slli	r2,r6,3
  802874:	003fb806 	br	802758 <_malloc_r+0xb4>
  802878:	00807fc4 	movi	r2,511
  80287c:	1140bb36 	bltu	r2,r5,802b6c <_malloc_r+0x4c8>
  802880:	2806d0fa 	srli	r3,r5,3
  802884:	573ffe04 	addi	fp,r10,-8
  802888:	00800044 	movi	r2,1
  80288c:	180890fa 	slli	r4,r3,3
  802890:	1807d0ba 	srai	r3,r3,2
  802894:	e1c00117 	ldw	r7,4(fp)
  802898:	5909883a 	add	r4,r11,r4
  80289c:	21400217 	ldw	r5,8(r4)
  8028a0:	10c4983a 	sll	r2,r2,r3
  8028a4:	81000315 	stw	r4,12(r16)
  8028a8:	81400215 	stw	r5,8(r16)
  8028ac:	388eb03a 	or	r7,r7,r2
  8028b0:	2c000315 	stw	r16,12(r5)
  8028b4:	24000215 	stw	r16,8(r4)
  8028b8:	e1c00115 	stw	r7,4(fp)
  8028bc:	4807883a 	mov	r3,r9
  8028c0:	4800cd16 	blt	r9,zero,802bf8 <_malloc_r+0x554>
  8028c4:	1807d0ba 	srai	r3,r3,2
  8028c8:	00800044 	movi	r2,1
  8028cc:	10c8983a 	sll	r4,r2,r3
  8028d0:	39004436 	bltu	r7,r4,8029e4 <_malloc_r+0x340>
  8028d4:	21c4703a 	and	r2,r4,r7
  8028d8:	10000a1e 	bne	r2,zero,802904 <_malloc_r+0x260>
  8028dc:	2109883a 	add	r4,r4,r4
  8028e0:	00bfff04 	movi	r2,-4
  8028e4:	4884703a 	and	r2,r9,r2
  8028e8:	3906703a 	and	r3,r7,r4
  8028ec:	12400104 	addi	r9,r2,4
  8028f0:	1800041e 	bne	r3,zero,802904 <_malloc_r+0x260>
  8028f4:	2109883a 	add	r4,r4,r4
  8028f8:	3904703a 	and	r2,r7,r4
  8028fc:	4a400104 	addi	r9,r9,4
  802900:	103ffc26 	beq	r2,zero,8028f4 <_malloc_r+0x250>
  802904:	480490fa 	slli	r2,r9,3
  802908:	4819883a 	mov	r12,r9
  80290c:	023fff04 	movi	r8,-4
  802910:	589b883a 	add	r13,r11,r2
  802914:	6807883a 	mov	r3,r13
  802918:	014003c4 	movi	r5,15
  80291c:	1c000317 	ldw	r16,12(r3)
  802920:	1c00041e 	bne	r3,r16,802934 <_malloc_r+0x290>
  802924:	0000a706 	br	802bc4 <_malloc_r+0x520>
  802928:	3000ab0e 	bge	r6,zero,802bd8 <_malloc_r+0x534>
  80292c:	84000317 	ldw	r16,12(r16)
  802930:	1c00a426 	beq	r3,r16,802bc4 <_malloc_r+0x520>
  802934:	80800117 	ldw	r2,4(r16)
  802938:	1204703a 	and	r2,r2,r8
  80293c:	144dc83a 	sub	r6,r2,r17
  802940:	29bff90e 	bge	r5,r6,802928 <_malloc_r+0x284>
  802944:	81000317 	ldw	r4,12(r16)
  802948:	80c00217 	ldw	r3,8(r16)
  80294c:	89400054 	ori	r5,r17,1
  802950:	8445883a 	add	r2,r16,r17
  802954:	20c00215 	stw	r3,8(r4)
  802958:	19000315 	stw	r4,12(r3)
  80295c:	81400115 	stw	r5,4(r16)
  802960:	1187883a 	add	r3,r2,r6
  802964:	31000054 	ori	r4,r6,1
  802968:	50800315 	stw	r2,12(r10)
  80296c:	50800215 	stw	r2,8(r10)
  802970:	19800015 	stw	r6,0(r3)
  802974:	11000115 	stw	r4,4(r2)
  802978:	12800215 	stw	r10,8(r2)
  80297c:	12800315 	stw	r10,12(r2)
  802980:	9009883a 	mov	r4,r18
  802984:	080c56c0 	call	80c56c <__malloc_unlock>
  802988:	80c00204 	addi	r3,r16,8
  80298c:	003f5906 	br	8026f4 <_malloc_r+0x50>
  802990:	8109883a 	add	r4,r16,r4
  802994:	20800117 	ldw	r2,4(r4)
  802998:	80c00217 	ldw	r3,8(r16)
  80299c:	81400317 	ldw	r5,12(r16)
  8029a0:	10800054 	ori	r2,r2,1
  8029a4:	20800115 	stw	r2,4(r4)
  8029a8:	28c00215 	stw	r3,8(r5)
  8029ac:	19400315 	stw	r5,12(r3)
  8029b0:	9009883a 	mov	r4,r18
  8029b4:	080c56c0 	call	80c56c <__malloc_unlock>
  8029b8:	80c00204 	addi	r3,r16,8
  8029bc:	003f4d06 	br	8026f4 <_malloc_r+0x50>
  8029c0:	80800204 	addi	r2,r16,8
  8029c4:	14000317 	ldw	r16,12(r2)
  8029c8:	143f911e 	bne	r2,r16,802810 <_malloc_r+0x16c>
  8029cc:	1a400084 	addi	r9,r3,2
  8029d0:	003f7306 	br	8027a0 <_malloc_r+0xfc>
  8029d4:	88c00054 	ori	r3,r17,1
  8029d8:	8445883a 	add	r2,r16,r17
  8029dc:	80c00115 	stw	r3,4(r16)
  8029e0:	003fdf06 	br	802960 <_malloc_r+0x2bc>
  8029e4:	e4000217 	ldw	r16,8(fp)
  8029e8:	00bfff04 	movi	r2,-4
  8029ec:	80c00117 	ldw	r3,4(r16)
  8029f0:	802d883a 	mov	r22,r16
  8029f4:	18aa703a 	and	r21,r3,r2
  8029f8:	ac401636 	bltu	r21,r17,802a54 <_malloc_r+0x3b0>
  8029fc:	ac49c83a 	sub	r4,r21,r17
  802a00:	008003c4 	movi	r2,15
  802a04:	1100130e 	bge	r2,r4,802a54 <_malloc_r+0x3b0>
  802a08:	88800054 	ori	r2,r17,1
  802a0c:	8447883a 	add	r3,r16,r17
  802a10:	80800115 	stw	r2,4(r16)
  802a14:	20800054 	ori	r2,r4,1
  802a18:	18800115 	stw	r2,4(r3)
  802a1c:	e0c00215 	stw	r3,8(fp)
  802a20:	9009883a 	mov	r4,r18
  802a24:	080c56c0 	call	80c56c <__malloc_unlock>
  802a28:	80c00204 	addi	r3,r16,8
  802a2c:	003f3106 	br	8026f4 <_malloc_r+0x50>
  802a30:	39c00117 	ldw	r7,4(r7)
  802a34:	573ffe04 	addi	fp,r10,-8
  802a38:	003fa006 	br	8028bc <_malloc_r+0x218>
  802a3c:	00801504 	movi	r2,84
  802a40:	10c06736 	bltu	r2,r3,802be0 <_malloc_r+0x53c>
  802a44:	8804d33a 	srli	r2,r17,12
  802a48:	11801b84 	addi	r6,r2,110
  802a4c:	300490fa 	slli	r2,r6,3
  802a50:	003f4106 	br	802758 <_malloc_r+0xb4>
  802a54:	d0a71817 	ldw	r2,-25504(gp)
  802a58:	d0e00117 	ldw	r3,-32764(gp)
  802a5c:	053fffc4 	movi	r20,-1
  802a60:	10800404 	addi	r2,r2,16
  802a64:	88a7883a 	add	r19,r17,r2
  802a68:	1d000326 	beq	r3,r20,802a78 <_malloc_r+0x3d4>
  802a6c:	98c3ffc4 	addi	r3,r19,4095
  802a70:	00bc0004 	movi	r2,-4096
  802a74:	18a6703a 	and	r19,r3,r2
  802a78:	9009883a 	mov	r4,r18
  802a7c:	980b883a 	mov	r5,r19
  802a80:	08035c00 	call	8035c0 <_sbrk_r>
  802a84:	1009883a 	mov	r4,r2
  802a88:	15000426 	beq	r2,r20,802a9c <_malloc_r+0x3f8>
  802a8c:	854b883a 	add	r5,r16,r21
  802a90:	1029883a 	mov	r20,r2
  802a94:	11405a2e 	bgeu	r2,r5,802c00 <_malloc_r+0x55c>
  802a98:	87000c26 	beq	r16,fp,802acc <_malloc_r+0x428>
  802a9c:	e4000217 	ldw	r16,8(fp)
  802aa0:	80c00117 	ldw	r3,4(r16)
  802aa4:	00bfff04 	movi	r2,-4
  802aa8:	1884703a 	and	r2,r3,r2
  802aac:	14400336 	bltu	r2,r17,802abc <_malloc_r+0x418>
  802ab0:	1449c83a 	sub	r4,r2,r17
  802ab4:	008003c4 	movi	r2,15
  802ab8:	113fd316 	blt	r2,r4,802a08 <_malloc_r+0x364>
  802abc:	9009883a 	mov	r4,r18
  802ac0:	080c56c0 	call	80c56c <__malloc_unlock>
  802ac4:	0007883a 	mov	r3,zero
  802ac8:	003f0a06 	br	8026f4 <_malloc_r+0x50>
  802acc:	05c02074 	movhi	r23,129
  802ad0:	bdcf3104 	addi	r23,r23,15556
  802ad4:	b8800017 	ldw	r2,0(r23)
  802ad8:	988d883a 	add	r6,r19,r2
  802adc:	b9800015 	stw	r6,0(r23)
  802ae0:	d0e00117 	ldw	r3,-32764(gp)
  802ae4:	00bfffc4 	movi	r2,-1
  802ae8:	18808e26 	beq	r3,r2,802d24 <_malloc_r+0x680>
  802aec:	2145c83a 	sub	r2,r4,r5
  802af0:	3085883a 	add	r2,r6,r2
  802af4:	b8800015 	stw	r2,0(r23)
  802af8:	20c001cc 	andi	r3,r4,7
  802afc:	18005f1e 	bne	r3,zero,802c7c <_malloc_r+0x5d8>
  802b00:	000b883a 	mov	r5,zero
  802b04:	a4c5883a 	add	r2,r20,r19
  802b08:	1083ffcc 	andi	r2,r2,4095
  802b0c:	00c40004 	movi	r3,4096
  802b10:	1887c83a 	sub	r3,r3,r2
  802b14:	28e7883a 	add	r19,r5,r3
  802b18:	9009883a 	mov	r4,r18
  802b1c:	980b883a 	mov	r5,r19
  802b20:	08035c00 	call	8035c0 <_sbrk_r>
  802b24:	1007883a 	mov	r3,r2
  802b28:	00bfffc4 	movi	r2,-1
  802b2c:	18807a26 	beq	r3,r2,802d18 <_malloc_r+0x674>
  802b30:	1d05c83a 	sub	r2,r3,r20
  802b34:	9885883a 	add	r2,r19,r2
  802b38:	10c00054 	ori	r3,r2,1
  802b3c:	b8800017 	ldw	r2,0(r23)
  802b40:	a021883a 	mov	r16,r20
  802b44:	a0c00115 	stw	r3,4(r20)
  802b48:	9885883a 	add	r2,r19,r2
  802b4c:	b8800015 	stw	r2,0(r23)
  802b50:	e5000215 	stw	r20,8(fp)
  802b54:	b7003626 	beq	r22,fp,802c30 <_malloc_r+0x58c>
  802b58:	018003c4 	movi	r6,15
  802b5c:	35404b36 	bltu	r6,r21,802c8c <_malloc_r+0x5e8>
  802b60:	00800044 	movi	r2,1
  802b64:	a0800115 	stw	r2,4(r20)
  802b68:	003fcd06 	br	802aa0 <_malloc_r+0x3fc>
  802b6c:	2808d27a 	srli	r4,r5,9
  802b70:	2000371e 	bne	r4,zero,802c50 <_malloc_r+0x5ac>
  802b74:	2808d0fa 	srli	r4,r5,3
  802b78:	200690fa 	slli	r3,r4,3
  802b7c:	1ad1883a 	add	r8,r3,r11
  802b80:	41800217 	ldw	r6,8(r8)
  802b84:	41805b26 	beq	r8,r6,802cf4 <_malloc_r+0x650>
  802b88:	30800117 	ldw	r2,4(r6)
  802b8c:	00ffff04 	movi	r3,-4
  802b90:	10c4703a 	and	r2,r2,r3
  802b94:	2880022e 	bgeu	r5,r2,802ba0 <_malloc_r+0x4fc>
  802b98:	31800217 	ldw	r6,8(r6)
  802b9c:	41bffa1e 	bne	r8,r6,802b88 <_malloc_r+0x4e4>
  802ba0:	32000317 	ldw	r8,12(r6)
  802ba4:	39c00117 	ldw	r7,4(r7)
  802ba8:	82000315 	stw	r8,12(r16)
  802bac:	81800215 	stw	r6,8(r16)
  802bb0:	07002074 	movhi	fp,129
  802bb4:	e7011504 	addi	fp,fp,1108
  802bb8:	34000315 	stw	r16,12(r6)
  802bbc:	44000215 	stw	r16,8(r8)
  802bc0:	003f3e06 	br	8028bc <_malloc_r+0x218>
  802bc4:	63000044 	addi	r12,r12,1
  802bc8:	608000cc 	andi	r2,r12,3
  802bcc:	10005d26 	beq	r2,zero,802d44 <_malloc_r+0x6a0>
  802bd0:	18c00204 	addi	r3,r3,8
  802bd4:	003f5106 	br	80291c <_malloc_r+0x278>
  802bd8:	8089883a 	add	r4,r16,r2
  802bdc:	003f6d06 	br	802994 <_malloc_r+0x2f0>
  802be0:	00805504 	movi	r2,340
  802be4:	10c02036 	bltu	r2,r3,802c68 <_malloc_r+0x5c4>
  802be8:	8804d3fa 	srli	r2,r17,15
  802bec:	11801dc4 	addi	r6,r2,119
  802bf0:	300490fa 	slli	r2,r6,3
  802bf4:	003ed806 	br	802758 <_malloc_r+0xb4>
  802bf8:	48c000c4 	addi	r3,r9,3
  802bfc:	003f3106 	br	8028c4 <_malloc_r+0x220>
  802c00:	05c02074 	movhi	r23,129
  802c04:	bdcf3104 	addi	r23,r23,15556
  802c08:	b8800017 	ldw	r2,0(r23)
  802c0c:	988d883a 	add	r6,r19,r2
  802c10:	b9800015 	stw	r6,0(r23)
  802c14:	293fb21e 	bne	r5,r4,802ae0 <_malloc_r+0x43c>
  802c18:	2083ffcc 	andi	r2,r4,4095
  802c1c:	103fb01e 	bne	r2,zero,802ae0 <_malloc_r+0x43c>
  802c20:	e4000217 	ldw	r16,8(fp)
  802c24:	9d45883a 	add	r2,r19,r21
  802c28:	10800054 	ori	r2,r2,1
  802c2c:	80800115 	stw	r2,4(r16)
  802c30:	b8c00017 	ldw	r3,0(r23)
  802c34:	d0a71917 	ldw	r2,-25500(gp)
  802c38:	10c0012e 	bgeu	r2,r3,802c40 <_malloc_r+0x59c>
  802c3c:	d0e71915 	stw	r3,-25500(gp)
  802c40:	d0a71a17 	ldw	r2,-25496(gp)
  802c44:	10ff962e 	bgeu	r2,r3,802aa0 <_malloc_r+0x3fc>
  802c48:	d0e71a15 	stw	r3,-25496(gp)
  802c4c:	003f9406 	br	802aa0 <_malloc_r+0x3fc>
  802c50:	00800104 	movi	r2,4
  802c54:	11001e36 	bltu	r2,r4,802cd0 <_malloc_r+0x62c>
  802c58:	2804d1ba 	srli	r2,r5,6
  802c5c:	11000e04 	addi	r4,r2,56
  802c60:	200690fa 	slli	r3,r4,3
  802c64:	003fc506 	br	802b7c <_malloc_r+0x4d8>
  802c68:	00815504 	movi	r2,1364
  802c6c:	10c01d2e 	bgeu	r2,r3,802ce4 <_malloc_r+0x640>
  802c70:	01801f84 	movi	r6,126
  802c74:	0080fc04 	movi	r2,1008
  802c78:	003eb706 	br	802758 <_malloc_r+0xb4>
  802c7c:	00800204 	movi	r2,8
  802c80:	10cbc83a 	sub	r5,r2,r3
  802c84:	2169883a 	add	r20,r4,r5
  802c88:	003f9e06 	br	802b04 <_malloc_r+0x460>
  802c8c:	00bffe04 	movi	r2,-8
  802c90:	a93ffd04 	addi	r4,r21,-12
  802c94:	2088703a 	and	r4,r4,r2
  802c98:	b10b883a 	add	r5,r22,r4
  802c9c:	00c00144 	movi	r3,5
  802ca0:	28c00215 	stw	r3,8(r5)
  802ca4:	28c00115 	stw	r3,4(r5)
  802ca8:	b0800117 	ldw	r2,4(r22)
  802cac:	1080004c 	andi	r2,r2,1
  802cb0:	2084b03a 	or	r2,r4,r2
  802cb4:	b0800115 	stw	r2,4(r22)
  802cb8:	313fdd2e 	bgeu	r6,r4,802c30 <_malloc_r+0x58c>
  802cbc:	b1400204 	addi	r5,r22,8
  802cc0:	9009883a 	mov	r4,r18
  802cc4:	08075ac0 	call	8075ac <_free_r>
  802cc8:	e4000217 	ldw	r16,8(fp)
  802ccc:	003fd806 	br	802c30 <_malloc_r+0x58c>
  802cd0:	00800504 	movi	r2,20
  802cd4:	11001536 	bltu	r2,r4,802d2c <_malloc_r+0x688>
  802cd8:	210016c4 	addi	r4,r4,91
  802cdc:	200690fa 	slli	r3,r4,3
  802ce0:	003fa606 	br	802b7c <_malloc_r+0x4d8>
  802ce4:	8804d4ba 	srli	r2,r17,18
  802ce8:	11801f04 	addi	r6,r2,124
  802cec:	300490fa 	slli	r2,r6,3
  802cf0:	003e9906 	br	802758 <_malloc_r+0xb4>
  802cf4:	2009d0ba 	srai	r4,r4,2
  802cf8:	01402074 	movhi	r5,129
  802cfc:	29411504 	addi	r5,r5,1108
  802d00:	00c00044 	movi	r3,1
  802d04:	28800117 	ldw	r2,4(r5)
  802d08:	1906983a 	sll	r3,r3,r4
  802d0c:	10c4b03a 	or	r2,r2,r3
  802d10:	28800115 	stw	r2,4(r5)
  802d14:	003fa306 	br	802ba4 <_malloc_r+0x500>
  802d18:	0027883a 	mov	r19,zero
  802d1c:	00c00044 	movi	r3,1
  802d20:	003f8606 	br	802b3c <_malloc_r+0x498>
  802d24:	d1200115 	stw	r4,-32764(gp)
  802d28:	003f7306 	br	802af8 <_malloc_r+0x454>
  802d2c:	00801504 	movi	r2,84
  802d30:	11001936 	bltu	r2,r4,802d98 <_malloc_r+0x6f4>
  802d34:	2804d33a 	srli	r2,r5,12
  802d38:	11001b84 	addi	r4,r2,110
  802d3c:	200690fa 	slli	r3,r4,3
  802d40:	003f8e06 	br	802b7c <_malloc_r+0x4d8>
  802d44:	480b883a 	mov	r5,r9
  802d48:	6807883a 	mov	r3,r13
  802d4c:	288000cc 	andi	r2,r5,3
  802d50:	18fffe04 	addi	r3,r3,-8
  802d54:	297fffc4 	addi	r5,r5,-1
  802d58:	10001526 	beq	r2,zero,802db0 <_malloc_r+0x70c>
  802d5c:	18800217 	ldw	r2,8(r3)
  802d60:	10fffa26 	beq	r2,r3,802d4c <_malloc_r+0x6a8>
  802d64:	2109883a 	add	r4,r4,r4
  802d68:	393f1e36 	bltu	r7,r4,8029e4 <_malloc_r+0x340>
  802d6c:	203f1d26 	beq	r4,zero,8029e4 <_malloc_r+0x340>
  802d70:	21c4703a 	and	r2,r4,r7
  802d74:	10000226 	beq	r2,zero,802d80 <_malloc_r+0x6dc>
  802d78:	6013883a 	mov	r9,r12
  802d7c:	003ee106 	br	802904 <_malloc_r+0x260>
  802d80:	2109883a 	add	r4,r4,r4
  802d84:	3904703a 	and	r2,r7,r4
  802d88:	63000104 	addi	r12,r12,4
  802d8c:	103ffc26 	beq	r2,zero,802d80 <_malloc_r+0x6dc>
  802d90:	6013883a 	mov	r9,r12
  802d94:	003edb06 	br	802904 <_malloc_r+0x260>
  802d98:	00805504 	movi	r2,340
  802d9c:	11000836 	bltu	r2,r4,802dc0 <_malloc_r+0x71c>
  802da0:	2804d3fa 	srli	r2,r5,15
  802da4:	11001dc4 	addi	r4,r2,119
  802da8:	200690fa 	slli	r3,r4,3
  802dac:	003f7306 	br	802b7c <_malloc_r+0x4d8>
  802db0:	0104303a 	nor	r2,zero,r4
  802db4:	388e703a 	and	r7,r7,r2
  802db8:	e1c00115 	stw	r7,4(fp)
  802dbc:	003fe906 	br	802d64 <_malloc_r+0x6c0>
  802dc0:	00815504 	movi	r2,1364
  802dc4:	1100032e 	bgeu	r2,r4,802dd4 <_malloc_r+0x730>
  802dc8:	01001f84 	movi	r4,126
  802dcc:	00c0fc04 	movi	r3,1008
  802dd0:	003f6a06 	br	802b7c <_malloc_r+0x4d8>
  802dd4:	2804d4ba 	srli	r2,r5,18
  802dd8:	11001f04 	addi	r4,r2,124
  802ddc:	200690fa 	slli	r3,r4,3
  802de0:	003f6606 	br	802b7c <_malloc_r+0x4d8>

00802de4 <memcpy>:
  802de4:	01c003c4 	movi	r7,15
  802de8:	2007883a 	mov	r3,r4
  802dec:	3980032e 	bgeu	r7,r6,802dfc <memcpy+0x18>
  802df0:	2904b03a 	or	r2,r5,r4
  802df4:	108000cc 	andi	r2,r2,3
  802df8:	10000926 	beq	r2,zero,802e20 <memcpy+0x3c>
  802dfc:	30000626 	beq	r6,zero,802e18 <memcpy+0x34>
  802e00:	30cd883a 	add	r6,r6,r3
  802e04:	28800003 	ldbu	r2,0(r5)
  802e08:	29400044 	addi	r5,r5,1
  802e0c:	18800005 	stb	r2,0(r3)
  802e10:	18c00044 	addi	r3,r3,1
  802e14:	30fffb1e 	bne	r6,r3,802e04 <memcpy+0x20>
  802e18:	2005883a 	mov	r2,r4
  802e1c:	f800283a 	ret
  802e20:	3811883a 	mov	r8,r7
  802e24:	200f883a 	mov	r7,r4
  802e28:	28c00017 	ldw	r3,0(r5)
  802e2c:	31bffc04 	addi	r6,r6,-16
  802e30:	38c00015 	stw	r3,0(r7)
  802e34:	28800117 	ldw	r2,4(r5)
  802e38:	38800115 	stw	r2,4(r7)
  802e3c:	28c00217 	ldw	r3,8(r5)
  802e40:	38c00215 	stw	r3,8(r7)
  802e44:	28800317 	ldw	r2,12(r5)
  802e48:	29400404 	addi	r5,r5,16
  802e4c:	38800315 	stw	r2,12(r7)
  802e50:	39c00404 	addi	r7,r7,16
  802e54:	41bff436 	bltu	r8,r6,802e28 <memcpy+0x44>
  802e58:	008000c4 	movi	r2,3
  802e5c:	1180072e 	bgeu	r2,r6,802e7c <memcpy+0x98>
  802e60:	1007883a 	mov	r3,r2
  802e64:	28800017 	ldw	r2,0(r5)
  802e68:	31bfff04 	addi	r6,r6,-4
  802e6c:	29400104 	addi	r5,r5,4
  802e70:	38800015 	stw	r2,0(r7)
  802e74:	39c00104 	addi	r7,r7,4
  802e78:	19bffa36 	bltu	r3,r6,802e64 <memcpy+0x80>
  802e7c:	3807883a 	mov	r3,r7
  802e80:	003fde06 	br	802dfc <memcpy+0x18>

00802e84 <printf>:
  802e84:	defffb04 	addi	sp,sp,-20
  802e88:	dfc00115 	stw	ra,4(sp)
  802e8c:	d9400215 	stw	r5,8(sp)
  802e90:	d9800315 	stw	r6,12(sp)
  802e94:	d9c00415 	stw	r7,16(sp)
  802e98:	00802074 	movhi	r2,129
  802e9c:	10880c04 	addi	r2,r2,8240
  802ea0:	10c00017 	ldw	r3,0(r2)
  802ea4:	200b883a 	mov	r5,r4
  802ea8:	d8800204 	addi	r2,sp,8
  802eac:	19000217 	ldw	r4,8(r3)
  802eb0:	100d883a 	mov	r6,r2
  802eb4:	d8800015 	stw	r2,0(sp)
  802eb8:	08056640 	call	805664 <__vfprintf_internal>
  802ebc:	dfc00117 	ldw	ra,4(sp)
  802ec0:	dec00504 	addi	sp,sp,20
  802ec4:	f800283a 	ret

00802ec8 <_printf_r>:
  802ec8:	defffc04 	addi	sp,sp,-16
  802ecc:	dfc00115 	stw	ra,4(sp)
  802ed0:	d9800215 	stw	r6,8(sp)
  802ed4:	d9c00315 	stw	r7,12(sp)
  802ed8:	280d883a 	mov	r6,r5
  802edc:	21400217 	ldw	r5,8(r4)
  802ee0:	d8c00204 	addi	r3,sp,8
  802ee4:	180f883a 	mov	r7,r3
  802ee8:	d8c00015 	stw	r3,0(sp)
  802eec:	08037b80 	call	8037b8 <___vfprintf_internal_r>
  802ef0:	dfc00117 	ldw	ra,4(sp)
  802ef4:	dec00404 	addi	sp,sp,16
  802ef8:	f800283a 	ret

00802efc <_puts_r>:
  802efc:	defff604 	addi	sp,sp,-40
  802f00:	dc400715 	stw	r17,28(sp)
  802f04:	2023883a 	mov	r17,r4
  802f08:	2809883a 	mov	r4,r5
  802f0c:	dfc00915 	stw	ra,36(sp)
  802f10:	dcc00815 	stw	r19,32(sp)
  802f14:	2827883a 	mov	r19,r5
  802f18:	08036300 	call	803630 <strlen>
  802f1c:	89400217 	ldw	r5,8(r17)
  802f20:	00c02074 	movhi	r3,129
  802f24:	18c01204 	addi	r3,r3,72
  802f28:	01c00044 	movi	r7,1
  802f2c:	12000044 	addi	r8,r2,1
  802f30:	d8c00515 	stw	r3,20(sp)
  802f34:	d9c00615 	stw	r7,24(sp)
  802f38:	d8c00304 	addi	r3,sp,12
  802f3c:	01c00084 	movi	r7,2
  802f40:	8809883a 	mov	r4,r17
  802f44:	d80d883a 	mov	r6,sp
  802f48:	d8c00015 	stw	r3,0(sp)
  802f4c:	dcc00315 	stw	r19,12(sp)
  802f50:	da000215 	stw	r8,8(sp)
  802f54:	d9c00115 	stw	r7,4(sp)
  802f58:	d8800415 	stw	r2,16(sp)
  802f5c:	08078c00 	call	8078c0 <__sfvwrite_r>
  802f60:	00ffffc4 	movi	r3,-1
  802f64:	10000626 	beq	r2,zero,802f80 <_puts_r+0x84>
  802f68:	1805883a 	mov	r2,r3
  802f6c:	dfc00917 	ldw	ra,36(sp)
  802f70:	dcc00817 	ldw	r19,32(sp)
  802f74:	dc400717 	ldw	r17,28(sp)
  802f78:	dec00a04 	addi	sp,sp,40
  802f7c:	f800283a 	ret
  802f80:	00c00284 	movi	r3,10
  802f84:	1805883a 	mov	r2,r3
  802f88:	dfc00917 	ldw	ra,36(sp)
  802f8c:	dcc00817 	ldw	r19,32(sp)
  802f90:	dc400717 	ldw	r17,28(sp)
  802f94:	dec00a04 	addi	sp,sp,40
  802f98:	f800283a 	ret

00802f9c <puts>:
  802f9c:	00802074 	movhi	r2,129
  802fa0:	10880c04 	addi	r2,r2,8240
  802fa4:	200b883a 	mov	r5,r4
  802fa8:	11000017 	ldw	r4,0(r2)
  802fac:	0802efc1 	jmpi	802efc <_puts_r>

00802fb0 <realloc>:
  802fb0:	01802074 	movhi	r6,129
  802fb4:	31880c04 	addi	r6,r6,8240
  802fb8:	2007883a 	mov	r3,r4
  802fbc:	31000017 	ldw	r4,0(r6)
  802fc0:	280d883a 	mov	r6,r5
  802fc4:	180b883a 	mov	r5,r3
  802fc8:	0802fcc1 	jmpi	802fcc <_realloc_r>

00802fcc <_realloc_r>:
  802fcc:	defff404 	addi	sp,sp,-48
  802fd0:	dd800815 	stw	r22,32(sp)
  802fd4:	dc800415 	stw	r18,16(sp)
  802fd8:	dc400315 	stw	r17,12(sp)
  802fdc:	dfc00b15 	stw	ra,44(sp)
  802fe0:	df000a15 	stw	fp,40(sp)
  802fe4:	ddc00915 	stw	r23,36(sp)
  802fe8:	dd400715 	stw	r21,28(sp)
  802fec:	dd000615 	stw	r20,24(sp)
  802ff0:	dcc00515 	stw	r19,20(sp)
  802ff4:	dc000215 	stw	r16,8(sp)
  802ff8:	2825883a 	mov	r18,r5
  802ffc:	3023883a 	mov	r17,r6
  803000:	202d883a 	mov	r22,r4
  803004:	2800c926 	beq	r5,zero,80332c <_realloc_r+0x360>
  803008:	080c54c0 	call	80c54c <__malloc_lock>
  80300c:	943ffe04 	addi	r16,r18,-8
  803010:	88c002c4 	addi	r3,r17,11
  803014:	00800584 	movi	r2,22
  803018:	82000117 	ldw	r8,4(r16)
  80301c:	10c01b2e 	bgeu	r2,r3,80308c <_realloc_r+0xc0>
  803020:	00bffe04 	movi	r2,-8
  803024:	188e703a 	and	r7,r3,r2
  803028:	3839883a 	mov	fp,r7
  80302c:	38001a16 	blt	r7,zero,803098 <_realloc_r+0xcc>
  803030:	e4401936 	bltu	fp,r17,803098 <_realloc_r+0xcc>
  803034:	013fff04 	movi	r4,-4
  803038:	4126703a 	and	r19,r8,r4
  80303c:	99c02616 	blt	r19,r7,8030d8 <_realloc_r+0x10c>
  803040:	802b883a 	mov	r21,r16
  803044:	9829883a 	mov	r20,r19
  803048:	84000204 	addi	r16,r16,8
  80304c:	a80f883a 	mov	r7,r21
  803050:	a70dc83a 	sub	r6,r20,fp
  803054:	008003c4 	movi	r2,15
  803058:	1180c136 	bltu	r2,r6,803360 <_realloc_r+0x394>
  80305c:	38800117 	ldw	r2,4(r7)
  803060:	a549883a 	add	r4,r20,r21
  803064:	1080004c 	andi	r2,r2,1
  803068:	a084b03a 	or	r2,r20,r2
  80306c:	38800115 	stw	r2,4(r7)
  803070:	20c00117 	ldw	r3,4(r4)
  803074:	18c00054 	ori	r3,r3,1
  803078:	20c00115 	stw	r3,4(r4)
  80307c:	b009883a 	mov	r4,r22
  803080:	080c56c0 	call	80c56c <__malloc_unlock>
  803084:	8023883a 	mov	r17,r16
  803088:	00000606 	br	8030a4 <_realloc_r+0xd8>
  80308c:	01c00404 	movi	r7,16
  803090:	3839883a 	mov	fp,r7
  803094:	e47fe72e 	bgeu	fp,r17,803034 <_realloc_r+0x68>
  803098:	00800304 	movi	r2,12
  80309c:	0023883a 	mov	r17,zero
  8030a0:	b0800015 	stw	r2,0(r22)
  8030a4:	8805883a 	mov	r2,r17
  8030a8:	dfc00b17 	ldw	ra,44(sp)
  8030ac:	df000a17 	ldw	fp,40(sp)
  8030b0:	ddc00917 	ldw	r23,36(sp)
  8030b4:	dd800817 	ldw	r22,32(sp)
  8030b8:	dd400717 	ldw	r21,28(sp)
  8030bc:	dd000617 	ldw	r20,24(sp)
  8030c0:	dcc00517 	ldw	r19,20(sp)
  8030c4:	dc800417 	ldw	r18,16(sp)
  8030c8:	dc400317 	ldw	r17,12(sp)
  8030cc:	dc000217 	ldw	r16,8(sp)
  8030d0:	dec00c04 	addi	sp,sp,48
  8030d4:	f800283a 	ret
  8030d8:	00802074 	movhi	r2,129
  8030dc:	10811504 	addi	r2,r2,1108
  8030e0:	12400217 	ldw	r9,8(r2)
  8030e4:	84cd883a 	add	r6,r16,r19
  8030e8:	802b883a 	mov	r21,r16
  8030ec:	3240b926 	beq	r6,r9,8033d4 <_realloc_r+0x408>
  8030f0:	31400117 	ldw	r5,4(r6)
  8030f4:	00bfff84 	movi	r2,-2
  8030f8:	2884703a 	and	r2,r5,r2
  8030fc:	1185883a 	add	r2,r2,r6
  803100:	10c00117 	ldw	r3,4(r2)
  803104:	18c0004c 	andi	r3,r3,1
  803108:	1807003a 	cmpeq	r3,r3,zero
  80310c:	1800a326 	beq	r3,zero,80339c <_realloc_r+0x3d0>
  803110:	2908703a 	and	r4,r5,r4
  803114:	9929883a 	add	r20,r19,r4
  803118:	a1c0a30e 	bge	r20,r7,8033a8 <_realloc_r+0x3dc>
  80311c:	4080004c 	andi	r2,r8,1
  803120:	1000551e 	bne	r2,zero,803278 <_realloc_r+0x2ac>
  803124:	80800017 	ldw	r2,0(r16)
  803128:	80afc83a 	sub	r23,r16,r2
  80312c:	b8c00117 	ldw	r3,4(r23)
  803130:	00bfff04 	movi	r2,-4
  803134:	1884703a 	and	r2,r3,r2
  803138:	30002e26 	beq	r6,zero,8031f4 <_realloc_r+0x228>
  80313c:	3240b926 	beq	r6,r9,803424 <_realloc_r+0x458>
  803140:	98a9883a 	add	r20,r19,r2
  803144:	2509883a 	add	r4,r4,r20
  803148:	d9000015 	stw	r4,0(sp)
  80314c:	21c02a16 	blt	r4,r7,8031f8 <_realloc_r+0x22c>
  803150:	30800317 	ldw	r2,12(r6)
  803154:	30c00217 	ldw	r3,8(r6)
  803158:	01400904 	movi	r5,36
  80315c:	99bfff04 	addi	r6,r19,-4
  803160:	18800315 	stw	r2,12(r3)
  803164:	10c00215 	stw	r3,8(r2)
  803168:	b9000317 	ldw	r4,12(r23)
  80316c:	b8800217 	ldw	r2,8(r23)
  803170:	b82b883a 	mov	r21,r23
  803174:	bc000204 	addi	r16,r23,8
  803178:	20800215 	stw	r2,8(r4)
  80317c:	11000315 	stw	r4,12(r2)
  803180:	2980e436 	bltu	r5,r6,803514 <_realloc_r+0x548>
  803184:	008004c4 	movi	r2,19
  803188:	9009883a 	mov	r4,r18
  80318c:	8011883a 	mov	r8,r16
  803190:	11800f2e 	bgeu	r2,r6,8031d0 <_realloc_r+0x204>
  803194:	90800017 	ldw	r2,0(r18)
  803198:	ba000404 	addi	r8,r23,16
  80319c:	91000204 	addi	r4,r18,8
  8031a0:	b8800215 	stw	r2,8(r23)
  8031a4:	90c00117 	ldw	r3,4(r18)
  8031a8:	008006c4 	movi	r2,27
  8031ac:	b8c00315 	stw	r3,12(r23)
  8031b0:	1180072e 	bgeu	r2,r6,8031d0 <_realloc_r+0x204>
  8031b4:	90c00217 	ldw	r3,8(r18)
  8031b8:	ba000604 	addi	r8,r23,24
  8031bc:	91000404 	addi	r4,r18,16
  8031c0:	b8c00415 	stw	r3,16(r23)
  8031c4:	90800317 	ldw	r2,12(r18)
  8031c8:	b8800515 	stw	r2,20(r23)
  8031cc:	3140e726 	beq	r6,r5,80356c <_realloc_r+0x5a0>
  8031d0:	20800017 	ldw	r2,0(r4)
  8031d4:	dd000017 	ldw	r20,0(sp)
  8031d8:	b80f883a 	mov	r7,r23
  8031dc:	40800015 	stw	r2,0(r8)
  8031e0:	20c00117 	ldw	r3,4(r4)
  8031e4:	40c00115 	stw	r3,4(r8)
  8031e8:	20800217 	ldw	r2,8(r4)
  8031ec:	40800215 	stw	r2,8(r8)
  8031f0:	003f9706 	br	803050 <_realloc_r+0x84>
  8031f4:	98a9883a 	add	r20,r19,r2
  8031f8:	a1c01f16 	blt	r20,r7,803278 <_realloc_r+0x2ac>
  8031fc:	b8c00317 	ldw	r3,12(r23)
  803200:	b8800217 	ldw	r2,8(r23)
  803204:	99bfff04 	addi	r6,r19,-4
  803208:	01400904 	movi	r5,36
  80320c:	b82b883a 	mov	r21,r23
  803210:	18800215 	stw	r2,8(r3)
  803214:	10c00315 	stw	r3,12(r2)
  803218:	bc000204 	addi	r16,r23,8
  80321c:	2980c336 	bltu	r5,r6,80352c <_realloc_r+0x560>
  803220:	008004c4 	movi	r2,19
  803224:	9009883a 	mov	r4,r18
  803228:	8011883a 	mov	r8,r16
  80322c:	11800f2e 	bgeu	r2,r6,80326c <_realloc_r+0x2a0>
  803230:	90800017 	ldw	r2,0(r18)
  803234:	ba000404 	addi	r8,r23,16
  803238:	91000204 	addi	r4,r18,8
  80323c:	b8800215 	stw	r2,8(r23)
  803240:	90c00117 	ldw	r3,4(r18)
  803244:	008006c4 	movi	r2,27
  803248:	b8c00315 	stw	r3,12(r23)
  80324c:	1180072e 	bgeu	r2,r6,80326c <_realloc_r+0x2a0>
  803250:	90c00217 	ldw	r3,8(r18)
  803254:	ba000604 	addi	r8,r23,24
  803258:	91000404 	addi	r4,r18,16
  80325c:	b8c00415 	stw	r3,16(r23)
  803260:	90800317 	ldw	r2,12(r18)
  803264:	b8800515 	stw	r2,20(r23)
  803268:	3140c726 	beq	r6,r5,803588 <_realloc_r+0x5bc>
  80326c:	20800017 	ldw	r2,0(r4)
  803270:	b80f883a 	mov	r7,r23
  803274:	003fd906 	br	8031dc <_realloc_r+0x210>
  803278:	880b883a 	mov	r5,r17
  80327c:	b009883a 	mov	r4,r22
  803280:	08026a40 	call	8026a4 <_malloc_r>
  803284:	1023883a 	mov	r17,r2
  803288:	10002526 	beq	r2,zero,803320 <_realloc_r+0x354>
  80328c:	80800117 	ldw	r2,4(r16)
  803290:	00ffff84 	movi	r3,-2
  803294:	893ffe04 	addi	r4,r17,-8
  803298:	10c4703a 	and	r2,r2,r3
  80329c:	8085883a 	add	r2,r16,r2
  8032a0:	20809526 	beq	r4,r2,8034f8 <_realloc_r+0x52c>
  8032a4:	99bfff04 	addi	r6,r19,-4
  8032a8:	01c00904 	movi	r7,36
  8032ac:	39804536 	bltu	r7,r6,8033c4 <_realloc_r+0x3f8>
  8032b0:	008004c4 	movi	r2,19
  8032b4:	9009883a 	mov	r4,r18
  8032b8:	880b883a 	mov	r5,r17
  8032bc:	11800f2e 	bgeu	r2,r6,8032fc <_realloc_r+0x330>
  8032c0:	90800017 	ldw	r2,0(r18)
  8032c4:	89400204 	addi	r5,r17,8
  8032c8:	91000204 	addi	r4,r18,8
  8032cc:	88800015 	stw	r2,0(r17)
  8032d0:	90c00117 	ldw	r3,4(r18)
  8032d4:	008006c4 	movi	r2,27
  8032d8:	88c00115 	stw	r3,4(r17)
  8032dc:	1180072e 	bgeu	r2,r6,8032fc <_realloc_r+0x330>
  8032e0:	90c00217 	ldw	r3,8(r18)
  8032e4:	89400404 	addi	r5,r17,16
  8032e8:	91000404 	addi	r4,r18,16
  8032ec:	88c00215 	stw	r3,8(r17)
  8032f0:	90800317 	ldw	r2,12(r18)
  8032f4:	88800315 	stw	r2,12(r17)
  8032f8:	31c09126 	beq	r6,r7,803540 <_realloc_r+0x574>
  8032fc:	20800017 	ldw	r2,0(r4)
  803300:	28800015 	stw	r2,0(r5)
  803304:	20c00117 	ldw	r3,4(r4)
  803308:	28c00115 	stw	r3,4(r5)
  80330c:	20800217 	ldw	r2,8(r4)
  803310:	28800215 	stw	r2,8(r5)
  803314:	900b883a 	mov	r5,r18
  803318:	b009883a 	mov	r4,r22
  80331c:	08075ac0 	call	8075ac <_free_r>
  803320:	b009883a 	mov	r4,r22
  803324:	080c56c0 	call	80c56c <__malloc_unlock>
  803328:	003f5e06 	br	8030a4 <_realloc_r+0xd8>
  80332c:	300b883a 	mov	r5,r6
  803330:	dfc00b17 	ldw	ra,44(sp)
  803334:	df000a17 	ldw	fp,40(sp)
  803338:	ddc00917 	ldw	r23,36(sp)
  80333c:	dd800817 	ldw	r22,32(sp)
  803340:	dd400717 	ldw	r21,28(sp)
  803344:	dd000617 	ldw	r20,24(sp)
  803348:	dcc00517 	ldw	r19,20(sp)
  80334c:	dc800417 	ldw	r18,16(sp)
  803350:	dc400317 	ldw	r17,12(sp)
  803354:	dc000217 	ldw	r16,8(sp)
  803358:	dec00c04 	addi	sp,sp,48
  80335c:	08026a41 	jmpi	8026a4 <_malloc_r>
  803360:	38800117 	ldw	r2,4(r7)
  803364:	e54b883a 	add	r5,fp,r21
  803368:	31000054 	ori	r4,r6,1
  80336c:	1080004c 	andi	r2,r2,1
  803370:	1704b03a 	or	r2,r2,fp
  803374:	38800115 	stw	r2,4(r7)
  803378:	29000115 	stw	r4,4(r5)
  80337c:	2987883a 	add	r3,r5,r6
  803380:	18800117 	ldw	r2,4(r3)
  803384:	29400204 	addi	r5,r5,8
  803388:	b009883a 	mov	r4,r22
  80338c:	10800054 	ori	r2,r2,1
  803390:	18800115 	stw	r2,4(r3)
  803394:	08075ac0 	call	8075ac <_free_r>
  803398:	003f3806 	br	80307c <_realloc_r+0xb0>
  80339c:	000d883a 	mov	r6,zero
  8033a0:	0009883a 	mov	r4,zero
  8033a4:	003f5d06 	br	80311c <_realloc_r+0x150>
  8033a8:	30c00217 	ldw	r3,8(r6)
  8033ac:	30800317 	ldw	r2,12(r6)
  8033b0:	800f883a 	mov	r7,r16
  8033b4:	84000204 	addi	r16,r16,8
  8033b8:	10c00215 	stw	r3,8(r2)
  8033bc:	18800315 	stw	r2,12(r3)
  8033c0:	003f2306 	br	803050 <_realloc_r+0x84>
  8033c4:	8809883a 	mov	r4,r17
  8033c8:	900b883a 	mov	r5,r18
  8033cc:	08082180 	call	808218 <memmove>
  8033d0:	003fd006 	br	803314 <_realloc_r+0x348>
  8033d4:	30800117 	ldw	r2,4(r6)
  8033d8:	e0c00404 	addi	r3,fp,16
  8033dc:	1108703a 	and	r4,r2,r4
  8033e0:	9905883a 	add	r2,r19,r4
  8033e4:	10ff4d16 	blt	r2,r3,80311c <_realloc_r+0x150>
  8033e8:	1705c83a 	sub	r2,r2,fp
  8033ec:	870b883a 	add	r5,r16,fp
  8033f0:	10800054 	ori	r2,r2,1
  8033f4:	28800115 	stw	r2,4(r5)
  8033f8:	80c00117 	ldw	r3,4(r16)
  8033fc:	00802074 	movhi	r2,129
  803400:	10811504 	addi	r2,r2,1108
  803404:	b009883a 	mov	r4,r22
  803408:	18c0004c 	andi	r3,r3,1
  80340c:	e0c6b03a 	or	r3,fp,r3
  803410:	11400215 	stw	r5,8(r2)
  803414:	80c00115 	stw	r3,4(r16)
  803418:	080c56c0 	call	80c56c <__malloc_unlock>
  80341c:	84400204 	addi	r17,r16,8
  803420:	003f2006 	br	8030a4 <_realloc_r+0xd8>
  803424:	98a9883a 	add	r20,r19,r2
  803428:	2509883a 	add	r4,r4,r20
  80342c:	e0800404 	addi	r2,fp,16
  803430:	d9000115 	stw	r4,4(sp)
  803434:	20bf7016 	blt	r4,r2,8031f8 <_realloc_r+0x22c>
  803438:	b8c00317 	ldw	r3,12(r23)
  80343c:	b8800217 	ldw	r2,8(r23)
  803440:	99bfff04 	addi	r6,r19,-4
  803444:	01400904 	movi	r5,36
  803448:	18800215 	stw	r2,8(r3)
  80344c:	10c00315 	stw	r3,12(r2)
  803450:	bc400204 	addi	r17,r23,8
  803454:	29804136 	bltu	r5,r6,80355c <_realloc_r+0x590>
  803458:	008004c4 	movi	r2,19
  80345c:	9009883a 	mov	r4,r18
  803460:	880f883a 	mov	r7,r17
  803464:	11800f2e 	bgeu	r2,r6,8034a4 <_realloc_r+0x4d8>
  803468:	90800017 	ldw	r2,0(r18)
  80346c:	b9c00404 	addi	r7,r23,16
  803470:	91000204 	addi	r4,r18,8
  803474:	b8800215 	stw	r2,8(r23)
  803478:	90c00117 	ldw	r3,4(r18)
  80347c:	008006c4 	movi	r2,27
  803480:	b8c00315 	stw	r3,12(r23)
  803484:	1180072e 	bgeu	r2,r6,8034a4 <_realloc_r+0x4d8>
  803488:	90c00217 	ldw	r3,8(r18)
  80348c:	b9c00604 	addi	r7,r23,24
  803490:	91000404 	addi	r4,r18,16
  803494:	b8c00415 	stw	r3,16(r23)
  803498:	90800317 	ldw	r2,12(r18)
  80349c:	b8800515 	stw	r2,20(r23)
  8034a0:	31404026 	beq	r6,r5,8035a4 <_realloc_r+0x5d8>
  8034a4:	20800017 	ldw	r2,0(r4)
  8034a8:	38800015 	stw	r2,0(r7)
  8034ac:	20c00117 	ldw	r3,4(r4)
  8034b0:	38c00115 	stw	r3,4(r7)
  8034b4:	20800217 	ldw	r2,8(r4)
  8034b8:	38800215 	stw	r2,8(r7)
  8034bc:	d8c00117 	ldw	r3,4(sp)
  8034c0:	bf0b883a 	add	r5,r23,fp
  8034c4:	b009883a 	mov	r4,r22
  8034c8:	1f05c83a 	sub	r2,r3,fp
  8034cc:	10800054 	ori	r2,r2,1
  8034d0:	28800115 	stw	r2,4(r5)
  8034d4:	b8c00117 	ldw	r3,4(r23)
  8034d8:	00802074 	movhi	r2,129
  8034dc:	10811504 	addi	r2,r2,1108
  8034e0:	11400215 	stw	r5,8(r2)
  8034e4:	18c0004c 	andi	r3,r3,1
  8034e8:	e0c6b03a 	or	r3,fp,r3
  8034ec:	b8c00115 	stw	r3,4(r23)
  8034f0:	080c56c0 	call	80c56c <__malloc_unlock>
  8034f4:	003eeb06 	br	8030a4 <_realloc_r+0xd8>
  8034f8:	20800117 	ldw	r2,4(r4)
  8034fc:	00ffff04 	movi	r3,-4
  803500:	800f883a 	mov	r7,r16
  803504:	10c4703a 	and	r2,r2,r3
  803508:	98a9883a 	add	r20,r19,r2
  80350c:	84000204 	addi	r16,r16,8
  803510:	003ecf06 	br	803050 <_realloc_r+0x84>
  803514:	900b883a 	mov	r5,r18
  803518:	8009883a 	mov	r4,r16
  80351c:	08082180 	call	808218 <memmove>
  803520:	dd000017 	ldw	r20,0(sp)
  803524:	b80f883a 	mov	r7,r23
  803528:	003ec906 	br	803050 <_realloc_r+0x84>
  80352c:	900b883a 	mov	r5,r18
  803530:	8009883a 	mov	r4,r16
  803534:	08082180 	call	808218 <memmove>
  803538:	b80f883a 	mov	r7,r23
  80353c:	003ec406 	br	803050 <_realloc_r+0x84>
  803540:	90c00417 	ldw	r3,16(r18)
  803544:	89400604 	addi	r5,r17,24
  803548:	91000604 	addi	r4,r18,24
  80354c:	88c00415 	stw	r3,16(r17)
  803550:	90800517 	ldw	r2,20(r18)
  803554:	88800515 	stw	r2,20(r17)
  803558:	003f6806 	br	8032fc <_realloc_r+0x330>
  80355c:	900b883a 	mov	r5,r18
  803560:	8809883a 	mov	r4,r17
  803564:	08082180 	call	808218 <memmove>
  803568:	003fd406 	br	8034bc <_realloc_r+0x4f0>
  80356c:	90c00417 	ldw	r3,16(r18)
  803570:	91000604 	addi	r4,r18,24
  803574:	ba000804 	addi	r8,r23,32
  803578:	b8c00615 	stw	r3,24(r23)
  80357c:	90800517 	ldw	r2,20(r18)
  803580:	b8800715 	stw	r2,28(r23)
  803584:	003f1206 	br	8031d0 <_realloc_r+0x204>
  803588:	90c00417 	ldw	r3,16(r18)
  80358c:	91000604 	addi	r4,r18,24
  803590:	ba000804 	addi	r8,r23,32
  803594:	b8c00615 	stw	r3,24(r23)
  803598:	90800517 	ldw	r2,20(r18)
  80359c:	b8800715 	stw	r2,28(r23)
  8035a0:	003f3206 	br	80326c <_realloc_r+0x2a0>
  8035a4:	90c00417 	ldw	r3,16(r18)
  8035a8:	91000604 	addi	r4,r18,24
  8035ac:	b9c00804 	addi	r7,r23,32
  8035b0:	b8c00615 	stw	r3,24(r23)
  8035b4:	90800517 	ldw	r2,20(r18)
  8035b8:	b8800715 	stw	r2,28(r23)
  8035bc:	003fb906 	br	8034a4 <_realloc_r+0x4d8>

008035c0 <_sbrk_r>:
  8035c0:	defffd04 	addi	sp,sp,-12
  8035c4:	dc000015 	stw	r16,0(sp)
  8035c8:	04002074 	movhi	r16,129
  8035cc:	840f2504 	addi	r16,r16,15508
  8035d0:	dc400115 	stw	r17,4(sp)
  8035d4:	80000015 	stw	zero,0(r16)
  8035d8:	2023883a 	mov	r17,r4
  8035dc:	2809883a 	mov	r4,r5
  8035e0:	dfc00215 	stw	ra,8(sp)
  8035e4:	080c76c0 	call	80c76c <sbrk>
  8035e8:	1007883a 	mov	r3,r2
  8035ec:	00bfffc4 	movi	r2,-1
  8035f0:	18800626 	beq	r3,r2,80360c <_sbrk_r+0x4c>
  8035f4:	1805883a 	mov	r2,r3
  8035f8:	dfc00217 	ldw	ra,8(sp)
  8035fc:	dc400117 	ldw	r17,4(sp)
  803600:	dc000017 	ldw	r16,0(sp)
  803604:	dec00304 	addi	sp,sp,12
  803608:	f800283a 	ret
  80360c:	80800017 	ldw	r2,0(r16)
  803610:	103ff826 	beq	r2,zero,8035f4 <_sbrk_r+0x34>
  803614:	88800015 	stw	r2,0(r17)
  803618:	1805883a 	mov	r2,r3
  80361c:	dfc00217 	ldw	ra,8(sp)
  803620:	dc400117 	ldw	r17,4(sp)
  803624:	dc000017 	ldw	r16,0(sp)
  803628:	dec00304 	addi	sp,sp,12
  80362c:	f800283a 	ret

00803630 <strlen>:
  803630:	208000cc 	andi	r2,r4,3
  803634:	2011883a 	mov	r8,r4
  803638:	1000161e 	bne	r2,zero,803694 <strlen+0x64>
  80363c:	20c00017 	ldw	r3,0(r4)
  803640:	017fbff4 	movhi	r5,65279
  803644:	297fbfc4 	addi	r5,r5,-257
  803648:	01e02074 	movhi	r7,32897
  80364c:	39e02004 	addi	r7,r7,-32640
  803650:	1945883a 	add	r2,r3,r5
  803654:	11c4703a 	and	r2,r2,r7
  803658:	00c6303a 	nor	r3,zero,r3
  80365c:	1886703a 	and	r3,r3,r2
  803660:	18000c1e 	bne	r3,zero,803694 <strlen+0x64>
  803664:	280d883a 	mov	r6,r5
  803668:	380b883a 	mov	r5,r7
  80366c:	21000104 	addi	r4,r4,4
  803670:	20800017 	ldw	r2,0(r4)
  803674:	1187883a 	add	r3,r2,r6
  803678:	1946703a 	and	r3,r3,r5
  80367c:	0084303a 	nor	r2,zero,r2
  803680:	10c4703a 	and	r2,r2,r3
  803684:	103ff926 	beq	r2,zero,80366c <strlen+0x3c>
  803688:	20800007 	ldb	r2,0(r4)
  80368c:	10000326 	beq	r2,zero,80369c <strlen+0x6c>
  803690:	21000044 	addi	r4,r4,1
  803694:	20800007 	ldb	r2,0(r4)
  803698:	103ffd1e 	bne	r2,zero,803690 <strlen+0x60>
  80369c:	2205c83a 	sub	r2,r4,r8
  8036a0:	f800283a 	ret

008036a4 <strncpy>:
  8036a4:	2904b03a 	or	r2,r5,r4
  8036a8:	108000cc 	andi	r2,r2,3
  8036ac:	00c000c4 	movi	r3,3
  8036b0:	1000291e 	bne	r2,zero,803758 <strncpy+0xb4>
  8036b4:	1980282e 	bgeu	r3,r6,803758 <strncpy+0xb4>
  8036b8:	1817883a 	mov	r11,r3
  8036bc:	2011883a 	mov	r8,r4
  8036c0:	02bfbff4 	movhi	r10,65279
  8036c4:	52bfbfc4 	addi	r10,r10,-257
  8036c8:	02602074 	movhi	r9,32897
  8036cc:	4a602004 	addi	r9,r9,-32640
  8036d0:	29c00017 	ldw	r7,0(r5)
  8036d4:	3a85883a 	add	r2,r7,r10
  8036d8:	01c6303a 	nor	r3,zero,r7
  8036dc:	10c4703a 	and	r2,r2,r3
  8036e0:	1244703a 	and	r2,r2,r9
  8036e4:	1000051e 	bne	r2,zero,8036fc <strncpy+0x58>
  8036e8:	31bfff04 	addi	r6,r6,-4
  8036ec:	41c00015 	stw	r7,0(r8)
  8036f0:	29400104 	addi	r5,r5,4
  8036f4:	42000104 	addi	r8,r8,4
  8036f8:	59bff536 	bltu	r11,r6,8036d0 <strncpy+0x2c>
  8036fc:	400f883a 	mov	r7,r8
  803700:	30001326 	beq	r6,zero,803750 <strncpy+0xac>
  803704:	28800003 	ldbu	r2,0(r5)
  803708:	31bfffc4 	addi	r6,r6,-1
  80370c:	38c00044 	addi	r3,r7,1
  803710:	38800005 	stb	r2,0(r7)
  803714:	10000826 	beq	r2,zero,803738 <strncpy+0x94>
  803718:	29400044 	addi	r5,r5,1
  80371c:	30000c26 	beq	r6,zero,803750 <strncpy+0xac>
  803720:	28800003 	ldbu	r2,0(r5)
  803724:	31bfffc4 	addi	r6,r6,-1
  803728:	29400044 	addi	r5,r5,1
  80372c:	18800005 	stb	r2,0(r3)
  803730:	18c00044 	addi	r3,r3,1
  803734:	103ff91e 	bne	r2,zero,80371c <strncpy+0x78>
  803738:	30000526 	beq	r6,zero,803750 <strncpy+0xac>
  80373c:	1805883a 	mov	r2,r3
  803740:	30cd883a 	add	r6,r6,r3
  803744:	10000005 	stb	zero,0(r2)
  803748:	10800044 	addi	r2,r2,1
  80374c:	30bffd1e 	bne	r6,r2,803744 <strncpy+0xa0>
  803750:	2005883a 	mov	r2,r4
  803754:	f800283a 	ret
  803758:	200f883a 	mov	r7,r4
  80375c:	003fe806 	br	803700 <strncpy+0x5c>

00803760 <__sprint_r>:
  803760:	30800217 	ldw	r2,8(r6)
  803764:	defffe04 	addi	sp,sp,-8
  803768:	dc000015 	stw	r16,0(sp)
  80376c:	dfc00115 	stw	ra,4(sp)
  803770:	3021883a 	mov	r16,r6
  803774:	0007883a 	mov	r3,zero
  803778:	1000061e 	bne	r2,zero,803794 <__sprint_r+0x34>
  80377c:	1805883a 	mov	r2,r3
  803780:	30000115 	stw	zero,4(r6)
  803784:	dfc00117 	ldw	ra,4(sp)
  803788:	dc000017 	ldw	r16,0(sp)
  80378c:	dec00204 	addi	sp,sp,8
  803790:	f800283a 	ret
  803794:	08078c00 	call	8078c0 <__sfvwrite_r>
  803798:	1007883a 	mov	r3,r2
  80379c:	1805883a 	mov	r2,r3
  8037a0:	80000115 	stw	zero,4(r16)
  8037a4:	80000215 	stw	zero,8(r16)
  8037a8:	dfc00117 	ldw	ra,4(sp)
  8037ac:	dc000017 	ldw	r16,0(sp)
  8037b0:	dec00204 	addi	sp,sp,8
  8037b4:	f800283a 	ret

008037b8 <___vfprintf_internal_r>:
  8037b8:	defea404 	addi	sp,sp,-1392
  8037bc:	dd815815 	stw	r22,1376(sp)
  8037c0:	dc015215 	stw	r16,1352(sp)
  8037c4:	d9c15115 	stw	r7,1348(sp)
  8037c8:	dfc15b15 	stw	ra,1388(sp)
  8037cc:	df015a15 	stw	fp,1384(sp)
  8037d0:	ddc15915 	stw	r23,1380(sp)
  8037d4:	dd415715 	stw	r21,1372(sp)
  8037d8:	dd015615 	stw	r20,1368(sp)
  8037dc:	dcc15515 	stw	r19,1364(sp)
  8037e0:	dc815415 	stw	r18,1360(sp)
  8037e4:	dc415315 	stw	r17,1356(sp)
  8037e8:	282d883a 	mov	r22,r5
  8037ec:	3021883a 	mov	r16,r6
  8037f0:	d9014f15 	stw	r4,1340(sp)
  8037f4:	0807ee40 	call	807ee4 <_localeconv_r>
  8037f8:	10800017 	ldw	r2,0(r2)
  8037fc:	d9c15117 	ldw	r7,1348(sp)
  803800:	d8814915 	stw	r2,1316(sp)
  803804:	d8814f17 	ldw	r2,1340(sp)
  803808:	10000226 	beq	r2,zero,803814 <___vfprintf_internal_r+0x5c>
  80380c:	10800e17 	ldw	r2,56(r2)
  803810:	10020d26 	beq	r2,zero,804048 <___vfprintf_internal_r+0x890>
  803814:	b080030b 	ldhu	r2,12(r22)
  803818:	1080020c 	andi	r2,r2,8
  80381c:	10020e26 	beq	r2,zero,804058 <___vfprintf_internal_r+0x8a0>
  803820:	b0800417 	ldw	r2,16(r22)
  803824:	10020c26 	beq	r2,zero,804058 <___vfprintf_internal_r+0x8a0>
  803828:	b200030b 	ldhu	r8,12(r22)
  80382c:	00800284 	movi	r2,10
  803830:	40c0068c 	andi	r3,r8,26
  803834:	18802f1e 	bne	r3,r2,8038f4 <___vfprintf_internal_r+0x13c>
  803838:	b080038f 	ldh	r2,14(r22)
  80383c:	10002d16 	blt	r2,zero,8038f4 <___vfprintf_internal_r+0x13c>
  803840:	b240038b 	ldhu	r9,14(r22)
  803844:	b2800717 	ldw	r10,28(r22)
  803848:	b2c00917 	ldw	r11,36(r22)
  80384c:	d9014f17 	ldw	r4,1340(sp)
  803850:	dc402904 	addi	r17,sp,164
  803854:	d8804004 	addi	r2,sp,256
  803858:	00c10004 	movi	r3,1024
  80385c:	423fff4c 	andi	r8,r8,65533
  803860:	800d883a 	mov	r6,r16
  803864:	880b883a 	mov	r5,r17
  803868:	da002c0d 	sth	r8,176(sp)
  80386c:	da402c8d 	sth	r9,178(sp)
  803870:	da803015 	stw	r10,192(sp)
  803874:	dac03215 	stw	r11,200(sp)
  803878:	d8802d15 	stw	r2,180(sp)
  80387c:	d8c02e15 	stw	r3,184(sp)
  803880:	d8802915 	stw	r2,164(sp)
  803884:	d8c02b15 	stw	r3,172(sp)
  803888:	d8002f15 	stw	zero,188(sp)
  80388c:	08037b80 	call	8037b8 <___vfprintf_internal_r>
  803890:	d8814b15 	stw	r2,1324(sp)
  803894:	10000416 	blt	r2,zero,8038a8 <___vfprintf_internal_r+0xf0>
  803898:	d9014f17 	ldw	r4,1340(sp)
  80389c:	880b883a 	mov	r5,r17
  8038a0:	0806f900 	call	806f90 <_fflush_r>
  8038a4:	1002321e 	bne	r2,zero,804170 <___vfprintf_internal_r+0x9b8>
  8038a8:	d8802c0b 	ldhu	r2,176(sp)
  8038ac:	1080100c 	andi	r2,r2,64
  8038b0:	10000326 	beq	r2,zero,8038c0 <___vfprintf_internal_r+0x108>
  8038b4:	b080030b 	ldhu	r2,12(r22)
  8038b8:	10801014 	ori	r2,r2,64
  8038bc:	b080030d 	sth	r2,12(r22)
  8038c0:	d8814b17 	ldw	r2,1324(sp)
  8038c4:	dfc15b17 	ldw	ra,1388(sp)
  8038c8:	df015a17 	ldw	fp,1384(sp)
  8038cc:	ddc15917 	ldw	r23,1380(sp)
  8038d0:	dd815817 	ldw	r22,1376(sp)
  8038d4:	dd415717 	ldw	r21,1372(sp)
  8038d8:	dd015617 	ldw	r20,1368(sp)
  8038dc:	dcc15517 	ldw	r19,1364(sp)
  8038e0:	dc815417 	ldw	r18,1360(sp)
  8038e4:	dc415317 	ldw	r17,1356(sp)
  8038e8:	dc015217 	ldw	r16,1352(sp)
  8038ec:	dec15c04 	addi	sp,sp,1392
  8038f0:	f800283a 	ret
  8038f4:	0005883a 	mov	r2,zero
  8038f8:	0007883a 	mov	r3,zero
  8038fc:	dd401904 	addi	r21,sp,100
  803900:	d8814215 	stw	r2,1288(sp)
  803904:	802f883a 	mov	r23,r16
  803908:	d8c14315 	stw	r3,1292(sp)
  80390c:	d8014b15 	stw	zero,1324(sp)
  803910:	d8014815 	stw	zero,1312(sp)
  803914:	d8014415 	stw	zero,1296(sp)
  803918:	d8014715 	stw	zero,1308(sp)
  80391c:	dd400c15 	stw	r21,48(sp)
  803920:	d8000e15 	stw	zero,56(sp)
  803924:	d8000d15 	stw	zero,52(sp)
  803928:	b8800007 	ldb	r2,0(r23)
  80392c:	10001926 	beq	r2,zero,803994 <___vfprintf_internal_r+0x1dc>
  803930:	00c00944 	movi	r3,37
  803934:	10c01726 	beq	r2,r3,803994 <___vfprintf_internal_r+0x1dc>
  803938:	b821883a 	mov	r16,r23
  80393c:	00000106 	br	803944 <___vfprintf_internal_r+0x18c>
  803940:	10c00326 	beq	r2,r3,803950 <___vfprintf_internal_r+0x198>
  803944:	84000044 	addi	r16,r16,1
  803948:	80800007 	ldb	r2,0(r16)
  80394c:	103ffc1e 	bne	r2,zero,803940 <___vfprintf_internal_r+0x188>
  803950:	85e7c83a 	sub	r19,r16,r23
  803954:	98000e26 	beq	r19,zero,803990 <___vfprintf_internal_r+0x1d8>
  803958:	dc800e17 	ldw	r18,56(sp)
  80395c:	dc400d17 	ldw	r17,52(sp)
  803960:	008001c4 	movi	r2,7
  803964:	94e5883a 	add	r18,r18,r19
  803968:	8c400044 	addi	r17,r17,1
  80396c:	adc00015 	stw	r23,0(r21)
  803970:	dc800e15 	stw	r18,56(sp)
  803974:	acc00115 	stw	r19,4(r21)
  803978:	dc400d15 	stw	r17,52(sp)
  80397c:	14428b16 	blt	r2,r17,8043ac <___vfprintf_internal_r+0xbf4>
  803980:	ad400204 	addi	r21,r21,8
  803984:	d9014b17 	ldw	r4,1324(sp)
  803988:	24c9883a 	add	r4,r4,r19
  80398c:	d9014b15 	stw	r4,1324(sp)
  803990:	802f883a 	mov	r23,r16
  803994:	b8800007 	ldb	r2,0(r23)
  803998:	10013c26 	beq	r2,zero,803e8c <___vfprintf_internal_r+0x6d4>
  80399c:	bdc00044 	addi	r23,r23,1
  8039a0:	d8000405 	stb	zero,16(sp)
  8039a4:	b8c00007 	ldb	r3,0(r23)
  8039a8:	04ffffc4 	movi	r19,-1
  8039ac:	d8014c15 	stw	zero,1328(sp)
  8039b0:	d8014a15 	stw	zero,1320(sp)
  8039b4:	d8c14d15 	stw	r3,1332(sp)
  8039b8:	bdc00044 	addi	r23,r23,1
  8039bc:	d9414d17 	ldw	r5,1332(sp)
  8039c0:	00801604 	movi	r2,88
  8039c4:	28fff804 	addi	r3,r5,-32
  8039c8:	10c06036 	bltu	r2,r3,803b4c <___vfprintf_internal_r+0x394>
  8039cc:	18c5883a 	add	r2,r3,r3
  8039d0:	1085883a 	add	r2,r2,r2
  8039d4:	00c02034 	movhi	r3,128
  8039d8:	18ce7a04 	addi	r3,r3,14824
  8039dc:	10c5883a 	add	r2,r2,r3
  8039e0:	11000017 	ldw	r4,0(r2)
  8039e4:	2000683a 	jmp	r4
  8039e8:	0080495c 	xori	r2,zero,293
  8039ec:	00803b4c 	andi	r2,zero,237
  8039f0:	00803b4c 	andi	r2,zero,237
  8039f4:	00804948 	cmpgei	r2,zero,293
  8039f8:	00803b4c 	andi	r2,zero,237
  8039fc:	00803b4c 	andi	r2,zero,237
  803a00:	00803b4c 	andi	r2,zero,237
  803a04:	00803b4c 	andi	r2,zero,237
  803a08:	00803b4c 	andi	r2,zero,237
  803a0c:	00803b4c 	andi	r2,zero,237
  803a10:	00804728 	cmpgeui	r2,zero,284
  803a14:	00804938 	rdprs	r2,zero,292
  803a18:	00803b4c 	andi	r2,zero,237
  803a1c:	00804740 	call	80474 <__alt_mem_sdram-0x77fb8c>
  803a20:	008049d4 	movui	r2,295
  803a24:	00803b4c 	andi	r2,zero,237
  803a28:	008049c0 	call	8049c <__alt_mem_sdram-0x77fb64>
  803a2c:	00804988 	cmpgei	r2,zero,294
  803a30:	00804988 	cmpgei	r2,zero,294
  803a34:	00804988 	cmpgei	r2,zero,294
  803a38:	00804988 	cmpgei	r2,zero,294
  803a3c:	00804988 	cmpgei	r2,zero,294
  803a40:	00804988 	cmpgei	r2,zero,294
  803a44:	00804988 	cmpgei	r2,zero,294
  803a48:	00804988 	cmpgei	r2,zero,294
  803a4c:	00804988 	cmpgei	r2,zero,294
  803a50:	00803b4c 	andi	r2,zero,237
  803a54:	00803b4c 	andi	r2,zero,237
  803a58:	00803b4c 	andi	r2,zero,237
  803a5c:	00803b4c 	andi	r2,zero,237
  803a60:	00803b4c 	andi	r2,zero,237
  803a64:	00803b4c 	andi	r2,zero,237
  803a68:	00803b4c 	andi	r2,zero,237
  803a6c:	00803b4c 	andi	r2,zero,237
  803a70:	00803b4c 	andi	r2,zero,237
  803a74:	00803b4c 	andi	r2,zero,237
  803a78:	008041a4 	muli	r2,zero,262
  803a7c:	00804810 	cmplti	r2,zero,288
  803a80:	00803b4c 	andi	r2,zero,237
  803a84:	00804810 	cmplti	r2,zero,288
  803a88:	00803b4c 	andi	r2,zero,237
  803a8c:	00803b4c 	andi	r2,zero,237
  803a90:	00803b4c 	andi	r2,zero,237
  803a94:	00803b4c 	andi	r2,zero,237
  803a98:	00804974 	movhi	r2,293
  803a9c:	00803b4c 	andi	r2,zero,237
  803aa0:	00803b4c 	andi	r2,zero,237
  803aa4:	00804258 	cmpnei	r2,zero,265
  803aa8:	00803b4c 	andi	r2,zero,237
  803aac:	00803b4c 	andi	r2,zero,237
  803ab0:	00803b4c 	andi	r2,zero,237
  803ab4:	00803b4c 	andi	r2,zero,237
  803ab8:	00803b4c 	andi	r2,zero,237
  803abc:	008042a4 	muli	r2,zero,266
  803ac0:	00803b4c 	andi	r2,zero,237
  803ac4:	00803b4c 	andi	r2,zero,237
  803ac8:	008048c4 	movi	r2,291
  803acc:	00803b4c 	andi	r2,zero,237
  803ad0:	00803b4c 	andi	r2,zero,237
  803ad4:	00803b4c 	andi	r2,zero,237
  803ad8:	00803b4c 	andi	r2,zero,237
  803adc:	00803b4c 	andi	r2,zero,237
  803ae0:	00803b4c 	andi	r2,zero,237
  803ae4:	00803b4c 	andi	r2,zero,237
  803ae8:	00803b4c 	andi	r2,zero,237
  803aec:	00803b4c 	andi	r2,zero,237
  803af0:	00803b4c 	andi	r2,zero,237
  803af4:	00804898 	cmpnei	r2,zero,290
  803af8:	008041b0 	cmpltui	r2,zero,262
  803afc:	00804810 	cmplti	r2,zero,288
  803b00:	00804810 	cmplti	r2,zero,288
  803b04:	00804810 	cmplti	r2,zero,288
  803b08:	008047fc 	xorhi	r2,zero,287
  803b0c:	008041b0 	cmpltui	r2,zero,262
  803b10:	00803b4c 	andi	r2,zero,237
  803b14:	00803b4c 	andi	r2,zero,237
  803b18:	00804784 	movi	r2,286
  803b1c:	00803b4c 	andi	r2,zero,237
  803b20:	00804754 	movui	r2,285
  803b24:	00804264 	muli	r2,zero,265
  803b28:	008047b4 	movhi	r2,286
  803b2c:	008047a0 	cmpeqi	r2,zero,286
  803b30:	00803b4c 	andi	r2,zero,237
  803b34:	00804a30 	cmpltui	r2,zero,296
  803b38:	00803b4c 	andi	r2,zero,237
  803b3c:	008042b0 	cmpltui	r2,zero,266
  803b40:	00803b4c 	andi	r2,zero,237
  803b44:	00803b4c 	andi	r2,zero,237
  803b48:	00804928 	cmpgeui	r2,zero,292
  803b4c:	d9014d17 	ldw	r4,1332(sp)
  803b50:	2000ce26 	beq	r4,zero,803e8c <___vfprintf_internal_r+0x6d4>
  803b54:	01400044 	movi	r5,1
  803b58:	d9800f04 	addi	r6,sp,60
  803b5c:	d9c14015 	stw	r7,1280(sp)
  803b60:	d9414515 	stw	r5,1300(sp)
  803b64:	d9814115 	stw	r6,1284(sp)
  803b68:	280f883a 	mov	r7,r5
  803b6c:	d9000f05 	stb	r4,60(sp)
  803b70:	d8000405 	stb	zero,16(sp)
  803b74:	d8014615 	stw	zero,1304(sp)
  803b78:	d8c14c17 	ldw	r3,1328(sp)
  803b7c:	1880008c 	andi	r2,r3,2
  803b80:	1005003a 	cmpeq	r2,r2,zero
  803b84:	d8815015 	stw	r2,1344(sp)
  803b88:	1000031e 	bne	r2,zero,803b98 <___vfprintf_internal_r+0x3e0>
  803b8c:	d9014517 	ldw	r4,1300(sp)
  803b90:	21000084 	addi	r4,r4,2
  803b94:	d9014515 	stw	r4,1300(sp)
  803b98:	d9414c17 	ldw	r5,1328(sp)
  803b9c:	2940210c 	andi	r5,r5,132
  803ba0:	d9414e15 	stw	r5,1336(sp)
  803ba4:	28002d1e 	bne	r5,zero,803c5c <___vfprintf_internal_r+0x4a4>
  803ba8:	d9814a17 	ldw	r6,1320(sp)
  803bac:	d8814517 	ldw	r2,1300(sp)
  803bb0:	30a1c83a 	sub	r16,r6,r2
  803bb4:	0400290e 	bge	zero,r16,803c5c <___vfprintf_internal_r+0x4a4>
  803bb8:	00800404 	movi	r2,16
  803bbc:	1404580e 	bge	r2,r16,804d20 <___vfprintf_internal_r+0x1568>
  803bc0:	dc800e17 	ldw	r18,56(sp)
  803bc4:	dc400d17 	ldw	r17,52(sp)
  803bc8:	1027883a 	mov	r19,r2
  803bcc:	07002074 	movhi	fp,129
  803bd0:	e7002e84 	addi	fp,fp,186
  803bd4:	050001c4 	movi	r20,7
  803bd8:	00000306 	br	803be8 <___vfprintf_internal_r+0x430>
  803bdc:	843ffc04 	addi	r16,r16,-16
  803be0:	ad400204 	addi	r21,r21,8
  803be4:	9c00130e 	bge	r19,r16,803c34 <___vfprintf_internal_r+0x47c>
  803be8:	94800404 	addi	r18,r18,16
  803bec:	8c400044 	addi	r17,r17,1
  803bf0:	af000015 	stw	fp,0(r21)
  803bf4:	acc00115 	stw	r19,4(r21)
  803bf8:	dc800e15 	stw	r18,56(sp)
  803bfc:	dc400d15 	stw	r17,52(sp)
  803c00:	a47ff60e 	bge	r20,r17,803bdc <___vfprintf_internal_r+0x424>
  803c04:	d9014f17 	ldw	r4,1340(sp)
  803c08:	b00b883a 	mov	r5,r22
  803c0c:	d9800c04 	addi	r6,sp,48
  803c10:	d9c15115 	stw	r7,1348(sp)
  803c14:	08037600 	call	803760 <__sprint_r>
  803c18:	d9c15117 	ldw	r7,1348(sp)
  803c1c:	10009e1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  803c20:	843ffc04 	addi	r16,r16,-16
  803c24:	dc800e17 	ldw	r18,56(sp)
  803c28:	dc400d17 	ldw	r17,52(sp)
  803c2c:	dd401904 	addi	r21,sp,100
  803c30:	9c3fed16 	blt	r19,r16,803be8 <___vfprintf_internal_r+0x430>
  803c34:	9425883a 	add	r18,r18,r16
  803c38:	8c400044 	addi	r17,r17,1
  803c3c:	008001c4 	movi	r2,7
  803c40:	af000015 	stw	fp,0(r21)
  803c44:	ac000115 	stw	r16,4(r21)
  803c48:	dc800e15 	stw	r18,56(sp)
  803c4c:	dc400d15 	stw	r17,52(sp)
  803c50:	1441f516 	blt	r2,r17,804428 <___vfprintf_internal_r+0xc70>
  803c54:	ad400204 	addi	r21,r21,8
  803c58:	00000206 	br	803c64 <___vfprintf_internal_r+0x4ac>
  803c5c:	dc800e17 	ldw	r18,56(sp)
  803c60:	dc400d17 	ldw	r17,52(sp)
  803c64:	d8800407 	ldb	r2,16(sp)
  803c68:	10000b26 	beq	r2,zero,803c98 <___vfprintf_internal_r+0x4e0>
  803c6c:	00800044 	movi	r2,1
  803c70:	94800044 	addi	r18,r18,1
  803c74:	8c400044 	addi	r17,r17,1
  803c78:	a8800115 	stw	r2,4(r21)
  803c7c:	d8c00404 	addi	r3,sp,16
  803c80:	008001c4 	movi	r2,7
  803c84:	a8c00015 	stw	r3,0(r21)
  803c88:	dc800e15 	stw	r18,56(sp)
  803c8c:	dc400d15 	stw	r17,52(sp)
  803c90:	1441da16 	blt	r2,r17,8043fc <___vfprintf_internal_r+0xc44>
  803c94:	ad400204 	addi	r21,r21,8
  803c98:	d9015017 	ldw	r4,1344(sp)
  803c9c:	20000b1e 	bne	r4,zero,803ccc <___vfprintf_internal_r+0x514>
  803ca0:	d8800444 	addi	r2,sp,17
  803ca4:	94800084 	addi	r18,r18,2
  803ca8:	8c400044 	addi	r17,r17,1
  803cac:	a8800015 	stw	r2,0(r21)
  803cb0:	00c00084 	movi	r3,2
  803cb4:	008001c4 	movi	r2,7
  803cb8:	a8c00115 	stw	r3,4(r21)
  803cbc:	dc800e15 	stw	r18,56(sp)
  803cc0:	dc400d15 	stw	r17,52(sp)
  803cc4:	1441c216 	blt	r2,r17,8043d0 <___vfprintf_internal_r+0xc18>
  803cc8:	ad400204 	addi	r21,r21,8
  803ccc:	d9414e17 	ldw	r5,1336(sp)
  803cd0:	00802004 	movi	r2,128
  803cd4:	2880b126 	beq	r5,r2,803f9c <___vfprintf_internal_r+0x7e4>
  803cd8:	d8c14617 	ldw	r3,1304(sp)
  803cdc:	19e1c83a 	sub	r16,r3,r7
  803ce0:	0400260e 	bge	zero,r16,803d7c <___vfprintf_internal_r+0x5c4>
  803ce4:	00800404 	movi	r2,16
  803ce8:	1403c90e 	bge	r2,r16,804c10 <___vfprintf_internal_r+0x1458>
  803cec:	1027883a 	mov	r19,r2
  803cf0:	07002074 	movhi	fp,129
  803cf4:	e7002a84 	addi	fp,fp,170
  803cf8:	050001c4 	movi	r20,7
  803cfc:	00000306 	br	803d0c <___vfprintf_internal_r+0x554>
  803d00:	843ffc04 	addi	r16,r16,-16
  803d04:	ad400204 	addi	r21,r21,8
  803d08:	9c00130e 	bge	r19,r16,803d58 <___vfprintf_internal_r+0x5a0>
  803d0c:	94800404 	addi	r18,r18,16
  803d10:	8c400044 	addi	r17,r17,1
  803d14:	af000015 	stw	fp,0(r21)
  803d18:	acc00115 	stw	r19,4(r21)
  803d1c:	dc800e15 	stw	r18,56(sp)
  803d20:	dc400d15 	stw	r17,52(sp)
  803d24:	a47ff60e 	bge	r20,r17,803d00 <___vfprintf_internal_r+0x548>
  803d28:	d9014f17 	ldw	r4,1340(sp)
  803d2c:	b00b883a 	mov	r5,r22
  803d30:	d9800c04 	addi	r6,sp,48
  803d34:	d9c15115 	stw	r7,1348(sp)
  803d38:	08037600 	call	803760 <__sprint_r>
  803d3c:	d9c15117 	ldw	r7,1348(sp)
  803d40:	1000551e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  803d44:	843ffc04 	addi	r16,r16,-16
  803d48:	dc800e17 	ldw	r18,56(sp)
  803d4c:	dc400d17 	ldw	r17,52(sp)
  803d50:	dd401904 	addi	r21,sp,100
  803d54:	9c3fed16 	blt	r19,r16,803d0c <___vfprintf_internal_r+0x554>
  803d58:	9425883a 	add	r18,r18,r16
  803d5c:	8c400044 	addi	r17,r17,1
  803d60:	008001c4 	movi	r2,7
  803d64:	af000015 	stw	fp,0(r21)
  803d68:	ac000115 	stw	r16,4(r21)
  803d6c:	dc800e15 	stw	r18,56(sp)
  803d70:	dc400d15 	stw	r17,52(sp)
  803d74:	14418216 	blt	r2,r17,804380 <___vfprintf_internal_r+0xbc8>
  803d78:	ad400204 	addi	r21,r21,8
  803d7c:	d9014c17 	ldw	r4,1328(sp)
  803d80:	2080400c 	andi	r2,r4,256
  803d84:	10004a1e 	bne	r2,zero,803eb0 <___vfprintf_internal_r+0x6f8>
  803d88:	d9414117 	ldw	r5,1284(sp)
  803d8c:	91e5883a 	add	r18,r18,r7
  803d90:	8c400044 	addi	r17,r17,1
  803d94:	008001c4 	movi	r2,7
  803d98:	a9400015 	stw	r5,0(r21)
  803d9c:	a9c00115 	stw	r7,4(r21)
  803da0:	dc800e15 	stw	r18,56(sp)
  803da4:	dc400d15 	stw	r17,52(sp)
  803da8:	14416716 	blt	r2,r17,804348 <___vfprintf_internal_r+0xb90>
  803dac:	a8c00204 	addi	r3,r21,8
  803db0:	d9814c17 	ldw	r6,1328(sp)
  803db4:	3080010c 	andi	r2,r6,4
  803db8:	10002826 	beq	r2,zero,803e5c <___vfprintf_internal_r+0x6a4>
  803dbc:	d8814a17 	ldw	r2,1320(sp)
  803dc0:	d9014517 	ldw	r4,1300(sp)
  803dc4:	1121c83a 	sub	r16,r2,r4
  803dc8:	0400240e 	bge	zero,r16,803e5c <___vfprintf_internal_r+0x6a4>
  803dcc:	00800404 	movi	r2,16
  803dd0:	14044f0e 	bge	r2,r16,804f10 <___vfprintf_internal_r+0x1758>
  803dd4:	dc400d17 	ldw	r17,52(sp)
  803dd8:	1027883a 	mov	r19,r2
  803ddc:	07002074 	movhi	fp,129
  803de0:	e7002e84 	addi	fp,fp,186
  803de4:	050001c4 	movi	r20,7
  803de8:	00000306 	br	803df8 <___vfprintf_internal_r+0x640>
  803dec:	843ffc04 	addi	r16,r16,-16
  803df0:	18c00204 	addi	r3,r3,8
  803df4:	9c00110e 	bge	r19,r16,803e3c <___vfprintf_internal_r+0x684>
  803df8:	94800404 	addi	r18,r18,16
  803dfc:	8c400044 	addi	r17,r17,1
  803e00:	1f000015 	stw	fp,0(r3)
  803e04:	1cc00115 	stw	r19,4(r3)
  803e08:	dc800e15 	stw	r18,56(sp)
  803e0c:	dc400d15 	stw	r17,52(sp)
  803e10:	a47ff60e 	bge	r20,r17,803dec <___vfprintf_internal_r+0x634>
  803e14:	d9014f17 	ldw	r4,1340(sp)
  803e18:	b00b883a 	mov	r5,r22
  803e1c:	d9800c04 	addi	r6,sp,48
  803e20:	08037600 	call	803760 <__sprint_r>
  803e24:	10001c1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  803e28:	843ffc04 	addi	r16,r16,-16
  803e2c:	dc800e17 	ldw	r18,56(sp)
  803e30:	dc400d17 	ldw	r17,52(sp)
  803e34:	d8c01904 	addi	r3,sp,100
  803e38:	9c3fef16 	blt	r19,r16,803df8 <___vfprintf_internal_r+0x640>
  803e3c:	9425883a 	add	r18,r18,r16
  803e40:	8c400044 	addi	r17,r17,1
  803e44:	008001c4 	movi	r2,7
  803e48:	1f000015 	stw	fp,0(r3)
  803e4c:	1c000115 	stw	r16,4(r3)
  803e50:	dc800e15 	stw	r18,56(sp)
  803e54:	dc400d15 	stw	r17,52(sp)
  803e58:	1440cb16 	blt	r2,r17,804188 <___vfprintf_internal_r+0x9d0>
  803e5c:	d8814a17 	ldw	r2,1320(sp)
  803e60:	d9414517 	ldw	r5,1300(sp)
  803e64:	1140010e 	bge	r2,r5,803e6c <___vfprintf_internal_r+0x6b4>
  803e68:	2805883a 	mov	r2,r5
  803e6c:	d9814b17 	ldw	r6,1324(sp)
  803e70:	308d883a 	add	r6,r6,r2
  803e74:	d9814b15 	stw	r6,1324(sp)
  803e78:	90013b1e 	bne	r18,zero,804368 <___vfprintf_internal_r+0xbb0>
  803e7c:	d9c14017 	ldw	r7,1280(sp)
  803e80:	dd401904 	addi	r21,sp,100
  803e84:	d8000d15 	stw	zero,52(sp)
  803e88:	003ea706 	br	803928 <___vfprintf_internal_r+0x170>
  803e8c:	d8800e17 	ldw	r2,56(sp)
  803e90:	10053f1e 	bne	r2,zero,805390 <___vfprintf_internal_r+0x1bd8>
  803e94:	d8000d15 	stw	zero,52(sp)
  803e98:	b080030b 	ldhu	r2,12(r22)
  803e9c:	1080100c 	andi	r2,r2,64
  803ea0:	103e8726 	beq	r2,zero,8038c0 <___vfprintf_internal_r+0x108>
  803ea4:	00bfffc4 	movi	r2,-1
  803ea8:	d8814b15 	stw	r2,1324(sp)
  803eac:	003e8406 	br	8038c0 <___vfprintf_internal_r+0x108>
  803eb0:	d9814d17 	ldw	r6,1332(sp)
  803eb4:	00801944 	movi	r2,101
  803eb8:	11806e16 	blt	r2,r6,804074 <___vfprintf_internal_r+0x8bc>
  803ebc:	d9414717 	ldw	r5,1308(sp)
  803ec0:	00c00044 	movi	r3,1
  803ec4:	1943430e 	bge	r3,r5,804bd4 <___vfprintf_internal_r+0x141c>
  803ec8:	d8814117 	ldw	r2,1284(sp)
  803ecc:	94800044 	addi	r18,r18,1
  803ed0:	8c400044 	addi	r17,r17,1
  803ed4:	a8800015 	stw	r2,0(r21)
  803ed8:	008001c4 	movi	r2,7
  803edc:	a8c00115 	stw	r3,4(r21)
  803ee0:	dc800e15 	stw	r18,56(sp)
  803ee4:	dc400d15 	stw	r17,52(sp)
  803ee8:	1441ca16 	blt	r2,r17,804614 <___vfprintf_internal_r+0xe5c>
  803eec:	a8c00204 	addi	r3,r21,8
  803ef0:	d9014917 	ldw	r4,1316(sp)
  803ef4:	00800044 	movi	r2,1
  803ef8:	94800044 	addi	r18,r18,1
  803efc:	8c400044 	addi	r17,r17,1
  803f00:	18800115 	stw	r2,4(r3)
  803f04:	008001c4 	movi	r2,7
  803f08:	19000015 	stw	r4,0(r3)
  803f0c:	dc800e15 	stw	r18,56(sp)
  803f10:	dc400d15 	stw	r17,52(sp)
  803f14:	1441b616 	blt	r2,r17,8045f0 <___vfprintf_internal_r+0xe38>
  803f18:	1cc00204 	addi	r19,r3,8
  803f1c:	d9014217 	ldw	r4,1288(sp)
  803f20:	d9414317 	ldw	r5,1292(sp)
  803f24:	000d883a 	mov	r6,zero
  803f28:	000f883a 	mov	r7,zero
  803f2c:	080b1c40 	call	80b1c4 <__nedf2>
  803f30:	10017426 	beq	r2,zero,804504 <___vfprintf_internal_r+0xd4c>
  803f34:	d9414717 	ldw	r5,1308(sp)
  803f38:	d9814117 	ldw	r6,1284(sp)
  803f3c:	8c400044 	addi	r17,r17,1
  803f40:	2c85883a 	add	r2,r5,r18
  803f44:	14bfffc4 	addi	r18,r2,-1
  803f48:	28bfffc4 	addi	r2,r5,-1
  803f4c:	30c00044 	addi	r3,r6,1
  803f50:	98800115 	stw	r2,4(r19)
  803f54:	008001c4 	movi	r2,7
  803f58:	98c00015 	stw	r3,0(r19)
  803f5c:	dc800e15 	stw	r18,56(sp)
  803f60:	dc400d15 	stw	r17,52(sp)
  803f64:	14418e16 	blt	r2,r17,8045a0 <___vfprintf_internal_r+0xde8>
  803f68:	9cc00204 	addi	r19,r19,8
  803f6c:	d9414817 	ldw	r5,1312(sp)
  803f70:	d8800804 	addi	r2,sp,32
  803f74:	8c400044 	addi	r17,r17,1
  803f78:	9165883a 	add	r18,r18,r5
  803f7c:	98800015 	stw	r2,0(r19)
  803f80:	008001c4 	movi	r2,7
  803f84:	99400115 	stw	r5,4(r19)
  803f88:	dc800e15 	stw	r18,56(sp)
  803f8c:	dc400d15 	stw	r17,52(sp)
  803f90:	1440ed16 	blt	r2,r17,804348 <___vfprintf_internal_r+0xb90>
  803f94:	98c00204 	addi	r3,r19,8
  803f98:	003f8506 	br	803db0 <___vfprintf_internal_r+0x5f8>
  803f9c:	d9814a17 	ldw	r6,1320(sp)
  803fa0:	d8814517 	ldw	r2,1300(sp)
  803fa4:	30a1c83a 	sub	r16,r6,r2
  803fa8:	043f4b0e 	bge	zero,r16,803cd8 <___vfprintf_internal_r+0x520>
  803fac:	00800404 	movi	r2,16
  803fb0:	1404340e 	bge	r2,r16,805084 <___vfprintf_internal_r+0x18cc>
  803fb4:	1027883a 	mov	r19,r2
  803fb8:	07002074 	movhi	fp,129
  803fbc:	e7002a84 	addi	fp,fp,170
  803fc0:	050001c4 	movi	r20,7
  803fc4:	00000306 	br	803fd4 <___vfprintf_internal_r+0x81c>
  803fc8:	843ffc04 	addi	r16,r16,-16
  803fcc:	ad400204 	addi	r21,r21,8
  803fd0:	9c00130e 	bge	r19,r16,804020 <___vfprintf_internal_r+0x868>
  803fd4:	94800404 	addi	r18,r18,16
  803fd8:	8c400044 	addi	r17,r17,1
  803fdc:	af000015 	stw	fp,0(r21)
  803fe0:	acc00115 	stw	r19,4(r21)
  803fe4:	dc800e15 	stw	r18,56(sp)
  803fe8:	dc400d15 	stw	r17,52(sp)
  803fec:	a47ff60e 	bge	r20,r17,803fc8 <___vfprintf_internal_r+0x810>
  803ff0:	d9014f17 	ldw	r4,1340(sp)
  803ff4:	b00b883a 	mov	r5,r22
  803ff8:	d9800c04 	addi	r6,sp,48
  803ffc:	d9c15115 	stw	r7,1348(sp)
  804000:	08037600 	call	803760 <__sprint_r>
  804004:	d9c15117 	ldw	r7,1348(sp)
  804008:	103fa31e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  80400c:	843ffc04 	addi	r16,r16,-16
  804010:	dc800e17 	ldw	r18,56(sp)
  804014:	dc400d17 	ldw	r17,52(sp)
  804018:	dd401904 	addi	r21,sp,100
  80401c:	9c3fed16 	blt	r19,r16,803fd4 <___vfprintf_internal_r+0x81c>
  804020:	9425883a 	add	r18,r18,r16
  804024:	8c400044 	addi	r17,r17,1
  804028:	008001c4 	movi	r2,7
  80402c:	af000015 	stw	fp,0(r21)
  804030:	ac000115 	stw	r16,4(r21)
  804034:	dc800e15 	stw	r18,56(sp)
  804038:	dc400d15 	stw	r17,52(sp)
  80403c:	14416116 	blt	r2,r17,8045c4 <___vfprintf_internal_r+0xe0c>
  804040:	ad400204 	addi	r21,r21,8
  804044:	003f2406 	br	803cd8 <___vfprintf_internal_r+0x520>
  804048:	d9014f17 	ldw	r4,1340(sp)
  80404c:	08072280 	call	807228 <__sinit>
  804050:	d9c15117 	ldw	r7,1348(sp)
  804054:	003def06 	br	803814 <___vfprintf_internal_r+0x5c>
  804058:	d9014f17 	ldw	r4,1340(sp)
  80405c:	b00b883a 	mov	r5,r22
  804060:	d9c15115 	stw	r7,1348(sp)
  804064:	08056880 	call	805688 <__swsetup_r>
  804068:	d9c15117 	ldw	r7,1348(sp)
  80406c:	103dee26 	beq	r2,zero,803828 <___vfprintf_internal_r+0x70>
  804070:	003f8c06 	br	803ea4 <___vfprintf_internal_r+0x6ec>
  804074:	d9014217 	ldw	r4,1288(sp)
  804078:	d9414317 	ldw	r5,1292(sp)
  80407c:	000d883a 	mov	r6,zero
  804080:	000f883a 	mov	r7,zero
  804084:	080b13c0 	call	80b13c <__eqdf2>
  804088:	1000f21e 	bne	r2,zero,804454 <___vfprintf_internal_r+0xc9c>
  80408c:	00802074 	movhi	r2,129
  804090:	10802a04 	addi	r2,r2,168
  804094:	94800044 	addi	r18,r18,1
  804098:	8c400044 	addi	r17,r17,1
  80409c:	a8800015 	stw	r2,0(r21)
  8040a0:	00c00044 	movi	r3,1
  8040a4:	008001c4 	movi	r2,7
  8040a8:	a8c00115 	stw	r3,4(r21)
  8040ac:	dc800e15 	stw	r18,56(sp)
  8040b0:	dc400d15 	stw	r17,52(sp)
  8040b4:	1442fa16 	blt	r2,r17,804ca0 <___vfprintf_internal_r+0x14e8>
  8040b8:	a8c00204 	addi	r3,r21,8
  8040bc:	d8800517 	ldw	r2,20(sp)
  8040c0:	d9014717 	ldw	r4,1308(sp)
  8040c4:	11015c0e 	bge	r2,r4,804638 <___vfprintf_internal_r+0xe80>
  8040c8:	dc400d17 	ldw	r17,52(sp)
  8040cc:	d9814917 	ldw	r6,1316(sp)
  8040d0:	00800044 	movi	r2,1
  8040d4:	94800044 	addi	r18,r18,1
  8040d8:	8c400044 	addi	r17,r17,1
  8040dc:	18800115 	stw	r2,4(r3)
  8040e0:	008001c4 	movi	r2,7
  8040e4:	19800015 	stw	r6,0(r3)
  8040e8:	dc800e15 	stw	r18,56(sp)
  8040ec:	dc400d15 	stw	r17,52(sp)
  8040f0:	14431016 	blt	r2,r17,804d34 <___vfprintf_internal_r+0x157c>
  8040f4:	18c00204 	addi	r3,r3,8
  8040f8:	d8814717 	ldw	r2,1308(sp)
  8040fc:	143fffc4 	addi	r16,r2,-1
  804100:	043f2b0e 	bge	zero,r16,803db0 <___vfprintf_internal_r+0x5f8>
  804104:	00800404 	movi	r2,16
  804108:	1402a20e 	bge	r2,r16,804b94 <___vfprintf_internal_r+0x13dc>
  80410c:	dc400d17 	ldw	r17,52(sp)
  804110:	1027883a 	mov	r19,r2
  804114:	07002074 	movhi	fp,129
  804118:	e7002a84 	addi	fp,fp,170
  80411c:	050001c4 	movi	r20,7
  804120:	00000306 	br	804130 <___vfprintf_internal_r+0x978>
  804124:	18c00204 	addi	r3,r3,8
  804128:	843ffc04 	addi	r16,r16,-16
  80412c:	9c029c0e 	bge	r19,r16,804ba0 <___vfprintf_internal_r+0x13e8>
  804130:	94800404 	addi	r18,r18,16
  804134:	8c400044 	addi	r17,r17,1
  804138:	1f000015 	stw	fp,0(r3)
  80413c:	1cc00115 	stw	r19,4(r3)
  804140:	dc800e15 	stw	r18,56(sp)
  804144:	dc400d15 	stw	r17,52(sp)
  804148:	a47ff60e 	bge	r20,r17,804124 <___vfprintf_internal_r+0x96c>
  80414c:	d9014f17 	ldw	r4,1340(sp)
  804150:	b00b883a 	mov	r5,r22
  804154:	d9800c04 	addi	r6,sp,48
  804158:	08037600 	call	803760 <__sprint_r>
  80415c:	103f4e1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804160:	dc800e17 	ldw	r18,56(sp)
  804164:	dc400d17 	ldw	r17,52(sp)
  804168:	d8c01904 	addi	r3,sp,100
  80416c:	003fee06 	br	804128 <___vfprintf_internal_r+0x970>
  804170:	d8802c0b 	ldhu	r2,176(sp)
  804174:	00ffffc4 	movi	r3,-1
  804178:	d8c14b15 	stw	r3,1324(sp)
  80417c:	1080100c 	andi	r2,r2,64
  804180:	103dcc1e 	bne	r2,zero,8038b4 <___vfprintf_internal_r+0xfc>
  804184:	003dce06 	br	8038c0 <___vfprintf_internal_r+0x108>
  804188:	d9014f17 	ldw	r4,1340(sp)
  80418c:	b00b883a 	mov	r5,r22
  804190:	d9800c04 	addi	r6,sp,48
  804194:	08037600 	call	803760 <__sprint_r>
  804198:	103f3f1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  80419c:	dc800e17 	ldw	r18,56(sp)
  8041a0:	003f2e06 	br	803e5c <___vfprintf_internal_r+0x6a4>
  8041a4:	d9414c17 	ldw	r5,1328(sp)
  8041a8:	29400414 	ori	r5,r5,16
  8041ac:	d9414c15 	stw	r5,1328(sp)
  8041b0:	d9814c17 	ldw	r6,1328(sp)
  8041b4:	3080080c 	andi	r2,r6,32
  8041b8:	10014f1e 	bne	r2,zero,8046f8 <___vfprintf_internal_r+0xf40>
  8041bc:	d8c14c17 	ldw	r3,1328(sp)
  8041c0:	1880040c 	andi	r2,r3,16
  8041c4:	1002ea1e 	bne	r2,zero,804d70 <___vfprintf_internal_r+0x15b8>
  8041c8:	d9014c17 	ldw	r4,1328(sp)
  8041cc:	2080100c 	andi	r2,r4,64
  8041d0:	1002e726 	beq	r2,zero,804d70 <___vfprintf_internal_r+0x15b8>
  8041d4:	3880000f 	ldh	r2,0(r7)
  8041d8:	39c00104 	addi	r7,r7,4
  8041dc:	d9c14015 	stw	r7,1280(sp)
  8041e0:	1023d7fa 	srai	r17,r2,31
  8041e4:	1021883a 	mov	r16,r2
  8041e8:	88037216 	blt	r17,zero,804fb4 <___vfprintf_internal_r+0x17fc>
  8041ec:	01000044 	movi	r4,1
  8041f0:	98000416 	blt	r19,zero,804204 <___vfprintf_internal_r+0xa4c>
  8041f4:	d8c14c17 	ldw	r3,1328(sp)
  8041f8:	00bfdfc4 	movi	r2,-129
  8041fc:	1886703a 	and	r3,r3,r2
  804200:	d8c14c15 	stw	r3,1328(sp)
  804204:	8444b03a 	or	r2,r16,r17
  804208:	1002261e 	bne	r2,zero,804aa4 <___vfprintf_internal_r+0x12ec>
  80420c:	9802251e 	bne	r19,zero,804aa4 <___vfprintf_internal_r+0x12ec>
  804210:	20803fcc 	andi	r2,r4,255
  804214:	10029b26 	beq	r2,zero,804c84 <___vfprintf_internal_r+0x14cc>
  804218:	d8c01904 	addi	r3,sp,100
  80421c:	dd000f04 	addi	r20,sp,60
  804220:	d8c14115 	stw	r3,1284(sp)
  804224:	d8c14117 	ldw	r3,1284(sp)
  804228:	dcc14515 	stw	r19,1300(sp)
  80422c:	a0c5c83a 	sub	r2,r20,r3
  804230:	11c00a04 	addi	r7,r2,40
  804234:	99c0010e 	bge	r19,r7,80423c <___vfprintf_internal_r+0xa84>
  804238:	d9c14515 	stw	r7,1300(sp)
  80423c:	dcc14615 	stw	r19,1304(sp)
  804240:	d8800407 	ldb	r2,16(sp)
  804244:	103e4c26 	beq	r2,zero,803b78 <___vfprintf_internal_r+0x3c0>
  804248:	d8814517 	ldw	r2,1300(sp)
  80424c:	10800044 	addi	r2,r2,1
  804250:	d8814515 	stw	r2,1300(sp)
  804254:	003e4806 	br	803b78 <___vfprintf_internal_r+0x3c0>
  804258:	d9814c17 	ldw	r6,1328(sp)
  80425c:	31800414 	ori	r6,r6,16
  804260:	d9814c15 	stw	r6,1328(sp)
  804264:	d8c14c17 	ldw	r3,1328(sp)
  804268:	1880080c 	andi	r2,r3,32
  80426c:	1001271e 	bne	r2,zero,80470c <___vfprintf_internal_r+0xf54>
  804270:	d9414c17 	ldw	r5,1328(sp)
  804274:	2880040c 	andi	r2,r5,16
  804278:	1002b61e 	bne	r2,zero,804d54 <___vfprintf_internal_r+0x159c>
  80427c:	d9814c17 	ldw	r6,1328(sp)
  804280:	3080100c 	andi	r2,r6,64
  804284:	1002b326 	beq	r2,zero,804d54 <___vfprintf_internal_r+0x159c>
  804288:	3c00000b 	ldhu	r16,0(r7)
  80428c:	0009883a 	mov	r4,zero
  804290:	39c00104 	addi	r7,r7,4
  804294:	0023883a 	mov	r17,zero
  804298:	d9c14015 	stw	r7,1280(sp)
  80429c:	d8000405 	stb	zero,16(sp)
  8042a0:	003fd306 	br	8041f0 <___vfprintf_internal_r+0xa38>
  8042a4:	d9014c17 	ldw	r4,1328(sp)
  8042a8:	21000414 	ori	r4,r4,16
  8042ac:	d9014c15 	stw	r4,1328(sp)
  8042b0:	d9414c17 	ldw	r5,1328(sp)
  8042b4:	2880080c 	andi	r2,r5,32
  8042b8:	1001081e 	bne	r2,zero,8046dc <___vfprintf_internal_r+0xf24>
  8042bc:	d8c14c17 	ldw	r3,1328(sp)
  8042c0:	1880040c 	andi	r2,r3,16
  8042c4:	1002b01e 	bne	r2,zero,804d88 <___vfprintf_internal_r+0x15d0>
  8042c8:	d9014c17 	ldw	r4,1328(sp)
  8042cc:	2080100c 	andi	r2,r4,64
  8042d0:	1002ad26 	beq	r2,zero,804d88 <___vfprintf_internal_r+0x15d0>
  8042d4:	3c00000b 	ldhu	r16,0(r7)
  8042d8:	01000044 	movi	r4,1
  8042dc:	39c00104 	addi	r7,r7,4
  8042e0:	0023883a 	mov	r17,zero
  8042e4:	d9c14015 	stw	r7,1280(sp)
  8042e8:	d8000405 	stb	zero,16(sp)
  8042ec:	003fc006 	br	8041f0 <___vfprintf_internal_r+0xa38>
  8042f0:	d9014f17 	ldw	r4,1340(sp)
  8042f4:	b00b883a 	mov	r5,r22
  8042f8:	d9800c04 	addi	r6,sp,48
  8042fc:	08037600 	call	803760 <__sprint_r>
  804300:	103ee51e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804304:	dc800e17 	ldw	r18,56(sp)
  804308:	d8c01904 	addi	r3,sp,100
  80430c:	d9814c17 	ldw	r6,1328(sp)
  804310:	3080004c 	andi	r2,r6,1
  804314:	1005003a 	cmpeq	r2,r2,zero
  804318:	103ea51e 	bne	r2,zero,803db0 <___vfprintf_internal_r+0x5f8>
  80431c:	00800044 	movi	r2,1
  804320:	dc400d17 	ldw	r17,52(sp)
  804324:	18800115 	stw	r2,4(r3)
  804328:	d8814917 	ldw	r2,1316(sp)
  80432c:	94800044 	addi	r18,r18,1
  804330:	8c400044 	addi	r17,r17,1
  804334:	18800015 	stw	r2,0(r3)
  804338:	008001c4 	movi	r2,7
  80433c:	dc800e15 	stw	r18,56(sp)
  804340:	dc400d15 	stw	r17,52(sp)
  804344:	14421e0e 	bge	r2,r17,804bc0 <___vfprintf_internal_r+0x1408>
  804348:	d9014f17 	ldw	r4,1340(sp)
  80434c:	b00b883a 	mov	r5,r22
  804350:	d9800c04 	addi	r6,sp,48
  804354:	08037600 	call	803760 <__sprint_r>
  804358:	103ecf1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  80435c:	dc800e17 	ldw	r18,56(sp)
  804360:	d8c01904 	addi	r3,sp,100
  804364:	003e9206 	br	803db0 <___vfprintf_internal_r+0x5f8>
  804368:	d9014f17 	ldw	r4,1340(sp)
  80436c:	b00b883a 	mov	r5,r22
  804370:	d9800c04 	addi	r6,sp,48
  804374:	08037600 	call	803760 <__sprint_r>
  804378:	103ec026 	beq	r2,zero,803e7c <___vfprintf_internal_r+0x6c4>
  80437c:	003ec606 	br	803e98 <___vfprintf_internal_r+0x6e0>
  804380:	d9014f17 	ldw	r4,1340(sp)
  804384:	b00b883a 	mov	r5,r22
  804388:	d9800c04 	addi	r6,sp,48
  80438c:	d9c15115 	stw	r7,1348(sp)
  804390:	08037600 	call	803760 <__sprint_r>
  804394:	d9c15117 	ldw	r7,1348(sp)
  804398:	103ebf1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  80439c:	dc800e17 	ldw	r18,56(sp)
  8043a0:	dc400d17 	ldw	r17,52(sp)
  8043a4:	dd401904 	addi	r21,sp,100
  8043a8:	003e7406 	br	803d7c <___vfprintf_internal_r+0x5c4>
  8043ac:	d9014f17 	ldw	r4,1340(sp)
  8043b0:	b00b883a 	mov	r5,r22
  8043b4:	d9800c04 	addi	r6,sp,48
  8043b8:	d9c15115 	stw	r7,1348(sp)
  8043bc:	08037600 	call	803760 <__sprint_r>
  8043c0:	d9c15117 	ldw	r7,1348(sp)
  8043c4:	103eb41e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  8043c8:	dd401904 	addi	r21,sp,100
  8043cc:	003d6d06 	br	803984 <___vfprintf_internal_r+0x1cc>
  8043d0:	d9014f17 	ldw	r4,1340(sp)
  8043d4:	b00b883a 	mov	r5,r22
  8043d8:	d9800c04 	addi	r6,sp,48
  8043dc:	d9c15115 	stw	r7,1348(sp)
  8043e0:	08037600 	call	803760 <__sprint_r>
  8043e4:	d9c15117 	ldw	r7,1348(sp)
  8043e8:	103eab1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  8043ec:	dc800e17 	ldw	r18,56(sp)
  8043f0:	dc400d17 	ldw	r17,52(sp)
  8043f4:	dd401904 	addi	r21,sp,100
  8043f8:	003e3406 	br	803ccc <___vfprintf_internal_r+0x514>
  8043fc:	d9014f17 	ldw	r4,1340(sp)
  804400:	b00b883a 	mov	r5,r22
  804404:	d9800c04 	addi	r6,sp,48
  804408:	d9c15115 	stw	r7,1348(sp)
  80440c:	08037600 	call	803760 <__sprint_r>
  804410:	d9c15117 	ldw	r7,1348(sp)
  804414:	103ea01e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804418:	dc800e17 	ldw	r18,56(sp)
  80441c:	dc400d17 	ldw	r17,52(sp)
  804420:	dd401904 	addi	r21,sp,100
  804424:	003e1c06 	br	803c98 <___vfprintf_internal_r+0x4e0>
  804428:	d9014f17 	ldw	r4,1340(sp)
  80442c:	b00b883a 	mov	r5,r22
  804430:	d9800c04 	addi	r6,sp,48
  804434:	d9c15115 	stw	r7,1348(sp)
  804438:	08037600 	call	803760 <__sprint_r>
  80443c:	d9c15117 	ldw	r7,1348(sp)
  804440:	103e951e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804444:	dc800e17 	ldw	r18,56(sp)
  804448:	dc400d17 	ldw	r17,52(sp)
  80444c:	dd401904 	addi	r21,sp,100
  804450:	003e0406 	br	803c64 <___vfprintf_internal_r+0x4ac>
  804454:	d9000517 	ldw	r4,20(sp)
  804458:	0102520e 	bge	zero,r4,804da4 <___vfprintf_internal_r+0x15ec>
  80445c:	d9814717 	ldw	r6,1308(sp)
  804460:	21807a16 	blt	r4,r6,80464c <___vfprintf_internal_r+0xe94>
  804464:	d8814117 	ldw	r2,1284(sp)
  804468:	91a5883a 	add	r18,r18,r6
  80446c:	8c400044 	addi	r17,r17,1
  804470:	a8800015 	stw	r2,0(r21)
  804474:	008001c4 	movi	r2,7
  804478:	a9800115 	stw	r6,4(r21)
  80447c:	dc800e15 	stw	r18,56(sp)
  804480:	dc400d15 	stw	r17,52(sp)
  804484:	1442f616 	blt	r2,r17,805060 <___vfprintf_internal_r+0x18a8>
  804488:	a8c00204 	addi	r3,r21,8
  80448c:	d9414717 	ldw	r5,1308(sp)
  804490:	2161c83a 	sub	r16,r4,r5
  804494:	043f9d0e 	bge	zero,r16,80430c <___vfprintf_internal_r+0xb54>
  804498:	00800404 	movi	r2,16
  80449c:	1402130e 	bge	r2,r16,804cec <___vfprintf_internal_r+0x1534>
  8044a0:	dc400d17 	ldw	r17,52(sp)
  8044a4:	1027883a 	mov	r19,r2
  8044a8:	07002074 	movhi	fp,129
  8044ac:	e7002a84 	addi	fp,fp,170
  8044b0:	050001c4 	movi	r20,7
  8044b4:	00000306 	br	8044c4 <___vfprintf_internal_r+0xd0c>
  8044b8:	18c00204 	addi	r3,r3,8
  8044bc:	843ffc04 	addi	r16,r16,-16
  8044c0:	9c020d0e 	bge	r19,r16,804cf8 <___vfprintf_internal_r+0x1540>
  8044c4:	94800404 	addi	r18,r18,16
  8044c8:	8c400044 	addi	r17,r17,1
  8044cc:	1f000015 	stw	fp,0(r3)
  8044d0:	1cc00115 	stw	r19,4(r3)
  8044d4:	dc800e15 	stw	r18,56(sp)
  8044d8:	dc400d15 	stw	r17,52(sp)
  8044dc:	a47ff60e 	bge	r20,r17,8044b8 <___vfprintf_internal_r+0xd00>
  8044e0:	d9014f17 	ldw	r4,1340(sp)
  8044e4:	b00b883a 	mov	r5,r22
  8044e8:	d9800c04 	addi	r6,sp,48
  8044ec:	08037600 	call	803760 <__sprint_r>
  8044f0:	103e691e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  8044f4:	dc800e17 	ldw	r18,56(sp)
  8044f8:	dc400d17 	ldw	r17,52(sp)
  8044fc:	d8c01904 	addi	r3,sp,100
  804500:	003fee06 	br	8044bc <___vfprintf_internal_r+0xd04>
  804504:	d8814717 	ldw	r2,1308(sp)
  804508:	143fffc4 	addi	r16,r2,-1
  80450c:	043e970e 	bge	zero,r16,803f6c <___vfprintf_internal_r+0x7b4>
  804510:	00800404 	movi	r2,16
  804514:	1400180e 	bge	r2,r16,804578 <___vfprintf_internal_r+0xdc0>
  804518:	1029883a 	mov	r20,r2
  80451c:	07002074 	movhi	fp,129
  804520:	e7002a84 	addi	fp,fp,170
  804524:	054001c4 	movi	r21,7
  804528:	00000306 	br	804538 <___vfprintf_internal_r+0xd80>
  80452c:	9cc00204 	addi	r19,r19,8
  804530:	843ffc04 	addi	r16,r16,-16
  804534:	a400120e 	bge	r20,r16,804580 <___vfprintf_internal_r+0xdc8>
  804538:	94800404 	addi	r18,r18,16
  80453c:	8c400044 	addi	r17,r17,1
  804540:	9f000015 	stw	fp,0(r19)
  804544:	9d000115 	stw	r20,4(r19)
  804548:	dc800e15 	stw	r18,56(sp)
  80454c:	dc400d15 	stw	r17,52(sp)
  804550:	ac7ff60e 	bge	r21,r17,80452c <___vfprintf_internal_r+0xd74>
  804554:	d9014f17 	ldw	r4,1340(sp)
  804558:	b00b883a 	mov	r5,r22
  80455c:	d9800c04 	addi	r6,sp,48
  804560:	08037600 	call	803760 <__sprint_r>
  804564:	103e4c1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804568:	dc800e17 	ldw	r18,56(sp)
  80456c:	dc400d17 	ldw	r17,52(sp)
  804570:	dcc01904 	addi	r19,sp,100
  804574:	003fee06 	br	804530 <___vfprintf_internal_r+0xd78>
  804578:	07002074 	movhi	fp,129
  80457c:	e7002a84 	addi	fp,fp,170
  804580:	9425883a 	add	r18,r18,r16
  804584:	8c400044 	addi	r17,r17,1
  804588:	008001c4 	movi	r2,7
  80458c:	9f000015 	stw	fp,0(r19)
  804590:	9c000115 	stw	r16,4(r19)
  804594:	dc800e15 	stw	r18,56(sp)
  804598:	dc400d15 	stw	r17,52(sp)
  80459c:	147e720e 	bge	r2,r17,803f68 <___vfprintf_internal_r+0x7b0>
  8045a0:	d9014f17 	ldw	r4,1340(sp)
  8045a4:	b00b883a 	mov	r5,r22
  8045a8:	d9800c04 	addi	r6,sp,48
  8045ac:	08037600 	call	803760 <__sprint_r>
  8045b0:	103e391e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  8045b4:	dc800e17 	ldw	r18,56(sp)
  8045b8:	dc400d17 	ldw	r17,52(sp)
  8045bc:	dcc01904 	addi	r19,sp,100
  8045c0:	003e6a06 	br	803f6c <___vfprintf_internal_r+0x7b4>
  8045c4:	d9014f17 	ldw	r4,1340(sp)
  8045c8:	b00b883a 	mov	r5,r22
  8045cc:	d9800c04 	addi	r6,sp,48
  8045d0:	d9c15115 	stw	r7,1348(sp)
  8045d4:	08037600 	call	803760 <__sprint_r>
  8045d8:	d9c15117 	ldw	r7,1348(sp)
  8045dc:	103e2e1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  8045e0:	dc800e17 	ldw	r18,56(sp)
  8045e4:	dc400d17 	ldw	r17,52(sp)
  8045e8:	dd401904 	addi	r21,sp,100
  8045ec:	003dba06 	br	803cd8 <___vfprintf_internal_r+0x520>
  8045f0:	d9014f17 	ldw	r4,1340(sp)
  8045f4:	b00b883a 	mov	r5,r22
  8045f8:	d9800c04 	addi	r6,sp,48
  8045fc:	08037600 	call	803760 <__sprint_r>
  804600:	103e251e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804604:	dc800e17 	ldw	r18,56(sp)
  804608:	dc400d17 	ldw	r17,52(sp)
  80460c:	dcc01904 	addi	r19,sp,100
  804610:	003e4206 	br	803f1c <___vfprintf_internal_r+0x764>
  804614:	d9014f17 	ldw	r4,1340(sp)
  804618:	b00b883a 	mov	r5,r22
  80461c:	d9800c04 	addi	r6,sp,48
  804620:	08037600 	call	803760 <__sprint_r>
  804624:	103e1c1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804628:	dc800e17 	ldw	r18,56(sp)
  80462c:	dc400d17 	ldw	r17,52(sp)
  804630:	d8c01904 	addi	r3,sp,100
  804634:	003e2e06 	br	803ef0 <___vfprintf_internal_r+0x738>
  804638:	d9414c17 	ldw	r5,1328(sp)
  80463c:	2880004c 	andi	r2,r5,1
  804640:	1005003a 	cmpeq	r2,r2,zero
  804644:	103dda1e 	bne	r2,zero,803db0 <___vfprintf_internal_r+0x5f8>
  804648:	003e9f06 	br	8040c8 <___vfprintf_internal_r+0x910>
  80464c:	d8c14117 	ldw	r3,1284(sp)
  804650:	9125883a 	add	r18,r18,r4
  804654:	8c400044 	addi	r17,r17,1
  804658:	008001c4 	movi	r2,7
  80465c:	a8c00015 	stw	r3,0(r21)
  804660:	a9000115 	stw	r4,4(r21)
  804664:	dc800e15 	stw	r18,56(sp)
  804668:	dc400d15 	stw	r17,52(sp)
  80466c:	14426616 	blt	r2,r17,805008 <___vfprintf_internal_r+0x1850>
  804670:	a8c00204 	addi	r3,r21,8
  804674:	d9414917 	ldw	r5,1316(sp)
  804678:	00800044 	movi	r2,1
  80467c:	94800044 	addi	r18,r18,1
  804680:	8c400044 	addi	r17,r17,1
  804684:	18800115 	stw	r2,4(r3)
  804688:	008001c4 	movi	r2,7
  80468c:	19400015 	stw	r5,0(r3)
  804690:	dc800e15 	stw	r18,56(sp)
  804694:	dc400d15 	stw	r17,52(sp)
  804698:	2021883a 	mov	r16,r4
  80469c:	14425016 	blt	r2,r17,804fe0 <___vfprintf_internal_r+0x1828>
  8046a0:	19400204 	addi	r5,r3,8
  8046a4:	d9814717 	ldw	r6,1308(sp)
  8046a8:	8c400044 	addi	r17,r17,1
  8046ac:	dc400d15 	stw	r17,52(sp)
  8046b0:	3107c83a 	sub	r3,r6,r4
  8046b4:	d9014117 	ldw	r4,1284(sp)
  8046b8:	90e5883a 	add	r18,r18,r3
  8046bc:	28c00115 	stw	r3,4(r5)
  8046c0:	8105883a 	add	r2,r16,r4
  8046c4:	28800015 	stw	r2,0(r5)
  8046c8:	008001c4 	movi	r2,7
  8046cc:	dc800e15 	stw	r18,56(sp)
  8046d0:	147f1d16 	blt	r2,r17,804348 <___vfprintf_internal_r+0xb90>
  8046d4:	28c00204 	addi	r3,r5,8
  8046d8:	003db506 	br	803db0 <___vfprintf_internal_r+0x5f8>
  8046dc:	3c000017 	ldw	r16,0(r7)
  8046e0:	3c400117 	ldw	r17,4(r7)
  8046e4:	39800204 	addi	r6,r7,8
  8046e8:	01000044 	movi	r4,1
  8046ec:	d9814015 	stw	r6,1280(sp)
  8046f0:	d8000405 	stb	zero,16(sp)
  8046f4:	003ebe06 	br	8041f0 <___vfprintf_internal_r+0xa38>
  8046f8:	3c000017 	ldw	r16,0(r7)
  8046fc:	3c400117 	ldw	r17,4(r7)
  804700:	38800204 	addi	r2,r7,8
  804704:	d8814015 	stw	r2,1280(sp)
  804708:	003eb706 	br	8041e8 <___vfprintf_internal_r+0xa30>
  80470c:	3c000017 	ldw	r16,0(r7)
  804710:	3c400117 	ldw	r17,4(r7)
  804714:	39000204 	addi	r4,r7,8
  804718:	d9014015 	stw	r4,1280(sp)
  80471c:	0009883a 	mov	r4,zero
  804720:	d8000405 	stb	zero,16(sp)
  804724:	003eb206 	br	8041f0 <___vfprintf_internal_r+0xa38>
  804728:	38c00017 	ldw	r3,0(r7)
  80472c:	39c00104 	addi	r7,r7,4
  804730:	d8c14a15 	stw	r3,1320(sp)
  804734:	1800d10e 	bge	r3,zero,804a7c <___vfprintf_internal_r+0x12c4>
  804738:	00c7c83a 	sub	r3,zero,r3
  80473c:	d8c14a15 	stw	r3,1320(sp)
  804740:	d9014c17 	ldw	r4,1328(sp)
  804744:	b8c00007 	ldb	r3,0(r23)
  804748:	21000114 	ori	r4,r4,4
  80474c:	d9014c15 	stw	r4,1328(sp)
  804750:	003c9806 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  804754:	d9814c17 	ldw	r6,1328(sp)
  804758:	3080080c 	andi	r2,r6,32
  80475c:	1001f026 	beq	r2,zero,804f20 <___vfprintf_internal_r+0x1768>
  804760:	d9014b17 	ldw	r4,1324(sp)
  804764:	38800017 	ldw	r2,0(r7)
  804768:	39c00104 	addi	r7,r7,4
  80476c:	d9c14015 	stw	r7,1280(sp)
  804770:	2007d7fa 	srai	r3,r4,31
  804774:	d9c14017 	ldw	r7,1280(sp)
  804778:	11000015 	stw	r4,0(r2)
  80477c:	10c00115 	stw	r3,4(r2)
  804780:	003c6906 	br	803928 <___vfprintf_internal_r+0x170>
  804784:	b8c00007 	ldb	r3,0(r23)
  804788:	00801b04 	movi	r2,108
  80478c:	18824f26 	beq	r3,r2,8050cc <___vfprintf_internal_r+0x1914>
  804790:	d9414c17 	ldw	r5,1328(sp)
  804794:	29400414 	ori	r5,r5,16
  804798:	d9414c15 	stw	r5,1328(sp)
  80479c:	003c8506 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  8047a0:	d9814c17 	ldw	r6,1328(sp)
  8047a4:	b8c00007 	ldb	r3,0(r23)
  8047a8:	31800814 	ori	r6,r6,32
  8047ac:	d9814c15 	stw	r6,1328(sp)
  8047b0:	003c8006 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  8047b4:	d8814c17 	ldw	r2,1328(sp)
  8047b8:	3c000017 	ldw	r16,0(r7)
  8047bc:	00c01e04 	movi	r3,120
  8047c0:	10800094 	ori	r2,r2,2
  8047c4:	d8814c15 	stw	r2,1328(sp)
  8047c8:	39c00104 	addi	r7,r7,4
  8047cc:	01402074 	movhi	r5,129
  8047d0:	29401304 	addi	r5,r5,76
  8047d4:	00800c04 	movi	r2,48
  8047d8:	0023883a 	mov	r17,zero
  8047dc:	01000084 	movi	r4,2
  8047e0:	d9c14015 	stw	r7,1280(sp)
  8047e4:	d8c14d15 	stw	r3,1332(sp)
  8047e8:	d9414415 	stw	r5,1296(sp)
  8047ec:	d8800445 	stb	r2,17(sp)
  8047f0:	d8c00485 	stb	r3,18(sp)
  8047f4:	d8000405 	stb	zero,16(sp)
  8047f8:	003e7d06 	br	8041f0 <___vfprintf_internal_r+0xa38>
  8047fc:	d8814c17 	ldw	r2,1328(sp)
  804800:	b8c00007 	ldb	r3,0(r23)
  804804:	10801014 	ori	r2,r2,64
  804808:	d8814c15 	stw	r2,1328(sp)
  80480c:	003c6906 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  804810:	d9414c17 	ldw	r5,1328(sp)
  804814:	2880020c 	andi	r2,r5,8
  804818:	1001df26 	beq	r2,zero,804f98 <___vfprintf_internal_r+0x17e0>
  80481c:	39800017 	ldw	r6,0(r7)
  804820:	38800204 	addi	r2,r7,8
  804824:	d8814015 	stw	r2,1280(sp)
  804828:	d9814215 	stw	r6,1288(sp)
  80482c:	39c00117 	ldw	r7,4(r7)
  804830:	d9c14315 	stw	r7,1292(sp)
  804834:	d9014217 	ldw	r4,1288(sp)
  804838:	d9414317 	ldw	r5,1292(sp)
  80483c:	08093840 	call	809384 <__isinfd>
  804840:	10021726 	beq	r2,zero,8050a0 <___vfprintf_internal_r+0x18e8>
  804844:	d9014217 	ldw	r4,1288(sp)
  804848:	d9414317 	ldw	r5,1292(sp)
  80484c:	000d883a 	mov	r6,zero
  804850:	000f883a 	mov	r7,zero
  804854:	080b35c0 	call	80b35c <__ltdf2>
  804858:	1002ca16 	blt	r2,zero,805384 <___vfprintf_internal_r+0x1bcc>
  80485c:	d9414d17 	ldw	r5,1332(sp)
  804860:	008011c4 	movi	r2,71
  804864:	11420a16 	blt	r2,r5,805090 <___vfprintf_internal_r+0x18d8>
  804868:	01802074 	movhi	r6,129
  80486c:	31801804 	addi	r6,r6,96
  804870:	d9814115 	stw	r6,1284(sp)
  804874:	d9014c17 	ldw	r4,1328(sp)
  804878:	00c000c4 	movi	r3,3
  80487c:	00bfdfc4 	movi	r2,-129
  804880:	2088703a 	and	r4,r4,r2
  804884:	180f883a 	mov	r7,r3
  804888:	d8c14515 	stw	r3,1300(sp)
  80488c:	d9014c15 	stw	r4,1328(sp)
  804890:	d8014615 	stw	zero,1304(sp)
  804894:	003e6a06 	br	804240 <___vfprintf_internal_r+0xa88>
  804898:	38800017 	ldw	r2,0(r7)
  80489c:	00c00044 	movi	r3,1
  8048a0:	39c00104 	addi	r7,r7,4
  8048a4:	d9c14015 	stw	r7,1280(sp)
  8048a8:	d9000f04 	addi	r4,sp,60
  8048ac:	180f883a 	mov	r7,r3
  8048b0:	d8c14515 	stw	r3,1300(sp)
  8048b4:	d9014115 	stw	r4,1284(sp)
  8048b8:	d8800f05 	stb	r2,60(sp)
  8048bc:	d8000405 	stb	zero,16(sp)
  8048c0:	003cac06 	br	803b74 <___vfprintf_internal_r+0x3bc>
  8048c4:	01402074 	movhi	r5,129
  8048c8:	29401e04 	addi	r5,r5,120
  8048cc:	d9414415 	stw	r5,1296(sp)
  8048d0:	d9814c17 	ldw	r6,1328(sp)
  8048d4:	3080080c 	andi	r2,r6,32
  8048d8:	1000f926 	beq	r2,zero,804cc0 <___vfprintf_internal_r+0x1508>
  8048dc:	3c000017 	ldw	r16,0(r7)
  8048e0:	3c400117 	ldw	r17,4(r7)
  8048e4:	38800204 	addi	r2,r7,8
  8048e8:	d8814015 	stw	r2,1280(sp)
  8048ec:	d9414c17 	ldw	r5,1328(sp)
  8048f0:	2880004c 	andi	r2,r5,1
  8048f4:	1005003a 	cmpeq	r2,r2,zero
  8048f8:	1000b31e 	bne	r2,zero,804bc8 <___vfprintf_internal_r+0x1410>
  8048fc:	8444b03a 	or	r2,r16,r17
  804900:	1000b126 	beq	r2,zero,804bc8 <___vfprintf_internal_r+0x1410>
  804904:	d9814d17 	ldw	r6,1332(sp)
  804908:	29400094 	ori	r5,r5,2
  80490c:	00800c04 	movi	r2,48
  804910:	01000084 	movi	r4,2
  804914:	d9414c15 	stw	r5,1328(sp)
  804918:	d8800445 	stb	r2,17(sp)
  80491c:	d9800485 	stb	r6,18(sp)
  804920:	d8000405 	stb	zero,16(sp)
  804924:	003e3206 	br	8041f0 <___vfprintf_internal_r+0xa38>
  804928:	01802074 	movhi	r6,129
  80492c:	31801304 	addi	r6,r6,76
  804930:	d9814415 	stw	r6,1296(sp)
  804934:	003fe606 	br	8048d0 <___vfprintf_internal_r+0x1118>
  804938:	00800ac4 	movi	r2,43
  80493c:	d8800405 	stb	r2,16(sp)
  804940:	b8c00007 	ldb	r3,0(r23)
  804944:	003c1b06 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  804948:	d8814c17 	ldw	r2,1328(sp)
  80494c:	b8c00007 	ldb	r3,0(r23)
  804950:	10800054 	ori	r2,r2,1
  804954:	d8814c15 	stw	r2,1328(sp)
  804958:	003c1606 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  80495c:	d8800407 	ldb	r2,16(sp)
  804960:	1000461e 	bne	r2,zero,804a7c <___vfprintf_internal_r+0x12c4>
  804964:	00800804 	movi	r2,32
  804968:	d8800405 	stb	r2,16(sp)
  80496c:	b8c00007 	ldb	r3,0(r23)
  804970:	003c1006 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  804974:	d9814c17 	ldw	r6,1328(sp)
  804978:	b8c00007 	ldb	r3,0(r23)
  80497c:	31800214 	ori	r6,r6,8
  804980:	d9814c15 	stw	r6,1328(sp)
  804984:	003c0b06 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  804988:	0007883a 	mov	r3,zero
  80498c:	01000244 	movi	r4,9
  804990:	188002a4 	muli	r2,r3,10
  804994:	b8c00007 	ldb	r3,0(r23)
  804998:	d9814d17 	ldw	r6,1332(sp)
  80499c:	bdc00044 	addi	r23,r23,1
  8049a0:	d8c14d15 	stw	r3,1332(sp)
  8049a4:	d9414d17 	ldw	r5,1332(sp)
  8049a8:	3085883a 	add	r2,r6,r2
  8049ac:	10fff404 	addi	r3,r2,-48
  8049b0:	28bff404 	addi	r2,r5,-48
  8049b4:	20bff62e 	bgeu	r4,r2,804990 <___vfprintf_internal_r+0x11d8>
  8049b8:	d8c14a15 	stw	r3,1320(sp)
  8049bc:	003bff06 	br	8039bc <___vfprintf_internal_r+0x204>
  8049c0:	d9414c17 	ldw	r5,1328(sp)
  8049c4:	b8c00007 	ldb	r3,0(r23)
  8049c8:	29402014 	ori	r5,r5,128
  8049cc:	d9414c15 	stw	r5,1328(sp)
  8049d0:	003bf806 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  8049d4:	b8c00007 	ldb	r3,0(r23)
  8049d8:	00800a84 	movi	r2,42
  8049dc:	bdc00044 	addi	r23,r23,1
  8049e0:	18831526 	beq	r3,r2,805638 <___vfprintf_internal_r+0x1e80>
  8049e4:	d8c14d15 	stw	r3,1332(sp)
  8049e8:	18bff404 	addi	r2,r3,-48
  8049ec:	00c00244 	movi	r3,9
  8049f0:	18827836 	bltu	r3,r2,8053d4 <___vfprintf_internal_r+0x1c1c>
  8049f4:	000d883a 	mov	r6,zero
  8049f8:	308002a4 	muli	r2,r6,10
  8049fc:	b9800007 	ldb	r6,0(r23)
  804a00:	d9414d17 	ldw	r5,1332(sp)
  804a04:	bdc00044 	addi	r23,r23,1
  804a08:	d9814d15 	stw	r6,1332(sp)
  804a0c:	d9014d17 	ldw	r4,1332(sp)
  804a10:	1145883a 	add	r2,r2,r5
  804a14:	11bff404 	addi	r6,r2,-48
  804a18:	20bff404 	addi	r2,r4,-48
  804a1c:	18bff62e 	bgeu	r3,r2,8049f8 <___vfprintf_internal_r+0x1240>
  804a20:	3027883a 	mov	r19,r6
  804a24:	303be50e 	bge	r6,zero,8039bc <___vfprintf_internal_r+0x204>
  804a28:	04ffffc4 	movi	r19,-1
  804a2c:	003be306 	br	8039bc <___vfprintf_internal_r+0x204>
  804a30:	d8000405 	stb	zero,16(sp)
  804a34:	39800017 	ldw	r6,0(r7)
  804a38:	39c00104 	addi	r7,r7,4
  804a3c:	d9c14015 	stw	r7,1280(sp)
  804a40:	d9814115 	stw	r6,1284(sp)
  804a44:	3001c926 	beq	r6,zero,80516c <___vfprintf_internal_r+0x19b4>
  804a48:	98000e16 	blt	r19,zero,804a84 <___vfprintf_internal_r+0x12cc>
  804a4c:	d9014117 	ldw	r4,1284(sp)
  804a50:	000b883a 	mov	r5,zero
  804a54:	980d883a 	mov	r6,r19
  804a58:	08081340 	call	808134 <memchr>
  804a5c:	10025926 	beq	r2,zero,8053c4 <___vfprintf_internal_r+0x1c0c>
  804a60:	d8c14117 	ldw	r3,1284(sp)
  804a64:	10cfc83a 	sub	r7,r2,r3
  804a68:	99c19e16 	blt	r19,r7,8050e4 <___vfprintf_internal_r+0x192c>
  804a6c:	d9c14515 	stw	r7,1300(sp)
  804a70:	38000916 	blt	r7,zero,804a98 <___vfprintf_internal_r+0x12e0>
  804a74:	d8014615 	stw	zero,1304(sp)
  804a78:	003df106 	br	804240 <___vfprintf_internal_r+0xa88>
  804a7c:	b8c00007 	ldb	r3,0(r23)
  804a80:	003bcc06 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  804a84:	d9014117 	ldw	r4,1284(sp)
  804a88:	08036300 	call	803630 <strlen>
  804a8c:	d8814515 	stw	r2,1300(sp)
  804a90:	100f883a 	mov	r7,r2
  804a94:	103ff70e 	bge	r2,zero,804a74 <___vfprintf_internal_r+0x12bc>
  804a98:	d8014515 	stw	zero,1300(sp)
  804a9c:	d8014615 	stw	zero,1304(sp)
  804aa0:	003de706 	br	804240 <___vfprintf_internal_r+0xa88>
  804aa4:	20c03fcc 	andi	r3,r4,255
  804aa8:	00800044 	movi	r2,1
  804aac:	18802d26 	beq	r3,r2,804b64 <___vfprintf_internal_r+0x13ac>
  804ab0:	18800e36 	bltu	r3,r2,804aec <___vfprintf_internal_r+0x1334>
  804ab4:	00800084 	movi	r2,2
  804ab8:	1880fa26 	beq	r3,r2,804ea4 <___vfprintf_internal_r+0x16ec>
  804abc:	01002074 	movhi	r4,129
  804ac0:	21002304 	addi	r4,r4,140
  804ac4:	08036300 	call	803630 <strlen>
  804ac8:	100f883a 	mov	r7,r2
  804acc:	dcc14515 	stw	r19,1300(sp)
  804ad0:	9880010e 	bge	r19,r2,804ad8 <___vfprintf_internal_r+0x1320>
  804ad4:	d8814515 	stw	r2,1300(sp)
  804ad8:	00802074 	movhi	r2,129
  804adc:	10802304 	addi	r2,r2,140
  804ae0:	dcc14615 	stw	r19,1304(sp)
  804ae4:	d8814115 	stw	r2,1284(sp)
  804ae8:	003dd506 	br	804240 <___vfprintf_internal_r+0xa88>
  804aec:	d9401904 	addi	r5,sp,100
  804af0:	dd000f04 	addi	r20,sp,60
  804af4:	d9414115 	stw	r5,1284(sp)
  804af8:	880a977a 	slli	r5,r17,29
  804afc:	d9814117 	ldw	r6,1284(sp)
  804b00:	8004d0fa 	srli	r2,r16,3
  804b04:	8806d0fa 	srli	r3,r17,3
  804b08:	810001cc 	andi	r4,r16,7
  804b0c:	2884b03a 	or	r2,r5,r2
  804b10:	31bfffc4 	addi	r6,r6,-1
  804b14:	21000c04 	addi	r4,r4,48
  804b18:	d9814115 	stw	r6,1284(sp)
  804b1c:	10cab03a 	or	r5,r2,r3
  804b20:	31000005 	stb	r4,0(r6)
  804b24:	1021883a 	mov	r16,r2
  804b28:	1823883a 	mov	r17,r3
  804b2c:	283ff21e 	bne	r5,zero,804af8 <___vfprintf_internal_r+0x1340>
  804b30:	d8c14c17 	ldw	r3,1328(sp)
  804b34:	1880004c 	andi	r2,r3,1
  804b38:	1005003a 	cmpeq	r2,r2,zero
  804b3c:	103db91e 	bne	r2,zero,804224 <___vfprintf_internal_r+0xa6c>
  804b40:	20803fcc 	andi	r2,r4,255
  804b44:	1080201c 	xori	r2,r2,128
  804b48:	10bfe004 	addi	r2,r2,-128
  804b4c:	00c00c04 	movi	r3,48
  804b50:	10fdb426 	beq	r2,r3,804224 <___vfprintf_internal_r+0xa6c>
  804b54:	31bfffc4 	addi	r6,r6,-1
  804b58:	d9814115 	stw	r6,1284(sp)
  804b5c:	30c00005 	stb	r3,0(r6)
  804b60:	003db006 	br	804224 <___vfprintf_internal_r+0xa6c>
  804b64:	88800068 	cmpgeui	r2,r17,1
  804b68:	10002c1e 	bne	r2,zero,804c1c <___vfprintf_internal_r+0x1464>
  804b6c:	8800021e 	bne	r17,zero,804b78 <___vfprintf_internal_r+0x13c0>
  804b70:	00800244 	movi	r2,9
  804b74:	14002936 	bltu	r2,r16,804c1c <___vfprintf_internal_r+0x1464>
  804b78:	d90018c4 	addi	r4,sp,99
  804b7c:	dd000f04 	addi	r20,sp,60
  804b80:	d9014115 	stw	r4,1284(sp)
  804b84:	d9014117 	ldw	r4,1284(sp)
  804b88:	80800c04 	addi	r2,r16,48
  804b8c:	20800005 	stb	r2,0(r4)
  804b90:	003da406 	br	804224 <___vfprintf_internal_r+0xa6c>
  804b94:	dc400d17 	ldw	r17,52(sp)
  804b98:	07002074 	movhi	fp,129
  804b9c:	e7002a84 	addi	fp,fp,170
  804ba0:	9425883a 	add	r18,r18,r16
  804ba4:	8c400044 	addi	r17,r17,1
  804ba8:	008001c4 	movi	r2,7
  804bac:	1f000015 	stw	fp,0(r3)
  804bb0:	1c000115 	stw	r16,4(r3)
  804bb4:	dc800e15 	stw	r18,56(sp)
  804bb8:	dc400d15 	stw	r17,52(sp)
  804bbc:	147de216 	blt	r2,r17,804348 <___vfprintf_internal_r+0xb90>
  804bc0:	18c00204 	addi	r3,r3,8
  804bc4:	003c7a06 	br	803db0 <___vfprintf_internal_r+0x5f8>
  804bc8:	01000084 	movi	r4,2
  804bcc:	d8000405 	stb	zero,16(sp)
  804bd0:	003d8706 	br	8041f0 <___vfprintf_internal_r+0xa38>
  804bd4:	d9814c17 	ldw	r6,1328(sp)
  804bd8:	30c4703a 	and	r2,r6,r3
  804bdc:	1005003a 	cmpeq	r2,r2,zero
  804be0:	103cb926 	beq	r2,zero,803ec8 <___vfprintf_internal_r+0x710>
  804be4:	d9014117 	ldw	r4,1284(sp)
  804be8:	94800044 	addi	r18,r18,1
  804bec:	8c400044 	addi	r17,r17,1
  804bf0:	008001c4 	movi	r2,7
  804bf4:	a9000015 	stw	r4,0(r21)
  804bf8:	a8c00115 	stw	r3,4(r21)
  804bfc:	dc800e15 	stw	r18,56(sp)
  804c00:	dc400d15 	stw	r17,52(sp)
  804c04:	147e6616 	blt	r2,r17,8045a0 <___vfprintf_internal_r+0xde8>
  804c08:	acc00204 	addi	r19,r21,8
  804c0c:	003cd706 	br	803f6c <___vfprintf_internal_r+0x7b4>
  804c10:	07002074 	movhi	fp,129
  804c14:	e7002a84 	addi	fp,fp,170
  804c18:	003c4f06 	br	803d58 <___vfprintf_internal_r+0x5a0>
  804c1c:	dd000f04 	addi	r20,sp,60
  804c20:	dc801904 	addi	r18,sp,100
  804c24:	8009883a 	mov	r4,r16
  804c28:	880b883a 	mov	r5,r17
  804c2c:	01800284 	movi	r6,10
  804c30:	000f883a 	mov	r7,zero
  804c34:	080a06c0 	call	80a06c <__umoddi3>
  804c38:	12000c04 	addi	r8,r2,48
  804c3c:	94bfffc4 	addi	r18,r18,-1
  804c40:	8009883a 	mov	r4,r16
  804c44:	880b883a 	mov	r5,r17
  804c48:	01800284 	movi	r6,10
  804c4c:	000f883a 	mov	r7,zero
  804c50:	92000005 	stb	r8,0(r18)
  804c54:	0809a900 	call	809a90 <__udivdi3>
  804c58:	1009883a 	mov	r4,r2
  804c5c:	1021883a 	mov	r16,r2
  804c60:	18800068 	cmpgeui	r2,r3,1
  804c64:	1823883a 	mov	r17,r3
  804c68:	103fee1e 	bne	r2,zero,804c24 <___vfprintf_internal_r+0x146c>
  804c6c:	1800021e 	bne	r3,zero,804c78 <___vfprintf_internal_r+0x14c0>
  804c70:	00800244 	movi	r2,9
  804c74:	113feb36 	bltu	r2,r4,804c24 <___vfprintf_internal_r+0x146c>
  804c78:	94bfffc4 	addi	r18,r18,-1
  804c7c:	dc814115 	stw	r18,1284(sp)
  804c80:	003fc006 	br	804b84 <___vfprintf_internal_r+0x13cc>
  804c84:	d9014c17 	ldw	r4,1328(sp)
  804c88:	2080004c 	andi	r2,r4,1
  804c8c:	10009a1e 	bne	r2,zero,804ef8 <___vfprintf_internal_r+0x1740>
  804c90:	d9401904 	addi	r5,sp,100
  804c94:	dd000f04 	addi	r20,sp,60
  804c98:	d9414115 	stw	r5,1284(sp)
  804c9c:	003d6106 	br	804224 <___vfprintf_internal_r+0xa6c>
  804ca0:	d9014f17 	ldw	r4,1340(sp)
  804ca4:	b00b883a 	mov	r5,r22
  804ca8:	d9800c04 	addi	r6,sp,48
  804cac:	08037600 	call	803760 <__sprint_r>
  804cb0:	103c791e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804cb4:	dc800e17 	ldw	r18,56(sp)
  804cb8:	d8c01904 	addi	r3,sp,100
  804cbc:	003cff06 	br	8040bc <___vfprintf_internal_r+0x904>
  804cc0:	d8c14c17 	ldw	r3,1328(sp)
  804cc4:	1880040c 	andi	r2,r3,16
  804cc8:	1000711e 	bne	r2,zero,804e90 <___vfprintf_internal_r+0x16d8>
  804ccc:	d9014c17 	ldw	r4,1328(sp)
  804cd0:	2080100c 	andi	r2,r4,64
  804cd4:	10006e26 	beq	r2,zero,804e90 <___vfprintf_internal_r+0x16d8>
  804cd8:	3c00000b 	ldhu	r16,0(r7)
  804cdc:	0023883a 	mov	r17,zero
  804ce0:	39c00104 	addi	r7,r7,4
  804ce4:	d9c14015 	stw	r7,1280(sp)
  804ce8:	003f0006 	br	8048ec <___vfprintf_internal_r+0x1134>
  804cec:	dc400d17 	ldw	r17,52(sp)
  804cf0:	07002074 	movhi	fp,129
  804cf4:	e7002a84 	addi	fp,fp,170
  804cf8:	9425883a 	add	r18,r18,r16
  804cfc:	8c400044 	addi	r17,r17,1
  804d00:	008001c4 	movi	r2,7
  804d04:	1f000015 	stw	fp,0(r3)
  804d08:	1c000115 	stw	r16,4(r3)
  804d0c:	dc800e15 	stw	r18,56(sp)
  804d10:	dc400d15 	stw	r17,52(sp)
  804d14:	147d7616 	blt	r2,r17,8042f0 <___vfprintf_internal_r+0xb38>
  804d18:	18c00204 	addi	r3,r3,8
  804d1c:	003d7b06 	br	80430c <___vfprintf_internal_r+0xb54>
  804d20:	dc800e17 	ldw	r18,56(sp)
  804d24:	dc400d17 	ldw	r17,52(sp)
  804d28:	07002074 	movhi	fp,129
  804d2c:	e7002e84 	addi	fp,fp,186
  804d30:	003bc006 	br	803c34 <___vfprintf_internal_r+0x47c>
  804d34:	d9014f17 	ldw	r4,1340(sp)
  804d38:	b00b883a 	mov	r5,r22
  804d3c:	d9800c04 	addi	r6,sp,48
  804d40:	08037600 	call	803760 <__sprint_r>
  804d44:	103c541e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804d48:	dc800e17 	ldw	r18,56(sp)
  804d4c:	d8c01904 	addi	r3,sp,100
  804d50:	003ce906 	br	8040f8 <___vfprintf_internal_r+0x940>
  804d54:	3c000017 	ldw	r16,0(r7)
  804d58:	0009883a 	mov	r4,zero
  804d5c:	39c00104 	addi	r7,r7,4
  804d60:	0023883a 	mov	r17,zero
  804d64:	d9c14015 	stw	r7,1280(sp)
  804d68:	d8000405 	stb	zero,16(sp)
  804d6c:	003d2006 	br	8041f0 <___vfprintf_internal_r+0xa38>
  804d70:	38800017 	ldw	r2,0(r7)
  804d74:	39c00104 	addi	r7,r7,4
  804d78:	d9c14015 	stw	r7,1280(sp)
  804d7c:	1023d7fa 	srai	r17,r2,31
  804d80:	1021883a 	mov	r16,r2
  804d84:	003d1806 	br	8041e8 <___vfprintf_internal_r+0xa30>
  804d88:	3c000017 	ldw	r16,0(r7)
  804d8c:	01000044 	movi	r4,1
  804d90:	39c00104 	addi	r7,r7,4
  804d94:	0023883a 	mov	r17,zero
  804d98:	d9c14015 	stw	r7,1280(sp)
  804d9c:	d8000405 	stb	zero,16(sp)
  804da0:	003d1306 	br	8041f0 <___vfprintf_internal_r+0xa38>
  804da4:	00802074 	movhi	r2,129
  804da8:	10802a04 	addi	r2,r2,168
  804dac:	94800044 	addi	r18,r18,1
  804db0:	8c400044 	addi	r17,r17,1
  804db4:	a8800015 	stw	r2,0(r21)
  804db8:	00c00044 	movi	r3,1
  804dbc:	008001c4 	movi	r2,7
  804dc0:	a8c00115 	stw	r3,4(r21)
  804dc4:	dc800e15 	stw	r18,56(sp)
  804dc8:	dc400d15 	stw	r17,52(sp)
  804dcc:	1440ca16 	blt	r2,r17,8050f8 <___vfprintf_internal_r+0x1940>
  804dd0:	a8c00204 	addi	r3,r21,8
  804dd4:	2000061e 	bne	r4,zero,804df0 <___vfprintf_internal_r+0x1638>
  804dd8:	d9414717 	ldw	r5,1308(sp)
  804ddc:	2800041e 	bne	r5,zero,804df0 <___vfprintf_internal_r+0x1638>
  804de0:	d9814c17 	ldw	r6,1328(sp)
  804de4:	3080004c 	andi	r2,r6,1
  804de8:	1005003a 	cmpeq	r2,r2,zero
  804dec:	103bf01e 	bne	r2,zero,803db0 <___vfprintf_internal_r+0x5f8>
  804df0:	00800044 	movi	r2,1
  804df4:	dc400d17 	ldw	r17,52(sp)
  804df8:	18800115 	stw	r2,4(r3)
  804dfc:	d8814917 	ldw	r2,1316(sp)
  804e00:	94800044 	addi	r18,r18,1
  804e04:	8c400044 	addi	r17,r17,1
  804e08:	18800015 	stw	r2,0(r3)
  804e0c:	008001c4 	movi	r2,7
  804e10:	dc800e15 	stw	r18,56(sp)
  804e14:	dc400d15 	stw	r17,52(sp)
  804e18:	1440ca16 	blt	r2,r17,805144 <___vfprintf_internal_r+0x198c>
  804e1c:	18c00204 	addi	r3,r3,8
  804e20:	0121c83a 	sub	r16,zero,r4
  804e24:	0400500e 	bge	zero,r16,804f68 <___vfprintf_internal_r+0x17b0>
  804e28:	00800404 	movi	r2,16
  804e2c:	1400800e 	bge	r2,r16,805030 <___vfprintf_internal_r+0x1878>
  804e30:	1027883a 	mov	r19,r2
  804e34:	07002074 	movhi	fp,129
  804e38:	e7002a84 	addi	fp,fp,170
  804e3c:	050001c4 	movi	r20,7
  804e40:	00000306 	br	804e50 <___vfprintf_internal_r+0x1698>
  804e44:	18c00204 	addi	r3,r3,8
  804e48:	843ffc04 	addi	r16,r16,-16
  804e4c:	9c007a0e 	bge	r19,r16,805038 <___vfprintf_internal_r+0x1880>
  804e50:	94800404 	addi	r18,r18,16
  804e54:	8c400044 	addi	r17,r17,1
  804e58:	1f000015 	stw	fp,0(r3)
  804e5c:	1cc00115 	stw	r19,4(r3)
  804e60:	dc800e15 	stw	r18,56(sp)
  804e64:	dc400d15 	stw	r17,52(sp)
  804e68:	a47ff60e 	bge	r20,r17,804e44 <___vfprintf_internal_r+0x168c>
  804e6c:	d9014f17 	ldw	r4,1340(sp)
  804e70:	b00b883a 	mov	r5,r22
  804e74:	d9800c04 	addi	r6,sp,48
  804e78:	08037600 	call	803760 <__sprint_r>
  804e7c:	103c061e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804e80:	dc800e17 	ldw	r18,56(sp)
  804e84:	dc400d17 	ldw	r17,52(sp)
  804e88:	d8c01904 	addi	r3,sp,100
  804e8c:	003fee06 	br	804e48 <___vfprintf_internal_r+0x1690>
  804e90:	3c000017 	ldw	r16,0(r7)
  804e94:	0023883a 	mov	r17,zero
  804e98:	39c00104 	addi	r7,r7,4
  804e9c:	d9c14015 	stw	r7,1280(sp)
  804ea0:	003e9206 	br	8048ec <___vfprintf_internal_r+0x1134>
  804ea4:	d9401904 	addi	r5,sp,100
  804ea8:	dd000f04 	addi	r20,sp,60
  804eac:	d9414115 	stw	r5,1284(sp)
  804eb0:	d9814417 	ldw	r6,1296(sp)
  804eb4:	880a973a 	slli	r5,r17,28
  804eb8:	8004d13a 	srli	r2,r16,4
  804ebc:	810003cc 	andi	r4,r16,15
  804ec0:	3109883a 	add	r4,r6,r4
  804ec4:	2884b03a 	or	r2,r5,r2
  804ec8:	21400003 	ldbu	r5,0(r4)
  804ecc:	d9014117 	ldw	r4,1284(sp)
  804ed0:	8806d13a 	srli	r3,r17,4
  804ed4:	1021883a 	mov	r16,r2
  804ed8:	213fffc4 	addi	r4,r4,-1
  804edc:	d9014115 	stw	r4,1284(sp)
  804ee0:	d9814117 	ldw	r6,1284(sp)
  804ee4:	10c8b03a 	or	r4,r2,r3
  804ee8:	1823883a 	mov	r17,r3
  804eec:	31400005 	stb	r5,0(r6)
  804ef0:	203fef1e 	bne	r4,zero,804eb0 <___vfprintf_internal_r+0x16f8>
  804ef4:	003ccb06 	br	804224 <___vfprintf_internal_r+0xa6c>
  804ef8:	00800c04 	movi	r2,48
  804efc:	d98018c4 	addi	r6,sp,99
  804f00:	dd000f04 	addi	r20,sp,60
  804f04:	d88018c5 	stb	r2,99(sp)
  804f08:	d9814115 	stw	r6,1284(sp)
  804f0c:	003cc506 	br	804224 <___vfprintf_internal_r+0xa6c>
  804f10:	dc400d17 	ldw	r17,52(sp)
  804f14:	07002074 	movhi	fp,129
  804f18:	e7002e84 	addi	fp,fp,186
  804f1c:	003bc706 	br	803e3c <___vfprintf_internal_r+0x684>
  804f20:	d9414c17 	ldw	r5,1328(sp)
  804f24:	2880040c 	andi	r2,r5,16
  804f28:	10007c26 	beq	r2,zero,80511c <___vfprintf_internal_r+0x1964>
  804f2c:	38800017 	ldw	r2,0(r7)
  804f30:	39c00104 	addi	r7,r7,4
  804f34:	d9c14015 	stw	r7,1280(sp)
  804f38:	d9814b17 	ldw	r6,1324(sp)
  804f3c:	d9c14017 	ldw	r7,1280(sp)
  804f40:	11800015 	stw	r6,0(r2)
  804f44:	003a7806 	br	803928 <___vfprintf_internal_r+0x170>
  804f48:	d9014f17 	ldw	r4,1340(sp)
  804f4c:	b00b883a 	mov	r5,r22
  804f50:	d9800c04 	addi	r6,sp,48
  804f54:	08037600 	call	803760 <__sprint_r>
  804f58:	103bcf1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804f5c:	dc800e17 	ldw	r18,56(sp)
  804f60:	dc400d17 	ldw	r17,52(sp)
  804f64:	d8c01904 	addi	r3,sp,100
  804f68:	d9014717 	ldw	r4,1308(sp)
  804f6c:	d9414117 	ldw	r5,1284(sp)
  804f70:	8c400044 	addi	r17,r17,1
  804f74:	9125883a 	add	r18,r18,r4
  804f78:	008001c4 	movi	r2,7
  804f7c:	19400015 	stw	r5,0(r3)
  804f80:	19000115 	stw	r4,4(r3)
  804f84:	dc800e15 	stw	r18,56(sp)
  804f88:	dc400d15 	stw	r17,52(sp)
  804f8c:	147cee16 	blt	r2,r17,804348 <___vfprintf_internal_r+0xb90>
  804f90:	18c00204 	addi	r3,r3,8
  804f94:	003b8606 	br	803db0 <___vfprintf_internal_r+0x5f8>
  804f98:	38c00017 	ldw	r3,0(r7)
  804f9c:	39000204 	addi	r4,r7,8
  804fa0:	d9014015 	stw	r4,1280(sp)
  804fa4:	d8c14215 	stw	r3,1288(sp)
  804fa8:	39c00117 	ldw	r7,4(r7)
  804fac:	d9c14315 	stw	r7,1292(sp)
  804fb0:	003e2006 	br	804834 <___vfprintf_internal_r+0x107c>
  804fb4:	0005883a 	mov	r2,zero
  804fb8:	1409c83a 	sub	r4,r2,r16
  804fbc:	1105803a 	cmpltu	r2,r2,r4
  804fc0:	044bc83a 	sub	r5,zero,r17
  804fc4:	2885c83a 	sub	r2,r5,r2
  804fc8:	2021883a 	mov	r16,r4
  804fcc:	1023883a 	mov	r17,r2
  804fd0:	01000044 	movi	r4,1
  804fd4:	00800b44 	movi	r2,45
  804fd8:	d8800405 	stb	r2,16(sp)
  804fdc:	003c8406 	br	8041f0 <___vfprintf_internal_r+0xa38>
  804fe0:	d9014f17 	ldw	r4,1340(sp)
  804fe4:	b00b883a 	mov	r5,r22
  804fe8:	d9800c04 	addi	r6,sp,48
  804fec:	08037600 	call	803760 <__sprint_r>
  804ff0:	103ba91e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  804ff4:	dc800e17 	ldw	r18,56(sp)
  804ff8:	dc400d17 	ldw	r17,52(sp)
  804ffc:	d9000517 	ldw	r4,20(sp)
  805000:	d9401904 	addi	r5,sp,100
  805004:	003da706 	br	8046a4 <___vfprintf_internal_r+0xeec>
  805008:	d9014f17 	ldw	r4,1340(sp)
  80500c:	b00b883a 	mov	r5,r22
  805010:	d9800c04 	addi	r6,sp,48
  805014:	08037600 	call	803760 <__sprint_r>
  805018:	103b9f1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  80501c:	dc800e17 	ldw	r18,56(sp)
  805020:	dc400d17 	ldw	r17,52(sp)
  805024:	d9000517 	ldw	r4,20(sp)
  805028:	d8c01904 	addi	r3,sp,100
  80502c:	003d9106 	br	804674 <___vfprintf_internal_r+0xebc>
  805030:	07002074 	movhi	fp,129
  805034:	e7002a84 	addi	fp,fp,170
  805038:	9425883a 	add	r18,r18,r16
  80503c:	8c400044 	addi	r17,r17,1
  805040:	008001c4 	movi	r2,7
  805044:	1f000015 	stw	fp,0(r3)
  805048:	1c000115 	stw	r16,4(r3)
  80504c:	dc800e15 	stw	r18,56(sp)
  805050:	dc400d15 	stw	r17,52(sp)
  805054:	147fbc16 	blt	r2,r17,804f48 <___vfprintf_internal_r+0x1790>
  805058:	18c00204 	addi	r3,r3,8
  80505c:	003fc206 	br	804f68 <___vfprintf_internal_r+0x17b0>
  805060:	d9014f17 	ldw	r4,1340(sp)
  805064:	b00b883a 	mov	r5,r22
  805068:	d9800c04 	addi	r6,sp,48
  80506c:	08037600 	call	803760 <__sprint_r>
  805070:	103b891e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  805074:	dc800e17 	ldw	r18,56(sp)
  805078:	d9000517 	ldw	r4,20(sp)
  80507c:	d8c01904 	addi	r3,sp,100
  805080:	003d0206 	br	80448c <___vfprintf_internal_r+0xcd4>
  805084:	07002074 	movhi	fp,129
  805088:	e7002a84 	addi	fp,fp,170
  80508c:	003be406 	br	804020 <___vfprintf_internal_r+0x868>
  805090:	00802074 	movhi	r2,129
  805094:	10801904 	addi	r2,r2,100
  805098:	d8814115 	stw	r2,1284(sp)
  80509c:	003df506 	br	804874 <___vfprintf_internal_r+0x10bc>
  8050a0:	d9014217 	ldw	r4,1288(sp)
  8050a4:	d9414317 	ldw	r5,1292(sp)
  8050a8:	08093c40 	call	8093c4 <__isnand>
  8050ac:	10003926 	beq	r2,zero,805194 <___vfprintf_internal_r+0x19dc>
  8050b0:	d9414d17 	ldw	r5,1332(sp)
  8050b4:	008011c4 	movi	r2,71
  8050b8:	1140ce16 	blt	r2,r5,8053f4 <___vfprintf_internal_r+0x1c3c>
  8050bc:	01802074 	movhi	r6,129
  8050c0:	31801a04 	addi	r6,r6,104
  8050c4:	d9814115 	stw	r6,1284(sp)
  8050c8:	003dea06 	br	804874 <___vfprintf_internal_r+0x10bc>
  8050cc:	d9014c17 	ldw	r4,1328(sp)
  8050d0:	bdc00044 	addi	r23,r23,1
  8050d4:	b8c00007 	ldb	r3,0(r23)
  8050d8:	21000814 	ori	r4,r4,32
  8050dc:	d9014c15 	stw	r4,1328(sp)
  8050e0:	003a3406 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  8050e4:	dcc14515 	stw	r19,1300(sp)
  8050e8:	98011016 	blt	r19,zero,80552c <___vfprintf_internal_r+0x1d74>
  8050ec:	980f883a 	mov	r7,r19
  8050f0:	d8014615 	stw	zero,1304(sp)
  8050f4:	003c5206 	br	804240 <___vfprintf_internal_r+0xa88>
  8050f8:	d9014f17 	ldw	r4,1340(sp)
  8050fc:	b00b883a 	mov	r5,r22
  805100:	d9800c04 	addi	r6,sp,48
  805104:	08037600 	call	803760 <__sprint_r>
  805108:	103b631e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  80510c:	dc800e17 	ldw	r18,56(sp)
  805110:	d9000517 	ldw	r4,20(sp)
  805114:	d8c01904 	addi	r3,sp,100
  805118:	003f2e06 	br	804dd4 <___vfprintf_internal_r+0x161c>
  80511c:	d8c14c17 	ldw	r3,1328(sp)
  805120:	1880100c 	andi	r2,r3,64
  805124:	1000a026 	beq	r2,zero,8053a8 <___vfprintf_internal_r+0x1bf0>
  805128:	38800017 	ldw	r2,0(r7)
  80512c:	39c00104 	addi	r7,r7,4
  805130:	d9c14015 	stw	r7,1280(sp)
  805134:	d9014b17 	ldw	r4,1324(sp)
  805138:	d9c14017 	ldw	r7,1280(sp)
  80513c:	1100000d 	sth	r4,0(r2)
  805140:	0039f906 	br	803928 <___vfprintf_internal_r+0x170>
  805144:	d9014f17 	ldw	r4,1340(sp)
  805148:	b00b883a 	mov	r5,r22
  80514c:	d9800c04 	addi	r6,sp,48
  805150:	08037600 	call	803760 <__sprint_r>
  805154:	103b501e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  805158:	dc800e17 	ldw	r18,56(sp)
  80515c:	dc400d17 	ldw	r17,52(sp)
  805160:	d9000517 	ldw	r4,20(sp)
  805164:	d8c01904 	addi	r3,sp,100
  805168:	003f2d06 	br	804e20 <___vfprintf_internal_r+0x1668>
  80516c:	00800184 	movi	r2,6
  805170:	14c09a36 	bltu	r2,r19,8053dc <___vfprintf_internal_r+0x1c24>
  805174:	dcc14515 	stw	r19,1300(sp)
  805178:	9800010e 	bge	r19,zero,805180 <___vfprintf_internal_r+0x19c8>
  80517c:	d8014515 	stw	zero,1300(sp)
  805180:	00802074 	movhi	r2,129
  805184:	10801c04 	addi	r2,r2,112
  805188:	980f883a 	mov	r7,r19
  80518c:	d8814115 	stw	r2,1284(sp)
  805190:	003a7806 	br	803b74 <___vfprintf_internal_r+0x3bc>
  805194:	00bfffc4 	movi	r2,-1
  805198:	9880e226 	beq	r19,r2,805524 <___vfprintf_internal_r+0x1d6c>
  80519c:	d9414d17 	ldw	r5,1332(sp)
  8051a0:	008019c4 	movi	r2,103
  8051a4:	2880dc26 	beq	r5,r2,805518 <___vfprintf_internal_r+0x1d60>
  8051a8:	008011c4 	movi	r2,71
  8051ac:	2880da26 	beq	r5,r2,805518 <___vfprintf_internal_r+0x1d60>
  8051b0:	d9414c17 	ldw	r5,1328(sp)
  8051b4:	d9014317 	ldw	r4,1292(sp)
  8051b8:	d9814217 	ldw	r6,1288(sp)
  8051bc:	29404014 	ori	r5,r5,256
  8051c0:	d9414c15 	stw	r5,1328(sp)
  8051c4:	2000cc16 	blt	r4,zero,8054f8 <___vfprintf_internal_r+0x1d40>
  8051c8:	3021883a 	mov	r16,r6
  8051cc:	2023883a 	mov	r17,r4
  8051d0:	0039883a 	mov	fp,zero
  8051d4:	d9414d17 	ldw	r5,1332(sp)
  8051d8:	00801984 	movi	r2,102
  8051dc:	2880b726 	beq	r5,r2,8054bc <___vfprintf_internal_r+0x1d04>
  8051e0:	00801184 	movi	r2,70
  8051e4:	2880b526 	beq	r5,r2,8054bc <___vfprintf_internal_r+0x1d04>
  8051e8:	00801944 	movi	r2,101
  8051ec:	2880c826 	beq	r5,r2,805510 <___vfprintf_internal_r+0x1d58>
  8051f0:	00801144 	movi	r2,69
  8051f4:	2880c626 	beq	r5,r2,805510 <___vfprintf_internal_r+0x1d58>
  8051f8:	9829883a 	mov	r20,r19
  8051fc:	d9014f17 	ldw	r4,1340(sp)
  805200:	d8800504 	addi	r2,sp,20
  805204:	880d883a 	mov	r6,r17
  805208:	d8800115 	stw	r2,4(sp)
  80520c:	d8c00604 	addi	r3,sp,24
  805210:	d8800704 	addi	r2,sp,28
  805214:	800b883a 	mov	r5,r16
  805218:	01c00084 	movi	r7,2
  80521c:	d8c00215 	stw	r3,8(sp)
  805220:	d8800315 	stw	r2,12(sp)
  805224:	dd000015 	stw	r20,0(sp)
  805228:	08059dc0 	call	8059dc <_dtoa_r>
  80522c:	d9814d17 	ldw	r6,1332(sp)
  805230:	d8814115 	stw	r2,1284(sp)
  805234:	008019c4 	movi	r2,103
  805238:	30809526 	beq	r6,r2,805490 <___vfprintf_internal_r+0x1cd8>
  80523c:	d8c14d17 	ldw	r3,1332(sp)
  805240:	008011c4 	movi	r2,71
  805244:	18809226 	beq	r3,r2,805490 <___vfprintf_internal_r+0x1cd8>
  805248:	d9414117 	ldw	r5,1284(sp)
  80524c:	d9814d17 	ldw	r6,1332(sp)
  805250:	00801984 	movi	r2,102
  805254:	2d25883a 	add	r18,r5,r20
  805258:	30808626 	beq	r6,r2,805474 <___vfprintf_internal_r+0x1cbc>
  80525c:	00801184 	movi	r2,70
  805260:	30808426 	beq	r6,r2,805474 <___vfprintf_internal_r+0x1cbc>
  805264:	000d883a 	mov	r6,zero
  805268:	000f883a 	mov	r7,zero
  80526c:	880b883a 	mov	r5,r17
  805270:	8009883a 	mov	r4,r16
  805274:	080b13c0 	call	80b13c <__eqdf2>
  805278:	1000751e 	bne	r2,zero,805450 <___vfprintf_internal_r+0x1c98>
  80527c:	9005883a 	mov	r2,r18
  805280:	dc800715 	stw	r18,28(sp)
  805284:	d9014117 	ldw	r4,1284(sp)
  805288:	d9414d17 	ldw	r5,1332(sp)
  80528c:	00c019c4 	movi	r3,103
  805290:	1125c83a 	sub	r18,r2,r4
  805294:	28c06826 	beq	r5,r3,805438 <___vfprintf_internal_r+0x1c80>
  805298:	008011c4 	movi	r2,71
  80529c:	28806626 	beq	r5,r2,805438 <___vfprintf_internal_r+0x1c80>
  8052a0:	d9000517 	ldw	r4,20(sp)
  8052a4:	d8c14d17 	ldw	r3,1332(sp)
  8052a8:	00801944 	movi	r2,101
  8052ac:	10c05516 	blt	r2,r3,805404 <___vfprintf_internal_r+0x1c4c>
  8052b0:	213fffc4 	addi	r4,r4,-1
  8052b4:	d9000515 	stw	r4,20(sp)
  8052b8:	d8c00805 	stb	r3,32(sp)
  8052bc:	2021883a 	mov	r16,r4
  8052c0:	2000c116 	blt	r4,zero,8055c8 <___vfprintf_internal_r+0x1e10>
  8052c4:	00800ac4 	movi	r2,43
  8052c8:	d8800845 	stb	r2,33(sp)
  8052cc:	00800244 	movi	r2,9
  8052d0:	1400af0e 	bge	r2,r16,805590 <___vfprintf_internal_r+0x1dd8>
  8052d4:	1027883a 	mov	r19,r2
  8052d8:	dc400b84 	addi	r17,sp,46
  8052dc:	8009883a 	mov	r4,r16
  8052e0:	01400284 	movi	r5,10
  8052e4:	080260c0 	call	80260c <__modsi3>
  8052e8:	10800c04 	addi	r2,r2,48
  8052ec:	8c7fffc4 	addi	r17,r17,-1
  8052f0:	8009883a 	mov	r4,r16
  8052f4:	01400284 	movi	r5,10
  8052f8:	88800005 	stb	r2,0(r17)
  8052fc:	08025ac0 	call	8025ac <__divsi3>
  805300:	1021883a 	mov	r16,r2
  805304:	98bff516 	blt	r19,r2,8052dc <___vfprintf_internal_r+0x1b24>
  805308:	10c00c04 	addi	r3,r2,48
  80530c:	d88009c4 	addi	r2,sp,39
  805310:	108001c4 	addi	r2,r2,7
  805314:	897fffc4 	addi	r5,r17,-1
  805318:	88ffffc5 	stb	r3,-1(r17)
  80531c:	2880a72e 	bgeu	r5,r2,8055bc <___vfprintf_internal_r+0x1e04>
  805320:	1009883a 	mov	r4,r2
  805324:	d9800804 	addi	r6,sp,32
  805328:	d8c00884 	addi	r3,sp,34
  80532c:	28800003 	ldbu	r2,0(r5)
  805330:	29400044 	addi	r5,r5,1
  805334:	18800005 	stb	r2,0(r3)
  805338:	18c00044 	addi	r3,r3,1
  80533c:	293ffb36 	bltu	r5,r4,80532c <___vfprintf_internal_r+0x1b74>
  805340:	1987c83a 	sub	r3,r3,r6
  805344:	00800044 	movi	r2,1
  805348:	d8c14815 	stw	r3,1312(sp)
  80534c:	90cf883a 	add	r7,r18,r3
  805350:	1480960e 	bge	r2,r18,8055ac <___vfprintf_internal_r+0x1df4>
  805354:	39c00044 	addi	r7,r7,1
  805358:	d9c14515 	stw	r7,1300(sp)
  80535c:	38003416 	blt	r7,zero,805430 <___vfprintf_internal_r+0x1c78>
  805360:	e0803fcc 	andi	r2,fp,255
  805364:	1080201c 	xori	r2,r2,128
  805368:	10bfe004 	addi	r2,r2,-128
  80536c:	10004e26 	beq	r2,zero,8054a8 <___vfprintf_internal_r+0x1cf0>
  805370:	00800b44 	movi	r2,45
  805374:	dc814715 	stw	r18,1308(sp)
  805378:	d8014615 	stw	zero,1304(sp)
  80537c:	d8800405 	stb	r2,16(sp)
  805380:	003bb106 	br	804248 <___vfprintf_internal_r+0xa90>
  805384:	00800b44 	movi	r2,45
  805388:	d8800405 	stb	r2,16(sp)
  80538c:	003d3306 	br	80485c <___vfprintf_internal_r+0x10a4>
  805390:	d9014f17 	ldw	r4,1340(sp)
  805394:	b00b883a 	mov	r5,r22
  805398:	d9800c04 	addi	r6,sp,48
  80539c:	08037600 	call	803760 <__sprint_r>
  8053a0:	103abd1e 	bne	r2,zero,803e98 <___vfprintf_internal_r+0x6e0>
  8053a4:	003abb06 	br	803e94 <___vfprintf_internal_r+0x6dc>
  8053a8:	38800017 	ldw	r2,0(r7)
  8053ac:	39c00104 	addi	r7,r7,4
  8053b0:	d9c14015 	stw	r7,1280(sp)
  8053b4:	d9414b17 	ldw	r5,1324(sp)
  8053b8:	d9c14017 	ldw	r7,1280(sp)
  8053bc:	11400015 	stw	r5,0(r2)
  8053c0:	00395906 	br	803928 <___vfprintf_internal_r+0x170>
  8053c4:	980f883a 	mov	r7,r19
  8053c8:	dcc14515 	stw	r19,1300(sp)
  8053cc:	d8014615 	stw	zero,1304(sp)
  8053d0:	003b9b06 	br	804240 <___vfprintf_internal_r+0xa88>
  8053d4:	0027883a 	mov	r19,zero
  8053d8:	00397806 	br	8039bc <___vfprintf_internal_r+0x204>
  8053dc:	00c02074 	movhi	r3,129
  8053e0:	18c01c04 	addi	r3,r3,112
  8053e4:	100f883a 	mov	r7,r2
  8053e8:	d8814515 	stw	r2,1300(sp)
  8053ec:	d8c14115 	stw	r3,1284(sp)
  8053f0:	0039e006 	br	803b74 <___vfprintf_internal_r+0x3bc>
  8053f4:	00802074 	movhi	r2,129
  8053f8:	10801b04 	addi	r2,r2,108
  8053fc:	d8814115 	stw	r2,1284(sp)
  805400:	003d1c06 	br	804874 <___vfprintf_internal_r+0x10bc>
  805404:	d9414d17 	ldw	r5,1332(sp)
  805408:	00801984 	movi	r2,102
  80540c:	28804926 	beq	r5,r2,805534 <___vfprintf_internal_r+0x1d7c>
  805410:	200f883a 	mov	r7,r4
  805414:	24805716 	blt	r4,r18,805574 <___vfprintf_internal_r+0x1dbc>
  805418:	d9414c17 	ldw	r5,1328(sp)
  80541c:	2880004c 	andi	r2,r5,1
  805420:	10000126 	beq	r2,zero,805428 <___vfprintf_internal_r+0x1c70>
  805424:	21c00044 	addi	r7,r4,1
  805428:	d9c14515 	stw	r7,1300(sp)
  80542c:	383fcc0e 	bge	r7,zero,805360 <___vfprintf_internal_r+0x1ba8>
  805430:	d8014515 	stw	zero,1300(sp)
  805434:	003fca06 	br	805360 <___vfprintf_internal_r+0x1ba8>
  805438:	d9000517 	ldw	r4,20(sp)
  80543c:	00bfff04 	movi	r2,-4
  805440:	1100480e 	bge	r2,r4,805564 <___vfprintf_internal_r+0x1dac>
  805444:	99004716 	blt	r19,r4,805564 <___vfprintf_internal_r+0x1dac>
  805448:	d8c14d15 	stw	r3,1332(sp)
  80544c:	003ff006 	br	805410 <___vfprintf_internal_r+0x1c58>
  805450:	d8800717 	ldw	r2,28(sp)
  805454:	14bf8b2e 	bgeu	r2,r18,805284 <___vfprintf_internal_r+0x1acc>
  805458:	9007883a 	mov	r3,r18
  80545c:	01000c04 	movi	r4,48
  805460:	11000005 	stb	r4,0(r2)
  805464:	10800044 	addi	r2,r2,1
  805468:	d8800715 	stw	r2,28(sp)
  80546c:	18bffc1e 	bne	r3,r2,805460 <___vfprintf_internal_r+0x1ca8>
  805470:	003f8406 	br	805284 <___vfprintf_internal_r+0x1acc>
  805474:	d8814117 	ldw	r2,1284(sp)
  805478:	10c00007 	ldb	r3,0(r2)
  80547c:	00800c04 	movi	r2,48
  805480:	18805b26 	beq	r3,r2,8055f0 <___vfprintf_internal_r+0x1e38>
  805484:	d9000517 	ldw	r4,20(sp)
  805488:	9125883a 	add	r18,r18,r4
  80548c:	003f7506 	br	805264 <___vfprintf_internal_r+0x1aac>
  805490:	d9014c17 	ldw	r4,1328(sp)
  805494:	2080004c 	andi	r2,r4,1
  805498:	1005003a 	cmpeq	r2,r2,zero
  80549c:	103f6a26 	beq	r2,zero,805248 <___vfprintf_internal_r+0x1a90>
  8054a0:	d8800717 	ldw	r2,28(sp)
  8054a4:	003f7706 	br	805284 <___vfprintf_internal_r+0x1acc>
  8054a8:	d9c14515 	stw	r7,1300(sp)
  8054ac:	38004d16 	blt	r7,zero,8055e4 <___vfprintf_internal_r+0x1e2c>
  8054b0:	dc814715 	stw	r18,1308(sp)
  8054b4:	d8014615 	stw	zero,1304(sp)
  8054b8:	003b6106 	br	804240 <___vfprintf_internal_r+0xa88>
  8054bc:	d9014f17 	ldw	r4,1340(sp)
  8054c0:	d8800504 	addi	r2,sp,20
  8054c4:	d8800115 	stw	r2,4(sp)
  8054c8:	d8c00604 	addi	r3,sp,24
  8054cc:	d8800704 	addi	r2,sp,28
  8054d0:	800b883a 	mov	r5,r16
  8054d4:	880d883a 	mov	r6,r17
  8054d8:	01c000c4 	movi	r7,3
  8054dc:	d8c00215 	stw	r3,8(sp)
  8054e0:	d8800315 	stw	r2,12(sp)
  8054e4:	dcc00015 	stw	r19,0(sp)
  8054e8:	9829883a 	mov	r20,r19
  8054ec:	08059dc0 	call	8059dc <_dtoa_r>
  8054f0:	d8814115 	stw	r2,1284(sp)
  8054f4:	003f5106 	br	80523c <___vfprintf_internal_r+0x1a84>
  8054f8:	d8c14217 	ldw	r3,1288(sp)
  8054fc:	d9014317 	ldw	r4,1292(sp)
  805500:	07000b44 	movi	fp,45
  805504:	1821883a 	mov	r16,r3
  805508:	2460003c 	xorhi	r17,r4,32768
  80550c:	003f3106 	br	8051d4 <___vfprintf_internal_r+0x1a1c>
  805510:	9d000044 	addi	r20,r19,1
  805514:	003f3906 	br	8051fc <___vfprintf_internal_r+0x1a44>
  805518:	983f251e 	bne	r19,zero,8051b0 <___vfprintf_internal_r+0x19f8>
  80551c:	04c00044 	movi	r19,1
  805520:	003f2306 	br	8051b0 <___vfprintf_internal_r+0x19f8>
  805524:	04c00184 	movi	r19,6
  805528:	003f2106 	br	8051b0 <___vfprintf_internal_r+0x19f8>
  80552c:	d8014515 	stw	zero,1300(sp)
  805530:	003eee06 	br	8050ec <___vfprintf_internal_r+0x1934>
  805534:	200f883a 	mov	r7,r4
  805538:	0100370e 	bge	zero,r4,805618 <___vfprintf_internal_r+0x1e60>
  80553c:	9800031e 	bne	r19,zero,80554c <___vfprintf_internal_r+0x1d94>
  805540:	d9814c17 	ldw	r6,1328(sp)
  805544:	3080004c 	andi	r2,r6,1
  805548:	103fb726 	beq	r2,zero,805428 <___vfprintf_internal_r+0x1c70>
  80554c:	20800044 	addi	r2,r4,1
  805550:	98a7883a 	add	r19,r19,r2
  805554:	dcc14515 	stw	r19,1300(sp)
  805558:	980f883a 	mov	r7,r19
  80555c:	983f800e 	bge	r19,zero,805360 <___vfprintf_internal_r+0x1ba8>
  805560:	003fb306 	br	805430 <___vfprintf_internal_r+0x1c78>
  805564:	d9814d17 	ldw	r6,1332(sp)
  805568:	31bfff84 	addi	r6,r6,-2
  80556c:	d9814d15 	stw	r6,1332(sp)
  805570:	003f4c06 	br	8052a4 <___vfprintf_internal_r+0x1aec>
  805574:	0100180e 	bge	zero,r4,8055d8 <___vfprintf_internal_r+0x1e20>
  805578:	00800044 	movi	r2,1
  80557c:	1485883a 	add	r2,r2,r18
  805580:	d8814515 	stw	r2,1300(sp)
  805584:	100f883a 	mov	r7,r2
  805588:	103f750e 	bge	r2,zero,805360 <___vfprintf_internal_r+0x1ba8>
  80558c:	003fa806 	br	805430 <___vfprintf_internal_r+0x1c78>
  805590:	80c00c04 	addi	r3,r16,48
  805594:	00800c04 	movi	r2,48
  805598:	d8c008c5 	stb	r3,35(sp)
  80559c:	d9800804 	addi	r6,sp,32
  8055a0:	d8c00904 	addi	r3,sp,36
  8055a4:	d8800885 	stb	r2,34(sp)
  8055a8:	003f6506 	br	805340 <___vfprintf_internal_r+0x1b88>
  8055ac:	d9014c17 	ldw	r4,1328(sp)
  8055b0:	2084703a 	and	r2,r4,r2
  8055b4:	103f9c26 	beq	r2,zero,805428 <___vfprintf_internal_r+0x1c70>
  8055b8:	003f6606 	br	805354 <___vfprintf_internal_r+0x1b9c>
  8055bc:	d9800804 	addi	r6,sp,32
  8055c0:	d8c00884 	addi	r3,sp,34
  8055c4:	003f5e06 	br	805340 <___vfprintf_internal_r+0x1b88>
  8055c8:	00800b44 	movi	r2,45
  8055cc:	0121c83a 	sub	r16,zero,r4
  8055d0:	d8800845 	stb	r2,33(sp)
  8055d4:	003f3d06 	br	8052cc <___vfprintf_internal_r+0x1b14>
  8055d8:	00800084 	movi	r2,2
  8055dc:	1105c83a 	sub	r2,r2,r4
  8055e0:	003fe606 	br	80557c <___vfprintf_internal_r+0x1dc4>
  8055e4:	d8014515 	stw	zero,1300(sp)
  8055e8:	dc814715 	stw	r18,1308(sp)
  8055ec:	003fb106 	br	8054b4 <___vfprintf_internal_r+0x1cfc>
  8055f0:	000d883a 	mov	r6,zero
  8055f4:	000f883a 	mov	r7,zero
  8055f8:	8009883a 	mov	r4,r16
  8055fc:	880b883a 	mov	r5,r17
  805600:	080b1c40 	call	80b1c4 <__nedf2>
  805604:	103f9f26 	beq	r2,zero,805484 <___vfprintf_internal_r+0x1ccc>
  805608:	00800044 	movi	r2,1
  80560c:	1509c83a 	sub	r4,r2,r20
  805610:	d9000515 	stw	r4,20(sp)
  805614:	003f9b06 	br	805484 <___vfprintf_internal_r+0x1ccc>
  805618:	98000d1e 	bne	r19,zero,805650 <___vfprintf_internal_r+0x1e98>
  80561c:	d8c14c17 	ldw	r3,1328(sp)
  805620:	1880004c 	andi	r2,r3,1
  805624:	10000a1e 	bne	r2,zero,805650 <___vfprintf_internal_r+0x1e98>
  805628:	01000044 	movi	r4,1
  80562c:	200f883a 	mov	r7,r4
  805630:	d9014515 	stw	r4,1300(sp)
  805634:	003f4a06 	br	805360 <___vfprintf_internal_r+0x1ba8>
  805638:	3cc00017 	ldw	r19,0(r7)
  80563c:	39c00104 	addi	r7,r7,4
  805640:	983d0e0e 	bge	r19,zero,804a7c <___vfprintf_internal_r+0x12c4>
  805644:	b8c00007 	ldb	r3,0(r23)
  805648:	04ffffc4 	movi	r19,-1
  80564c:	0038d906 	br	8039b4 <___vfprintf_internal_r+0x1fc>
  805650:	9cc00084 	addi	r19,r19,2
  805654:	dcc14515 	stw	r19,1300(sp)
  805658:	980f883a 	mov	r7,r19
  80565c:	983f400e 	bge	r19,zero,805360 <___vfprintf_internal_r+0x1ba8>
  805660:	003f7306 	br	805430 <___vfprintf_internal_r+0x1c78>

00805664 <__vfprintf_internal>:
  805664:	00802074 	movhi	r2,129
  805668:	10880c04 	addi	r2,r2,8240
  80566c:	2013883a 	mov	r9,r4
  805670:	11000017 	ldw	r4,0(r2)
  805674:	2805883a 	mov	r2,r5
  805678:	300f883a 	mov	r7,r6
  80567c:	480b883a 	mov	r5,r9
  805680:	100d883a 	mov	r6,r2
  805684:	08037b81 	jmpi	8037b8 <___vfprintf_internal_r>

00805688 <__swsetup_r>:
  805688:	00802074 	movhi	r2,129
  80568c:	10880c04 	addi	r2,r2,8240
  805690:	10c00017 	ldw	r3,0(r2)
  805694:	defffd04 	addi	sp,sp,-12
  805698:	dc400115 	stw	r17,4(sp)
  80569c:	dc000015 	stw	r16,0(sp)
  8056a0:	dfc00215 	stw	ra,8(sp)
  8056a4:	2023883a 	mov	r17,r4
  8056a8:	2821883a 	mov	r16,r5
  8056ac:	18000226 	beq	r3,zero,8056b8 <__swsetup_r+0x30>
  8056b0:	18800e17 	ldw	r2,56(r3)
  8056b4:	10001f26 	beq	r2,zero,805734 <__swsetup_r+0xac>
  8056b8:	8100030b 	ldhu	r4,12(r16)
  8056bc:	2080020c 	andi	r2,r4,8
  8056c0:	10002826 	beq	r2,zero,805764 <__swsetup_r+0xdc>
  8056c4:	81400417 	ldw	r5,16(r16)
  8056c8:	28001d26 	beq	r5,zero,805740 <__swsetup_r+0xb8>
  8056cc:	2080004c 	andi	r2,r4,1
  8056d0:	1005003a 	cmpeq	r2,r2,zero
  8056d4:	10000b26 	beq	r2,zero,805704 <__swsetup_r+0x7c>
  8056d8:	2080008c 	andi	r2,r4,2
  8056dc:	10001226 	beq	r2,zero,805728 <__swsetup_r+0xa0>
  8056e0:	0005883a 	mov	r2,zero
  8056e4:	80800215 	stw	r2,8(r16)
  8056e8:	28000b26 	beq	r5,zero,805718 <__swsetup_r+0x90>
  8056ec:	0005883a 	mov	r2,zero
  8056f0:	dfc00217 	ldw	ra,8(sp)
  8056f4:	dc400117 	ldw	r17,4(sp)
  8056f8:	dc000017 	ldw	r16,0(sp)
  8056fc:	dec00304 	addi	sp,sp,12
  805700:	f800283a 	ret
  805704:	80800517 	ldw	r2,20(r16)
  805708:	80000215 	stw	zero,8(r16)
  80570c:	0085c83a 	sub	r2,zero,r2
  805710:	80800615 	stw	r2,24(r16)
  805714:	283ff51e 	bne	r5,zero,8056ec <__swsetup_r+0x64>
  805718:	2080200c 	andi	r2,r4,128
  80571c:	103ff326 	beq	r2,zero,8056ec <__swsetup_r+0x64>
  805720:	00bfffc4 	movi	r2,-1
  805724:	003ff206 	br	8056f0 <__swsetup_r+0x68>
  805728:	80800517 	ldw	r2,20(r16)
  80572c:	80800215 	stw	r2,8(r16)
  805730:	003fed06 	br	8056e8 <__swsetup_r+0x60>
  805734:	1809883a 	mov	r4,r3
  805738:	08072280 	call	807228 <__sinit>
  80573c:	003fde06 	br	8056b8 <__swsetup_r+0x30>
  805740:	20c0a00c 	andi	r3,r4,640
  805744:	00808004 	movi	r2,512
  805748:	18bfe026 	beq	r3,r2,8056cc <__swsetup_r+0x44>
  80574c:	8809883a 	mov	r4,r17
  805750:	800b883a 	mov	r5,r16
  805754:	0807fa00 	call	807fa0 <__smakebuf_r>
  805758:	8100030b 	ldhu	r4,12(r16)
  80575c:	81400417 	ldw	r5,16(r16)
  805760:	003fda06 	br	8056cc <__swsetup_r+0x44>
  805764:	2080040c 	andi	r2,r4,16
  805768:	103fed26 	beq	r2,zero,805720 <__swsetup_r+0x98>
  80576c:	2080010c 	andi	r2,r4,4
  805770:	10001226 	beq	r2,zero,8057bc <__swsetup_r+0x134>
  805774:	81400c17 	ldw	r5,48(r16)
  805778:	28000526 	beq	r5,zero,805790 <__swsetup_r+0x108>
  80577c:	80801004 	addi	r2,r16,64
  805780:	28800226 	beq	r5,r2,80578c <__swsetup_r+0x104>
  805784:	8809883a 	mov	r4,r17
  805788:	08075ac0 	call	8075ac <_free_r>
  80578c:	80000c15 	stw	zero,48(r16)
  805790:	8080030b 	ldhu	r2,12(r16)
  805794:	81400417 	ldw	r5,16(r16)
  805798:	80000115 	stw	zero,4(r16)
  80579c:	10bff6cc 	andi	r2,r2,65499
  8057a0:	8080030d 	sth	r2,12(r16)
  8057a4:	81400015 	stw	r5,0(r16)
  8057a8:	8080030b 	ldhu	r2,12(r16)
  8057ac:	10800214 	ori	r2,r2,8
  8057b0:	113fffcc 	andi	r4,r2,65535
  8057b4:	8080030d 	sth	r2,12(r16)
  8057b8:	003fc306 	br	8056c8 <__swsetup_r+0x40>
  8057bc:	81400417 	ldw	r5,16(r16)
  8057c0:	003ff906 	br	8057a8 <__swsetup_r+0x120>

008057c4 <quorem>:
  8057c4:	28c00417 	ldw	r3,16(r5)
  8057c8:	20800417 	ldw	r2,16(r4)
  8057cc:	defff604 	addi	sp,sp,-40
  8057d0:	ddc00715 	stw	r23,28(sp)
  8057d4:	dd400515 	stw	r21,20(sp)
  8057d8:	dfc00915 	stw	ra,36(sp)
  8057dc:	df000815 	stw	fp,32(sp)
  8057e0:	dd800615 	stw	r22,24(sp)
  8057e4:	dd000415 	stw	r20,16(sp)
  8057e8:	dcc00315 	stw	r19,12(sp)
  8057ec:	dc800215 	stw	r18,8(sp)
  8057f0:	dc400115 	stw	r17,4(sp)
  8057f4:	dc000015 	stw	r16,0(sp)
  8057f8:	202f883a 	mov	r23,r4
  8057fc:	282b883a 	mov	r21,r5
  805800:	10c07416 	blt	r2,r3,8059d4 <quorem+0x210>
  805804:	1c7fffc4 	addi	r17,r3,-1
  805808:	8c45883a 	add	r2,r17,r17
  80580c:	1085883a 	add	r2,r2,r2
  805810:	2c000504 	addi	r16,r5,20
  805814:	24c00504 	addi	r19,r4,20
  805818:	14ed883a 	add	r22,r2,r19
  80581c:	80a5883a 	add	r18,r16,r2
  805820:	b7000017 	ldw	fp,0(r22)
  805824:	91400017 	ldw	r5,0(r18)
  805828:	e009883a 	mov	r4,fp
  80582c:	29400044 	addi	r5,r5,1
  805830:	080266c0 	call	80266c <__udivsi3>
  805834:	1029883a 	mov	r20,r2
  805838:	10003c1e 	bne	r2,zero,80592c <quorem+0x168>
  80583c:	a80b883a 	mov	r5,r21
  805840:	b809883a 	mov	r4,r23
  805844:	08084ec0 	call	8084ec <__mcmp>
  805848:	10002b16 	blt	r2,zero,8058f8 <quorem+0x134>
  80584c:	a5000044 	addi	r20,r20,1
  805850:	980f883a 	mov	r7,r19
  805854:	0011883a 	mov	r8,zero
  805858:	0009883a 	mov	r4,zero
  80585c:	81400017 	ldw	r5,0(r16)
  805860:	38c00017 	ldw	r3,0(r7)
  805864:	84000104 	addi	r16,r16,4
  805868:	28bfffcc 	andi	r2,r5,65535
  80586c:	2085883a 	add	r2,r4,r2
  805870:	11bfffcc 	andi	r6,r2,65535
  805874:	193fffcc 	andi	r4,r3,65535
  805878:	1004d43a 	srli	r2,r2,16
  80587c:	280ad43a 	srli	r5,r5,16
  805880:	2189c83a 	sub	r4,r4,r6
  805884:	2209883a 	add	r4,r4,r8
  805888:	1806d43a 	srli	r3,r3,16
  80588c:	288b883a 	add	r5,r5,r2
  805890:	200dd43a 	srai	r6,r4,16
  805894:	28bfffcc 	andi	r2,r5,65535
  805898:	1887c83a 	sub	r3,r3,r2
  80589c:	1987883a 	add	r3,r3,r6
  8058a0:	3900000d 	sth	r4,0(r7)
  8058a4:	38c0008d 	sth	r3,2(r7)
  8058a8:	2808d43a 	srli	r4,r5,16
  8058ac:	39c00104 	addi	r7,r7,4
  8058b0:	1811d43a 	srai	r8,r3,16
  8058b4:	943fe92e 	bgeu	r18,r16,80585c <quorem+0x98>
  8058b8:	8c45883a 	add	r2,r17,r17
  8058bc:	1085883a 	add	r2,r2,r2
  8058c0:	9885883a 	add	r2,r19,r2
  8058c4:	10c00017 	ldw	r3,0(r2)
  8058c8:	18000b1e 	bne	r3,zero,8058f8 <quorem+0x134>
  8058cc:	113fff04 	addi	r4,r2,-4
  8058d0:	9900082e 	bgeu	r19,r4,8058f4 <quorem+0x130>
  8058d4:	10bfff17 	ldw	r2,-4(r2)
  8058d8:	10000326 	beq	r2,zero,8058e8 <quorem+0x124>
  8058dc:	00000506 	br	8058f4 <quorem+0x130>
  8058e0:	20800017 	ldw	r2,0(r4)
  8058e4:	1000031e 	bne	r2,zero,8058f4 <quorem+0x130>
  8058e8:	213fff04 	addi	r4,r4,-4
  8058ec:	8c7fffc4 	addi	r17,r17,-1
  8058f0:	993ffb36 	bltu	r19,r4,8058e0 <quorem+0x11c>
  8058f4:	bc400415 	stw	r17,16(r23)
  8058f8:	a005883a 	mov	r2,r20
  8058fc:	dfc00917 	ldw	ra,36(sp)
  805900:	df000817 	ldw	fp,32(sp)
  805904:	ddc00717 	ldw	r23,28(sp)
  805908:	dd800617 	ldw	r22,24(sp)
  80590c:	dd400517 	ldw	r21,20(sp)
  805910:	dd000417 	ldw	r20,16(sp)
  805914:	dcc00317 	ldw	r19,12(sp)
  805918:	dc800217 	ldw	r18,8(sp)
  80591c:	dc400117 	ldw	r17,4(sp)
  805920:	dc000017 	ldw	r16,0(sp)
  805924:	dec00a04 	addi	sp,sp,40
  805928:	f800283a 	ret
  80592c:	980f883a 	mov	r7,r19
  805930:	8011883a 	mov	r8,r16
  805934:	0013883a 	mov	r9,zero
  805938:	000d883a 	mov	r6,zero
  80593c:	40c00017 	ldw	r3,0(r8)
  805940:	39000017 	ldw	r4,0(r7)
  805944:	42000104 	addi	r8,r8,4
  805948:	18bfffcc 	andi	r2,r3,65535
  80594c:	a085383a 	mul	r2,r20,r2
  805950:	1806d43a 	srli	r3,r3,16
  805954:	217fffcc 	andi	r5,r4,65535
  805958:	3085883a 	add	r2,r6,r2
  80595c:	11bfffcc 	andi	r6,r2,65535
  805960:	a0c7383a 	mul	r3,r20,r3
  805964:	1004d43a 	srli	r2,r2,16
  805968:	298bc83a 	sub	r5,r5,r6
  80596c:	2a4b883a 	add	r5,r5,r9
  805970:	2008d43a 	srli	r4,r4,16
  805974:	1887883a 	add	r3,r3,r2
  805978:	280dd43a 	srai	r6,r5,16
  80597c:	18bfffcc 	andi	r2,r3,65535
  805980:	2089c83a 	sub	r4,r4,r2
  805984:	2189883a 	add	r4,r4,r6
  805988:	3900008d 	sth	r4,2(r7)
  80598c:	3940000d 	sth	r5,0(r7)
  805990:	180cd43a 	srli	r6,r3,16
  805994:	39c00104 	addi	r7,r7,4
  805998:	2013d43a 	srai	r9,r4,16
  80599c:	923fe72e 	bgeu	r18,r8,80593c <quorem+0x178>
  8059a0:	e03fa61e 	bne	fp,zero,80583c <quorem+0x78>
  8059a4:	b0ffff04 	addi	r3,r22,-4
  8059a8:	98c0082e 	bgeu	r19,r3,8059cc <quorem+0x208>
  8059ac:	b0bfff17 	ldw	r2,-4(r22)
  8059b0:	10000326 	beq	r2,zero,8059c0 <quorem+0x1fc>
  8059b4:	00000506 	br	8059cc <quorem+0x208>
  8059b8:	18800017 	ldw	r2,0(r3)
  8059bc:	1000031e 	bne	r2,zero,8059cc <quorem+0x208>
  8059c0:	18ffff04 	addi	r3,r3,-4
  8059c4:	8c7fffc4 	addi	r17,r17,-1
  8059c8:	98fffb36 	bltu	r19,r3,8059b8 <quorem+0x1f4>
  8059cc:	bc400415 	stw	r17,16(r23)
  8059d0:	003f9a06 	br	80583c <quorem+0x78>
  8059d4:	0005883a 	mov	r2,zero
  8059d8:	003fc806 	br	8058fc <quorem+0x138>

008059dc <_dtoa_r>:
  8059dc:	22001017 	ldw	r8,64(r4)
  8059e0:	deffda04 	addi	sp,sp,-152
  8059e4:	dd402115 	stw	r21,132(sp)
  8059e8:	dd002015 	stw	r20,128(sp)
  8059ec:	dc801e15 	stw	r18,120(sp)
  8059f0:	dc401d15 	stw	r17,116(sp)
  8059f4:	dfc02515 	stw	ra,148(sp)
  8059f8:	df002415 	stw	fp,144(sp)
  8059fc:	ddc02315 	stw	r23,140(sp)
  805a00:	dd802215 	stw	r22,136(sp)
  805a04:	dcc01f15 	stw	r19,124(sp)
  805a08:	dc001c15 	stw	r16,112(sp)
  805a0c:	d9001615 	stw	r4,88(sp)
  805a10:	3023883a 	mov	r17,r6
  805a14:	2829883a 	mov	r20,r5
  805a18:	d9c01715 	stw	r7,92(sp)
  805a1c:	dc802817 	ldw	r18,160(sp)
  805a20:	302b883a 	mov	r21,r6
  805a24:	40000a26 	beq	r8,zero,805a50 <_dtoa_r+0x74>
  805a28:	20801117 	ldw	r2,68(r4)
  805a2c:	400b883a 	mov	r5,r8
  805a30:	40800115 	stw	r2,4(r8)
  805a34:	20c01117 	ldw	r3,68(r4)
  805a38:	00800044 	movi	r2,1
  805a3c:	10c4983a 	sll	r2,r2,r3
  805a40:	40800215 	stw	r2,8(r8)
  805a44:	08083900 	call	808390 <_Bfree>
  805a48:	d8c01617 	ldw	r3,88(sp)
  805a4c:	18001015 	stw	zero,64(r3)
  805a50:	8800a316 	blt	r17,zero,805ce0 <_dtoa_r+0x304>
  805a54:	90000015 	stw	zero,0(r18)
  805a58:	a8dffc2c 	andhi	r3,r21,32752
  805a5c:	009ffc34 	movhi	r2,32752
  805a60:	18809126 	beq	r3,r2,805ca8 <_dtoa_r+0x2cc>
  805a64:	000d883a 	mov	r6,zero
  805a68:	000f883a 	mov	r7,zero
  805a6c:	a009883a 	mov	r4,r20
  805a70:	a80b883a 	mov	r5,r21
  805a74:	dd001215 	stw	r20,72(sp)
  805a78:	dd401315 	stw	r21,76(sp)
  805a7c:	080b1c40 	call	80b1c4 <__nedf2>
  805a80:	1000171e 	bne	r2,zero,805ae0 <_dtoa_r+0x104>
  805a84:	d9802717 	ldw	r6,156(sp)
  805a88:	00800044 	movi	r2,1
  805a8c:	30800015 	stw	r2,0(r6)
  805a90:	d8802917 	ldw	r2,164(sp)
  805a94:	10029b26 	beq	r2,zero,806504 <_dtoa_r+0xb28>
  805a98:	d9002917 	ldw	r4,164(sp)
  805a9c:	00802074 	movhi	r2,129
  805aa0:	10802a44 	addi	r2,r2,169
  805aa4:	10ffffc4 	addi	r3,r2,-1
  805aa8:	20800015 	stw	r2,0(r4)
  805aac:	1805883a 	mov	r2,r3
  805ab0:	dfc02517 	ldw	ra,148(sp)
  805ab4:	df002417 	ldw	fp,144(sp)
  805ab8:	ddc02317 	ldw	r23,140(sp)
  805abc:	dd802217 	ldw	r22,136(sp)
  805ac0:	dd402117 	ldw	r21,132(sp)
  805ac4:	dd002017 	ldw	r20,128(sp)
  805ac8:	dcc01f17 	ldw	r19,124(sp)
  805acc:	dc801e17 	ldw	r18,120(sp)
  805ad0:	dc401d17 	ldw	r17,116(sp)
  805ad4:	dc001c17 	ldw	r16,112(sp)
  805ad8:	dec02604 	addi	sp,sp,152
  805adc:	f800283a 	ret
  805ae0:	d9001617 	ldw	r4,88(sp)
  805ae4:	d9401217 	ldw	r5,72(sp)
  805ae8:	d8800104 	addi	r2,sp,4
  805aec:	a80d883a 	mov	r6,r21
  805af0:	d9c00204 	addi	r7,sp,8
  805af4:	d8800015 	stw	r2,0(sp)
  805af8:	08089cc0 	call	8089cc <__d2b>
  805afc:	d8800715 	stw	r2,28(sp)
  805b00:	a804d53a 	srli	r2,r21,20
  805b04:	1101ffcc 	andi	r4,r2,2047
  805b08:	20008626 	beq	r4,zero,805d24 <_dtoa_r+0x348>
  805b0c:	d8c01217 	ldw	r3,72(sp)
  805b10:	00800434 	movhi	r2,16
  805b14:	10bfffc4 	addi	r2,r2,-1
  805b18:	ddc00117 	ldw	r23,4(sp)
  805b1c:	a884703a 	and	r2,r21,r2
  805b20:	1811883a 	mov	r8,r3
  805b24:	124ffc34 	orhi	r9,r2,16368
  805b28:	25bf0044 	addi	r22,r4,-1023
  805b2c:	d8000815 	stw	zero,32(sp)
  805b30:	0005883a 	mov	r2,zero
  805b34:	00cffe34 	movhi	r3,16376
  805b38:	480b883a 	mov	r5,r9
  805b3c:	4009883a 	mov	r4,r8
  805b40:	180f883a 	mov	r7,r3
  805b44:	100d883a 	mov	r6,r2
  805b48:	080aa2c0 	call	80aa2c <__subdf3>
  805b4c:	0218dbf4 	movhi	r8,25455
  805b50:	4210d844 	addi	r8,r8,17249
  805b54:	024ff4f4 	movhi	r9,16339
  805b58:	4a61e9c4 	addi	r9,r9,-30809
  805b5c:	480f883a 	mov	r7,r9
  805b60:	400d883a 	mov	r6,r8
  805b64:	180b883a 	mov	r5,r3
  805b68:	1009883a 	mov	r4,r2
  805b6c:	080ab200 	call	80ab20 <__muldf3>
  805b70:	0222d874 	movhi	r8,35681
  805b74:	42322cc4 	addi	r8,r8,-14157
  805b78:	024ff1f4 	movhi	r9,16327
  805b7c:	4a628a04 	addi	r9,r9,-30168
  805b80:	480f883a 	mov	r7,r9
  805b84:	400d883a 	mov	r6,r8
  805b88:	180b883a 	mov	r5,r3
  805b8c:	1009883a 	mov	r4,r2
  805b90:	080aaac0 	call	80aaac <__adddf3>
  805b94:	b009883a 	mov	r4,r22
  805b98:	1021883a 	mov	r16,r2
  805b9c:	1823883a 	mov	r17,r3
  805ba0:	080b3e40 	call	80b3e4 <__floatsidf>
  805ba4:	021427f4 	movhi	r8,20639
  805ba8:	421e7ec4 	addi	r8,r8,31227
  805bac:	024ff4f4 	movhi	r9,16339
  805bb0:	4a5104c4 	addi	r9,r9,17427
  805bb4:	480f883a 	mov	r7,r9
  805bb8:	400d883a 	mov	r6,r8
  805bbc:	180b883a 	mov	r5,r3
  805bc0:	1009883a 	mov	r4,r2
  805bc4:	080ab200 	call	80ab20 <__muldf3>
  805bc8:	180f883a 	mov	r7,r3
  805bcc:	880b883a 	mov	r5,r17
  805bd0:	100d883a 	mov	r6,r2
  805bd4:	8009883a 	mov	r4,r16
  805bd8:	080aaac0 	call	80aaac <__adddf3>
  805bdc:	1009883a 	mov	r4,r2
  805be0:	180b883a 	mov	r5,r3
  805be4:	1021883a 	mov	r16,r2
  805be8:	1823883a 	mov	r17,r3
  805bec:	080b4dc0 	call	80b4dc <__fixdfsi>
  805bf0:	000d883a 	mov	r6,zero
  805bf4:	000f883a 	mov	r7,zero
  805bf8:	8009883a 	mov	r4,r16
  805bfc:	880b883a 	mov	r5,r17
  805c00:	d8800d15 	stw	r2,52(sp)
  805c04:	080b35c0 	call	80b35c <__ltdf2>
  805c08:	10031716 	blt	r2,zero,806868 <_dtoa_r+0xe8c>
  805c0c:	d8c00d17 	ldw	r3,52(sp)
  805c10:	00800584 	movi	r2,22
  805c14:	10c1482e 	bgeu	r2,r3,806138 <_dtoa_r+0x75c>
  805c18:	01000044 	movi	r4,1
  805c1c:	d9000c15 	stw	r4,48(sp)
  805c20:	bd85c83a 	sub	r2,r23,r22
  805c24:	11bfffc4 	addi	r6,r2,-1
  805c28:	30030b16 	blt	r6,zero,806858 <_dtoa_r+0xe7c>
  805c2c:	d9800a15 	stw	r6,40(sp)
  805c30:	d8001115 	stw	zero,68(sp)
  805c34:	d8c00d17 	ldw	r3,52(sp)
  805c38:	1802ff16 	blt	r3,zero,806838 <_dtoa_r+0xe5c>
  805c3c:	d9000a17 	ldw	r4,40(sp)
  805c40:	d8c00915 	stw	r3,36(sp)
  805c44:	d8001015 	stw	zero,64(sp)
  805c48:	20c9883a 	add	r4,r4,r3
  805c4c:	d9000a15 	stw	r4,40(sp)
  805c50:	d9001717 	ldw	r4,92(sp)
  805c54:	00800244 	movi	r2,9
  805c58:	11004636 	bltu	r2,r4,805d74 <_dtoa_r+0x398>
  805c5c:	00800144 	movi	r2,5
  805c60:	11020416 	blt	r2,r4,806474 <_dtoa_r+0xa98>
  805c64:	04400044 	movi	r17,1
  805c68:	d8c01717 	ldw	r3,92(sp)
  805c6c:	00800144 	movi	r2,5
  805c70:	10c1ed36 	bltu	r2,r3,806428 <_dtoa_r+0xa4c>
  805c74:	18c5883a 	add	r2,r3,r3
  805c78:	1085883a 	add	r2,r2,r2
  805c7c:	00c02034 	movhi	r3,128
  805c80:	18d72404 	addi	r3,r3,23696
  805c84:	10c5883a 	add	r2,r2,r3
  805c88:	11000017 	ldw	r4,0(r2)
  805c8c:	2000683a 	jmp	r4
  805c90:	00805d7c 	xorhi	r2,zero,373
  805c94:	00805d7c 	xorhi	r2,zero,373
  805c98:	0080677c 	xorhi	r2,zero,413
  805c9c:	00806754 	movui	r2,413
  805ca0:	00806798 	cmpnei	r2,zero,414
  805ca4:	008067a4 	muli	r2,zero,414
  805ca8:	d9002717 	ldw	r4,156(sp)
  805cac:	0089c3c4 	movi	r2,9999
  805cb0:	20800015 	stw	r2,0(r4)
  805cb4:	a0001026 	beq	r20,zero,805cf8 <_dtoa_r+0x31c>
  805cb8:	00c02074 	movhi	r3,129
  805cbc:	18c03604 	addi	r3,r3,216
  805cc0:	d9802917 	ldw	r6,164(sp)
  805cc4:	303f7926 	beq	r6,zero,805aac <_dtoa_r+0xd0>
  805cc8:	188000c7 	ldb	r2,3(r3)
  805ccc:	190000c4 	addi	r4,r3,3
  805cd0:	1000101e 	bne	r2,zero,805d14 <_dtoa_r+0x338>
  805cd4:	d8802917 	ldw	r2,164(sp)
  805cd8:	11000015 	stw	r4,0(r2)
  805cdc:	003f7306 	br	805aac <_dtoa_r+0xd0>
  805ce0:	00a00034 	movhi	r2,32768
  805ce4:	10bfffc4 	addi	r2,r2,-1
  805ce8:	00c00044 	movi	r3,1
  805cec:	88aa703a 	and	r21,r17,r2
  805cf0:	90c00015 	stw	r3,0(r18)
  805cf4:	003f5806 	br	805a58 <_dtoa_r+0x7c>
  805cf8:	00800434 	movhi	r2,16
  805cfc:	10bfffc4 	addi	r2,r2,-1
  805d00:	a884703a 	and	r2,r21,r2
  805d04:	103fec1e 	bne	r2,zero,805cb8 <_dtoa_r+0x2dc>
  805d08:	00c02074 	movhi	r3,129
  805d0c:	18c03304 	addi	r3,r3,204
  805d10:	003feb06 	br	805cc0 <_dtoa_r+0x2e4>
  805d14:	d8802917 	ldw	r2,164(sp)
  805d18:	19000204 	addi	r4,r3,8
  805d1c:	11000015 	stw	r4,0(r2)
  805d20:	003f6206 	br	805aac <_dtoa_r+0xd0>
  805d24:	ddc00117 	ldw	r23,4(sp)
  805d28:	d8800217 	ldw	r2,8(sp)
  805d2c:	01000804 	movi	r4,32
  805d30:	b8c10c84 	addi	r3,r23,1074
  805d34:	18a3883a 	add	r17,r3,r2
  805d38:	2441b80e 	bge	r4,r17,80641c <_dtoa_r+0xa40>
  805d3c:	00c01004 	movi	r3,64
  805d40:	1c47c83a 	sub	r3,r3,r17
  805d44:	88bff804 	addi	r2,r17,-32
  805d48:	a8c6983a 	sll	r3,r21,r3
  805d4c:	a084d83a 	srl	r2,r20,r2
  805d50:	1888b03a 	or	r4,r3,r2
  805d54:	080b5b40 	call	80b5b4 <__floatunsidf>
  805d58:	1011883a 	mov	r8,r2
  805d5c:	00bf8434 	movhi	r2,65040
  805d60:	01000044 	movi	r4,1
  805d64:	10d3883a 	add	r9,r2,r3
  805d68:	8dbef344 	addi	r22,r17,-1075
  805d6c:	d9000815 	stw	r4,32(sp)
  805d70:	003f6f06 	br	805b30 <_dtoa_r+0x154>
  805d74:	d8001715 	stw	zero,92(sp)
  805d78:	04400044 	movi	r17,1
  805d7c:	00bfffc4 	movi	r2,-1
  805d80:	00c00044 	movi	r3,1
  805d84:	d8800e15 	stw	r2,56(sp)
  805d88:	d8002615 	stw	zero,152(sp)
  805d8c:	d8800f15 	stw	r2,60(sp)
  805d90:	d8c00b15 	stw	r3,44(sp)
  805d94:	1021883a 	mov	r16,r2
  805d98:	d8801617 	ldw	r2,88(sp)
  805d9c:	10001115 	stw	zero,68(r2)
  805da0:	d8801617 	ldw	r2,88(sp)
  805da4:	11401117 	ldw	r5,68(r2)
  805da8:	1009883a 	mov	r4,r2
  805dac:	08089100 	call	808910 <_Balloc>
  805db0:	d8c01617 	ldw	r3,88(sp)
  805db4:	d8800515 	stw	r2,20(sp)
  805db8:	18801015 	stw	r2,64(r3)
  805dbc:	00800384 	movi	r2,14
  805dc0:	14006836 	bltu	r2,r16,805f64 <_dtoa_r+0x588>
  805dc4:	8805003a 	cmpeq	r2,r17,zero
  805dc8:	1000661e 	bne	r2,zero,805f64 <_dtoa_r+0x588>
  805dcc:	d9000d17 	ldw	r4,52(sp)
  805dd0:	0102300e 	bge	zero,r4,806694 <_dtoa_r+0xcb8>
  805dd4:	208003cc 	andi	r2,r4,15
  805dd8:	100490fa 	slli	r2,r2,3
  805ddc:	2025d13a 	srai	r18,r4,4
  805de0:	00c02074 	movhi	r3,129
  805de4:	18c04804 	addi	r3,r3,288
  805de8:	10c5883a 	add	r2,r2,r3
  805dec:	90c0040c 	andi	r3,r18,16
  805df0:	14000017 	ldw	r16,0(r2)
  805df4:	14400117 	ldw	r17,4(r2)
  805df8:	18036a1e 	bne	r3,zero,806ba4 <_dtoa_r+0x11c8>
  805dfc:	05800084 	movi	r22,2
  805e00:	90001026 	beq	r18,zero,805e44 <_dtoa_r+0x468>
  805e04:	04c02074 	movhi	r19,129
  805e08:	9cc07a04 	addi	r19,r19,488
  805e0c:	9080004c 	andi	r2,r18,1
  805e10:	1005003a 	cmpeq	r2,r2,zero
  805e14:	1000081e 	bne	r2,zero,805e38 <_dtoa_r+0x45c>
  805e18:	99800017 	ldw	r6,0(r19)
  805e1c:	99c00117 	ldw	r7,4(r19)
  805e20:	880b883a 	mov	r5,r17
  805e24:	8009883a 	mov	r4,r16
  805e28:	080ab200 	call	80ab20 <__muldf3>
  805e2c:	1021883a 	mov	r16,r2
  805e30:	b5800044 	addi	r22,r22,1
  805e34:	1823883a 	mov	r17,r3
  805e38:	9025d07a 	srai	r18,r18,1
  805e3c:	9cc00204 	addi	r19,r19,8
  805e40:	903ff21e 	bne	r18,zero,805e0c <_dtoa_r+0x430>
  805e44:	a80b883a 	mov	r5,r21
  805e48:	a009883a 	mov	r4,r20
  805e4c:	880f883a 	mov	r7,r17
  805e50:	800d883a 	mov	r6,r16
  805e54:	080aee40 	call	80aee4 <__divdf3>
  805e58:	1029883a 	mov	r20,r2
  805e5c:	182b883a 	mov	r21,r3
  805e60:	d8c00c17 	ldw	r3,48(sp)
  805e64:	1805003a 	cmpeq	r2,r3,zero
  805e68:	1000081e 	bne	r2,zero,805e8c <_dtoa_r+0x4b0>
  805e6c:	0005883a 	mov	r2,zero
  805e70:	00cffc34 	movhi	r3,16368
  805e74:	180f883a 	mov	r7,r3
  805e78:	a009883a 	mov	r4,r20
  805e7c:	a80b883a 	mov	r5,r21
  805e80:	100d883a 	mov	r6,r2
  805e84:	080b35c0 	call	80b35c <__ltdf2>
  805e88:	1003fe16 	blt	r2,zero,806e84 <_dtoa_r+0x14a8>
  805e8c:	b009883a 	mov	r4,r22
  805e90:	080b3e40 	call	80b3e4 <__floatsidf>
  805e94:	180b883a 	mov	r5,r3
  805e98:	1009883a 	mov	r4,r2
  805e9c:	a00d883a 	mov	r6,r20
  805ea0:	a80f883a 	mov	r7,r21
  805ea4:	080ab200 	call	80ab20 <__muldf3>
  805ea8:	0011883a 	mov	r8,zero
  805eac:	02500734 	movhi	r9,16412
  805eb0:	1009883a 	mov	r4,r2
  805eb4:	180b883a 	mov	r5,r3
  805eb8:	480f883a 	mov	r7,r9
  805ebc:	400d883a 	mov	r6,r8
  805ec0:	080aaac0 	call	80aaac <__adddf3>
  805ec4:	d9000f17 	ldw	r4,60(sp)
  805ec8:	102d883a 	mov	r22,r2
  805ecc:	00bf3034 	movhi	r2,64704
  805ed0:	18b9883a 	add	fp,r3,r2
  805ed4:	e02f883a 	mov	r23,fp
  805ed8:	20028f1e 	bne	r4,zero,806918 <_dtoa_r+0xf3c>
  805edc:	0005883a 	mov	r2,zero
  805ee0:	00d00534 	movhi	r3,16404
  805ee4:	a009883a 	mov	r4,r20
  805ee8:	a80b883a 	mov	r5,r21
  805eec:	180f883a 	mov	r7,r3
  805ef0:	100d883a 	mov	r6,r2
  805ef4:	080aa2c0 	call	80aa2c <__subdf3>
  805ef8:	1009883a 	mov	r4,r2
  805efc:	e00f883a 	mov	r7,fp
  805f00:	180b883a 	mov	r5,r3
  805f04:	b00d883a 	mov	r6,r22
  805f08:	1025883a 	mov	r18,r2
  805f0c:	1827883a 	mov	r19,r3
  805f10:	080b24c0 	call	80b24c <__gtdf2>
  805f14:	00834f16 	blt	zero,r2,806c54 <_dtoa_r+0x1278>
  805f18:	e0e0003c 	xorhi	r3,fp,32768
  805f1c:	9009883a 	mov	r4,r18
  805f20:	980b883a 	mov	r5,r19
  805f24:	180f883a 	mov	r7,r3
  805f28:	b00d883a 	mov	r6,r22
  805f2c:	080b35c0 	call	80b35c <__ltdf2>
  805f30:	1000080e 	bge	r2,zero,805f54 <_dtoa_r+0x578>
  805f34:	0027883a 	mov	r19,zero
  805f38:	0025883a 	mov	r18,zero
  805f3c:	d8802617 	ldw	r2,152(sp)
  805f40:	df000517 	ldw	fp,20(sp)
  805f44:	d8000615 	stw	zero,24(sp)
  805f48:	0084303a 	nor	r2,zero,r2
  805f4c:	d8800d15 	stw	r2,52(sp)
  805f50:	00019b06 	br	8065c0 <_dtoa_r+0xbe4>
  805f54:	d9801217 	ldw	r6,72(sp)
  805f58:	d8801317 	ldw	r2,76(sp)
  805f5c:	3029883a 	mov	r20,r6
  805f60:	102b883a 	mov	r21,r2
  805f64:	d8c00217 	ldw	r3,8(sp)
  805f68:	18008516 	blt	r3,zero,806180 <_dtoa_r+0x7a4>
  805f6c:	d9000d17 	ldw	r4,52(sp)
  805f70:	00800384 	movi	r2,14
  805f74:	11008216 	blt	r2,r4,806180 <_dtoa_r+0x7a4>
  805f78:	200490fa 	slli	r2,r4,3
  805f7c:	d9802617 	ldw	r6,152(sp)
  805f80:	00c02074 	movhi	r3,129
  805f84:	18c04804 	addi	r3,r3,288
  805f88:	10c5883a 	add	r2,r2,r3
  805f8c:	14800017 	ldw	r18,0(r2)
  805f90:	14c00117 	ldw	r19,4(r2)
  805f94:	30031e16 	blt	r6,zero,806c10 <_dtoa_r+0x1234>
  805f98:	d9000517 	ldw	r4,20(sp)
  805f9c:	d8c00f17 	ldw	r3,60(sp)
  805fa0:	a823883a 	mov	r17,r21
  805fa4:	a021883a 	mov	r16,r20
  805fa8:	192b883a 	add	r21,r3,r4
  805fac:	2039883a 	mov	fp,r4
  805fb0:	00000f06 	br	805ff0 <_dtoa_r+0x614>
  805fb4:	0005883a 	mov	r2,zero
  805fb8:	00d00934 	movhi	r3,16420
  805fbc:	5009883a 	mov	r4,r10
  805fc0:	580b883a 	mov	r5,r11
  805fc4:	180f883a 	mov	r7,r3
  805fc8:	100d883a 	mov	r6,r2
  805fcc:	080ab200 	call	80ab20 <__muldf3>
  805fd0:	180b883a 	mov	r5,r3
  805fd4:	000d883a 	mov	r6,zero
  805fd8:	000f883a 	mov	r7,zero
  805fdc:	1009883a 	mov	r4,r2
  805fe0:	1021883a 	mov	r16,r2
  805fe4:	1823883a 	mov	r17,r3
  805fe8:	080b1c40 	call	80b1c4 <__nedf2>
  805fec:	10004526 	beq	r2,zero,806104 <_dtoa_r+0x728>
  805ff0:	900d883a 	mov	r6,r18
  805ff4:	980f883a 	mov	r7,r19
  805ff8:	8009883a 	mov	r4,r16
  805ffc:	880b883a 	mov	r5,r17
  806000:	080aee40 	call	80aee4 <__divdf3>
  806004:	180b883a 	mov	r5,r3
  806008:	1009883a 	mov	r4,r2
  80600c:	080b4dc0 	call	80b4dc <__fixdfsi>
  806010:	1009883a 	mov	r4,r2
  806014:	1029883a 	mov	r20,r2
  806018:	080b3e40 	call	80b3e4 <__floatsidf>
  80601c:	180f883a 	mov	r7,r3
  806020:	9009883a 	mov	r4,r18
  806024:	980b883a 	mov	r5,r19
  806028:	100d883a 	mov	r6,r2
  80602c:	080ab200 	call	80ab20 <__muldf3>
  806030:	180f883a 	mov	r7,r3
  806034:	880b883a 	mov	r5,r17
  806038:	8009883a 	mov	r4,r16
  80603c:	100d883a 	mov	r6,r2
  806040:	080aa2c0 	call	80aa2c <__subdf3>
  806044:	1015883a 	mov	r10,r2
  806048:	a0800c04 	addi	r2,r20,48
  80604c:	e0800005 	stb	r2,0(fp)
  806050:	e7000044 	addi	fp,fp,1
  806054:	1817883a 	mov	r11,r3
  806058:	e57fd61e 	bne	fp,r21,805fb4 <_dtoa_r+0x5d8>
  80605c:	500d883a 	mov	r6,r10
  806060:	180f883a 	mov	r7,r3
  806064:	5009883a 	mov	r4,r10
  806068:	180b883a 	mov	r5,r3
  80606c:	080aaac0 	call	80aaac <__adddf3>
  806070:	100d883a 	mov	r6,r2
  806074:	9009883a 	mov	r4,r18
  806078:	980b883a 	mov	r5,r19
  80607c:	180f883a 	mov	r7,r3
  806080:	1021883a 	mov	r16,r2
  806084:	1823883a 	mov	r17,r3
  806088:	080b35c0 	call	80b35c <__ltdf2>
  80608c:	10000816 	blt	r2,zero,8060b0 <_dtoa_r+0x6d4>
  806090:	980b883a 	mov	r5,r19
  806094:	800d883a 	mov	r6,r16
  806098:	880f883a 	mov	r7,r17
  80609c:	9009883a 	mov	r4,r18
  8060a0:	080b13c0 	call	80b13c <__eqdf2>
  8060a4:	1000171e 	bne	r2,zero,806104 <_dtoa_r+0x728>
  8060a8:	a080004c 	andi	r2,r20,1
  8060ac:	10001526 	beq	r2,zero,806104 <_dtoa_r+0x728>
  8060b0:	d8800d17 	ldw	r2,52(sp)
  8060b4:	d8800415 	stw	r2,16(sp)
  8060b8:	e009883a 	mov	r4,fp
  8060bc:	213fffc4 	addi	r4,r4,-1
  8060c0:	20c00007 	ldb	r3,0(r4)
  8060c4:	00800e44 	movi	r2,57
  8060c8:	1880081e 	bne	r3,r2,8060ec <_dtoa_r+0x710>
  8060cc:	d8800517 	ldw	r2,20(sp)
  8060d0:	113ffa1e 	bne	r2,r4,8060bc <_dtoa_r+0x6e0>
  8060d4:	d8c00417 	ldw	r3,16(sp)
  8060d8:	d9800517 	ldw	r6,20(sp)
  8060dc:	00800c04 	movi	r2,48
  8060e0:	18c00044 	addi	r3,r3,1
  8060e4:	d8c00415 	stw	r3,16(sp)
  8060e8:	30800005 	stb	r2,0(r6)
  8060ec:	20800003 	ldbu	r2,0(r4)
  8060f0:	d8c00417 	ldw	r3,16(sp)
  8060f4:	27000044 	addi	fp,r4,1
  8060f8:	10800044 	addi	r2,r2,1
  8060fc:	d8c00d15 	stw	r3,52(sp)
  806100:	20800005 	stb	r2,0(r4)
  806104:	d9001617 	ldw	r4,88(sp)
  806108:	d9400717 	ldw	r5,28(sp)
  80610c:	08083900 	call	808390 <_Bfree>
  806110:	e0000005 	stb	zero,0(fp)
  806114:	d9800d17 	ldw	r6,52(sp)
  806118:	d8c02717 	ldw	r3,156(sp)
  80611c:	d9002917 	ldw	r4,164(sp)
  806120:	30800044 	addi	r2,r6,1
  806124:	18800015 	stw	r2,0(r3)
  806128:	20029c26 	beq	r4,zero,806b9c <_dtoa_r+0x11c0>
  80612c:	d8c00517 	ldw	r3,20(sp)
  806130:	27000015 	stw	fp,0(r4)
  806134:	003e5d06 	br	805aac <_dtoa_r+0xd0>
  806138:	d9800d17 	ldw	r6,52(sp)
  80613c:	00c02074 	movhi	r3,129
  806140:	18c04804 	addi	r3,r3,288
  806144:	d9001217 	ldw	r4,72(sp)
  806148:	300490fa 	slli	r2,r6,3
  80614c:	d9401317 	ldw	r5,76(sp)
  806150:	10c5883a 	add	r2,r2,r3
  806154:	12000017 	ldw	r8,0(r2)
  806158:	12400117 	ldw	r9,4(r2)
  80615c:	400d883a 	mov	r6,r8
  806160:	480f883a 	mov	r7,r9
  806164:	080b35c0 	call	80b35c <__ltdf2>
  806168:	1000030e 	bge	r2,zero,806178 <_dtoa_r+0x79c>
  80616c:	d8800d17 	ldw	r2,52(sp)
  806170:	10bfffc4 	addi	r2,r2,-1
  806174:	d8800d15 	stw	r2,52(sp)
  806178:	d8000c15 	stw	zero,48(sp)
  80617c:	003ea806 	br	805c20 <_dtoa_r+0x244>
  806180:	d9000b17 	ldw	r4,44(sp)
  806184:	202cc03a 	cmpne	r22,r4,zero
  806188:	b000c71e 	bne	r22,zero,8064a8 <_dtoa_r+0xacc>
  80618c:	dc001117 	ldw	r16,68(sp)
  806190:	dc801017 	ldw	r18,64(sp)
  806194:	0027883a 	mov	r19,zero
  806198:	04000b0e 	bge	zero,r16,8061c8 <_dtoa_r+0x7ec>
  80619c:	d8c00a17 	ldw	r3,40(sp)
  8061a0:	00c0090e 	bge	zero,r3,8061c8 <_dtoa_r+0x7ec>
  8061a4:	8005883a 	mov	r2,r16
  8061a8:	1c011316 	blt	r3,r16,8065f8 <_dtoa_r+0xc1c>
  8061ac:	d9000a17 	ldw	r4,40(sp)
  8061b0:	d9801117 	ldw	r6,68(sp)
  8061b4:	80a1c83a 	sub	r16,r16,r2
  8061b8:	2089c83a 	sub	r4,r4,r2
  8061bc:	308dc83a 	sub	r6,r6,r2
  8061c0:	d9000a15 	stw	r4,40(sp)
  8061c4:	d9801115 	stw	r6,68(sp)
  8061c8:	d8801017 	ldw	r2,64(sp)
  8061cc:	0080150e 	bge	zero,r2,806224 <_dtoa_r+0x848>
  8061d0:	d8c00b17 	ldw	r3,44(sp)
  8061d4:	1805003a 	cmpeq	r2,r3,zero
  8061d8:	1001c91e 	bne	r2,zero,806900 <_dtoa_r+0xf24>
  8061dc:	04800e0e 	bge	zero,r18,806218 <_dtoa_r+0x83c>
  8061e0:	d9001617 	ldw	r4,88(sp)
  8061e4:	980b883a 	mov	r5,r19
  8061e8:	900d883a 	mov	r6,r18
  8061ec:	08091440 	call	809144 <__pow5mult>
  8061f0:	d9001617 	ldw	r4,88(sp)
  8061f4:	d9800717 	ldw	r6,28(sp)
  8061f8:	100b883a 	mov	r5,r2
  8061fc:	1027883a 	mov	r19,r2
  806200:	0808e200 	call	808e20 <__multiply>
  806204:	d9001617 	ldw	r4,88(sp)
  806208:	d9400717 	ldw	r5,28(sp)
  80620c:	1023883a 	mov	r17,r2
  806210:	08083900 	call	808390 <_Bfree>
  806214:	dc400715 	stw	r17,28(sp)
  806218:	d9001017 	ldw	r4,64(sp)
  80621c:	248dc83a 	sub	r6,r4,r18
  806220:	30010e1e 	bne	r6,zero,80665c <_dtoa_r+0xc80>
  806224:	d9001617 	ldw	r4,88(sp)
  806228:	04400044 	movi	r17,1
  80622c:	880b883a 	mov	r5,r17
  806230:	08090080 	call	809008 <__i2b>
  806234:	d9800917 	ldw	r6,36(sp)
  806238:	1025883a 	mov	r18,r2
  80623c:	0180040e 	bge	zero,r6,806250 <_dtoa_r+0x874>
  806240:	d9001617 	ldw	r4,88(sp)
  806244:	100b883a 	mov	r5,r2
  806248:	08091440 	call	809144 <__pow5mult>
  80624c:	1025883a 	mov	r18,r2
  806250:	d8801717 	ldw	r2,92(sp)
  806254:	8880f30e 	bge	r17,r2,806624 <_dtoa_r+0xc48>
  806258:	0023883a 	mov	r17,zero
  80625c:	d9800917 	ldw	r6,36(sp)
  806260:	30019e1e 	bne	r6,zero,8068dc <_dtoa_r+0xf00>
  806264:	00c00044 	movi	r3,1
  806268:	d9000a17 	ldw	r4,40(sp)
  80626c:	20c5883a 	add	r2,r4,r3
  806270:	10c007cc 	andi	r3,r2,31
  806274:	1800841e 	bne	r3,zero,806488 <_dtoa_r+0xaac>
  806278:	00800704 	movi	r2,28
  80627c:	d9000a17 	ldw	r4,40(sp)
  806280:	d9801117 	ldw	r6,68(sp)
  806284:	80a1883a 	add	r16,r16,r2
  806288:	2089883a 	add	r4,r4,r2
  80628c:	308d883a 	add	r6,r6,r2
  806290:	d9000a15 	stw	r4,40(sp)
  806294:	d9801115 	stw	r6,68(sp)
  806298:	d8801117 	ldw	r2,68(sp)
  80629c:	0080050e 	bge	zero,r2,8062b4 <_dtoa_r+0x8d8>
  8062a0:	d9400717 	ldw	r5,28(sp)
  8062a4:	d9001617 	ldw	r4,88(sp)
  8062a8:	100d883a 	mov	r6,r2
  8062ac:	0808cd40 	call	808cd4 <__lshift>
  8062b0:	d8800715 	stw	r2,28(sp)
  8062b4:	d8c00a17 	ldw	r3,40(sp)
  8062b8:	00c0050e 	bge	zero,r3,8062d0 <_dtoa_r+0x8f4>
  8062bc:	d9001617 	ldw	r4,88(sp)
  8062c0:	900b883a 	mov	r5,r18
  8062c4:	180d883a 	mov	r6,r3
  8062c8:	0808cd40 	call	808cd4 <__lshift>
  8062cc:	1025883a 	mov	r18,r2
  8062d0:	d9000c17 	ldw	r4,48(sp)
  8062d4:	2005003a 	cmpeq	r2,r4,zero
  8062d8:	10016f26 	beq	r2,zero,806898 <_dtoa_r+0xebc>
  8062dc:	d9000f17 	ldw	r4,60(sp)
  8062e0:	0102170e 	bge	zero,r4,806b40 <_dtoa_r+0x1164>
  8062e4:	d9800b17 	ldw	r6,44(sp)
  8062e8:	3005003a 	cmpeq	r2,r6,zero
  8062ec:	1000881e 	bne	r2,zero,806510 <_dtoa_r+0xb34>
  8062f0:	0400050e 	bge	zero,r16,806308 <_dtoa_r+0x92c>
  8062f4:	d9001617 	ldw	r4,88(sp)
  8062f8:	980b883a 	mov	r5,r19
  8062fc:	800d883a 	mov	r6,r16
  806300:	0808cd40 	call	808cd4 <__lshift>
  806304:	1027883a 	mov	r19,r2
  806308:	8804c03a 	cmpne	r2,r17,zero
  80630c:	1002541e 	bne	r2,zero,806c60 <_dtoa_r+0x1284>
  806310:	980b883a 	mov	r5,r19
  806314:	dd800517 	ldw	r22,20(sp)
  806318:	dcc00615 	stw	r19,24(sp)
  80631c:	a700004c 	andi	fp,r20,1
  806320:	2827883a 	mov	r19,r5
  806324:	d9000717 	ldw	r4,28(sp)
  806328:	900b883a 	mov	r5,r18
  80632c:	08057c40 	call	8057c4 <quorem>
  806330:	d9000717 	ldw	r4,28(sp)
  806334:	d9400617 	ldw	r5,24(sp)
  806338:	1023883a 	mov	r17,r2
  80633c:	8dc00c04 	addi	r23,r17,48
  806340:	08084ec0 	call	8084ec <__mcmp>
  806344:	d9001617 	ldw	r4,88(sp)
  806348:	900b883a 	mov	r5,r18
  80634c:	980d883a 	mov	r6,r19
  806350:	1029883a 	mov	r20,r2
  806354:	0808b480 	call	808b48 <__mdiff>
  806358:	102b883a 	mov	r21,r2
  80635c:	10800317 	ldw	r2,12(r2)
  806360:	1001281e 	bne	r2,zero,806804 <_dtoa_r+0xe28>
  806364:	d9000717 	ldw	r4,28(sp)
  806368:	a80b883a 	mov	r5,r21
  80636c:	08084ec0 	call	8084ec <__mcmp>
  806370:	d9001617 	ldw	r4,88(sp)
  806374:	1021883a 	mov	r16,r2
  806378:	a80b883a 	mov	r5,r21
  80637c:	08083900 	call	808390 <_Bfree>
  806380:	8000041e 	bne	r16,zero,806394 <_dtoa_r+0x9b8>
  806384:	d8801717 	ldw	r2,92(sp)
  806388:	1000021e 	bne	r2,zero,806394 <_dtoa_r+0x9b8>
  80638c:	e004c03a 	cmpne	r2,fp,zero
  806390:	10011726 	beq	r2,zero,8067f0 <_dtoa_r+0xe14>
  806394:	a0010616 	blt	r20,zero,8067b0 <_dtoa_r+0xdd4>
  806398:	a000041e 	bne	r20,zero,8063ac <_dtoa_r+0x9d0>
  80639c:	d8c01717 	ldw	r3,92(sp)
  8063a0:	1800021e 	bne	r3,zero,8063ac <_dtoa_r+0x9d0>
  8063a4:	e004c03a 	cmpne	r2,fp,zero
  8063a8:	10010126 	beq	r2,zero,8067b0 <_dtoa_r+0xdd4>
  8063ac:	04023d16 	blt	zero,r16,806ca4 <_dtoa_r+0x12c8>
  8063b0:	b5c00005 	stb	r23,0(r22)
  8063b4:	d9800517 	ldw	r6,20(sp)
  8063b8:	d9000f17 	ldw	r4,60(sp)
  8063bc:	b5800044 	addi	r22,r22,1
  8063c0:	3105883a 	add	r2,r6,r4
  8063c4:	b0806526 	beq	r22,r2,80655c <_dtoa_r+0xb80>
  8063c8:	d9400717 	ldw	r5,28(sp)
  8063cc:	d9001617 	ldw	r4,88(sp)
  8063d0:	01800284 	movi	r6,10
  8063d4:	000f883a 	mov	r7,zero
  8063d8:	08090440 	call	809044 <__multadd>
  8063dc:	d8800715 	stw	r2,28(sp)
  8063e0:	d8800617 	ldw	r2,24(sp)
  8063e4:	14c10c26 	beq	r2,r19,806818 <_dtoa_r+0xe3c>
  8063e8:	d9400617 	ldw	r5,24(sp)
  8063ec:	d9001617 	ldw	r4,88(sp)
  8063f0:	01800284 	movi	r6,10
  8063f4:	000f883a 	mov	r7,zero
  8063f8:	08090440 	call	809044 <__multadd>
  8063fc:	d9001617 	ldw	r4,88(sp)
  806400:	980b883a 	mov	r5,r19
  806404:	01800284 	movi	r6,10
  806408:	000f883a 	mov	r7,zero
  80640c:	d8800615 	stw	r2,24(sp)
  806410:	08090440 	call	809044 <__multadd>
  806414:	1027883a 	mov	r19,r2
  806418:	003fc206 	br	806324 <_dtoa_r+0x948>
  80641c:	2445c83a 	sub	r2,r4,r17
  806420:	a088983a 	sll	r4,r20,r2
  806424:	003e4b06 	br	805d54 <_dtoa_r+0x378>
  806428:	01bfffc4 	movi	r6,-1
  80642c:	00800044 	movi	r2,1
  806430:	d9800e15 	stw	r6,56(sp)
  806434:	d9800f15 	stw	r6,60(sp)
  806438:	d8800b15 	stw	r2,44(sp)
  80643c:	d8c01617 	ldw	r3,88(sp)
  806440:	008005c4 	movi	r2,23
  806444:	18001115 	stw	zero,68(r3)
  806448:	1580082e 	bgeu	r2,r22,80646c <_dtoa_r+0xa90>
  80644c:	00c00104 	movi	r3,4
  806450:	0009883a 	mov	r4,zero
  806454:	18c7883a 	add	r3,r3,r3
  806458:	18800504 	addi	r2,r3,20
  80645c:	21000044 	addi	r4,r4,1
  806460:	b0bffc2e 	bgeu	r22,r2,806454 <_dtoa_r+0xa78>
  806464:	d9801617 	ldw	r6,88(sp)
  806468:	31001115 	stw	r4,68(r6)
  80646c:	dc000f17 	ldw	r16,60(sp)
  806470:	003e4b06 	br	805da0 <_dtoa_r+0x3c4>
  806474:	d9801717 	ldw	r6,92(sp)
  806478:	0023883a 	mov	r17,zero
  80647c:	31bfff04 	addi	r6,r6,-4
  806480:	d9801715 	stw	r6,92(sp)
  806484:	003df806 	br	805c68 <_dtoa_r+0x28c>
  806488:	00800804 	movi	r2,32
  80648c:	10c9c83a 	sub	r4,r2,r3
  806490:	00c00104 	movi	r3,4
  806494:	19005a16 	blt	r3,r4,806600 <_dtoa_r+0xc24>
  806498:	008000c4 	movi	r2,3
  80649c:	113f7e16 	blt	r2,r4,806298 <_dtoa_r+0x8bc>
  8064a0:	20800704 	addi	r2,r4,28
  8064a4:	003f7506 	br	80627c <_dtoa_r+0x8a0>
  8064a8:	d9801717 	ldw	r6,92(sp)
  8064ac:	00800044 	movi	r2,1
  8064b0:	1180a10e 	bge	r2,r6,806738 <_dtoa_r+0xd5c>
  8064b4:	d9800f17 	ldw	r6,60(sp)
  8064b8:	d8c01017 	ldw	r3,64(sp)
  8064bc:	30bfffc4 	addi	r2,r6,-1
  8064c0:	1881c616 	blt	r3,r2,806bdc <_dtoa_r+0x1200>
  8064c4:	18a5c83a 	sub	r18,r3,r2
  8064c8:	d8800f17 	ldw	r2,60(sp)
  8064cc:	10026216 	blt	r2,zero,806e58 <_dtoa_r+0x147c>
  8064d0:	dc001117 	ldw	r16,68(sp)
  8064d4:	1007883a 	mov	r3,r2
  8064d8:	d9800a17 	ldw	r6,40(sp)
  8064dc:	d8801117 	ldw	r2,68(sp)
  8064e0:	d9001617 	ldw	r4,88(sp)
  8064e4:	30cd883a 	add	r6,r6,r3
  8064e8:	10c5883a 	add	r2,r2,r3
  8064ec:	01400044 	movi	r5,1
  8064f0:	d9800a15 	stw	r6,40(sp)
  8064f4:	d8801115 	stw	r2,68(sp)
  8064f8:	08090080 	call	809008 <__i2b>
  8064fc:	1027883a 	mov	r19,r2
  806500:	003f2506 	br	806198 <_dtoa_r+0x7bc>
  806504:	00c02074 	movhi	r3,129
  806508:	18c02a04 	addi	r3,r3,168
  80650c:	003d6706 	br	805aac <_dtoa_r+0xd0>
  806510:	dd800517 	ldw	r22,20(sp)
  806514:	04000044 	movi	r16,1
  806518:	00000706 	br	806538 <_dtoa_r+0xb5c>
  80651c:	d9400717 	ldw	r5,28(sp)
  806520:	d9001617 	ldw	r4,88(sp)
  806524:	01800284 	movi	r6,10
  806528:	000f883a 	mov	r7,zero
  80652c:	08090440 	call	809044 <__multadd>
  806530:	d8800715 	stw	r2,28(sp)
  806534:	84000044 	addi	r16,r16,1
  806538:	d9000717 	ldw	r4,28(sp)
  80653c:	900b883a 	mov	r5,r18
  806540:	08057c40 	call	8057c4 <quorem>
  806544:	15c00c04 	addi	r23,r2,48
  806548:	b5c00005 	stb	r23,0(r22)
  80654c:	d8c00f17 	ldw	r3,60(sp)
  806550:	b5800044 	addi	r22,r22,1
  806554:	80fff116 	blt	r16,r3,80651c <_dtoa_r+0xb40>
  806558:	d8000615 	stw	zero,24(sp)
  80655c:	d9400717 	ldw	r5,28(sp)
  806560:	d9001617 	ldw	r4,88(sp)
  806564:	01800044 	movi	r6,1
  806568:	0808cd40 	call	808cd4 <__lshift>
  80656c:	1009883a 	mov	r4,r2
  806570:	900b883a 	mov	r5,r18
  806574:	d8800715 	stw	r2,28(sp)
  806578:	08084ec0 	call	8084ec <__mcmp>
  80657c:	00803c0e 	bge	zero,r2,806670 <_dtoa_r+0xc94>
  806580:	b009883a 	mov	r4,r22
  806584:	213fffc4 	addi	r4,r4,-1
  806588:	21400003 	ldbu	r5,0(r4)
  80658c:	00800e44 	movi	r2,57
  806590:	28c03fcc 	andi	r3,r5,255
  806594:	18c0201c 	xori	r3,r3,128
  806598:	18ffe004 	addi	r3,r3,-128
  80659c:	1881981e 	bne	r3,r2,806c00 <_dtoa_r+0x1224>
  8065a0:	d9800517 	ldw	r6,20(sp)
  8065a4:	21bff71e 	bne	r4,r6,806584 <_dtoa_r+0xba8>
  8065a8:	d8800d17 	ldw	r2,52(sp)
  8065ac:	37000044 	addi	fp,r6,1
  8065b0:	10800044 	addi	r2,r2,1
  8065b4:	d8800d15 	stw	r2,52(sp)
  8065b8:	00800c44 	movi	r2,49
  8065bc:	30800005 	stb	r2,0(r6)
  8065c0:	d9001617 	ldw	r4,88(sp)
  8065c4:	900b883a 	mov	r5,r18
  8065c8:	08083900 	call	808390 <_Bfree>
  8065cc:	983ecd26 	beq	r19,zero,806104 <_dtoa_r+0x728>
  8065d0:	d8c00617 	ldw	r3,24(sp)
  8065d4:	18000426 	beq	r3,zero,8065e8 <_dtoa_r+0xc0c>
  8065d8:	1cc00326 	beq	r3,r19,8065e8 <_dtoa_r+0xc0c>
  8065dc:	d9001617 	ldw	r4,88(sp)
  8065e0:	180b883a 	mov	r5,r3
  8065e4:	08083900 	call	808390 <_Bfree>
  8065e8:	d9001617 	ldw	r4,88(sp)
  8065ec:	980b883a 	mov	r5,r19
  8065f0:	08083900 	call	808390 <_Bfree>
  8065f4:	003ec306 	br	806104 <_dtoa_r+0x728>
  8065f8:	1805883a 	mov	r2,r3
  8065fc:	003eeb06 	br	8061ac <_dtoa_r+0x7d0>
  806600:	d9800a17 	ldw	r6,40(sp)
  806604:	d8c01117 	ldw	r3,68(sp)
  806608:	20bfff04 	addi	r2,r4,-4
  80660c:	308d883a 	add	r6,r6,r2
  806610:	1887883a 	add	r3,r3,r2
  806614:	80a1883a 	add	r16,r16,r2
  806618:	d9800a15 	stw	r6,40(sp)
  80661c:	d8c01115 	stw	r3,68(sp)
  806620:	003f1d06 	br	806298 <_dtoa_r+0x8bc>
  806624:	a03f0c1e 	bne	r20,zero,806258 <_dtoa_r+0x87c>
  806628:	00800434 	movhi	r2,16
  80662c:	10bfffc4 	addi	r2,r2,-1
  806630:	a884703a 	and	r2,r21,r2
  806634:	103f081e 	bne	r2,zero,806258 <_dtoa_r+0x87c>
  806638:	a89ffc2c 	andhi	r2,r21,32752
  80663c:	103f0626 	beq	r2,zero,806258 <_dtoa_r+0x87c>
  806640:	d8c01117 	ldw	r3,68(sp)
  806644:	d9000a17 	ldw	r4,40(sp)
  806648:	18c00044 	addi	r3,r3,1
  80664c:	21000044 	addi	r4,r4,1
  806650:	d8c01115 	stw	r3,68(sp)
  806654:	d9000a15 	stw	r4,40(sp)
  806658:	003f0006 	br	80625c <_dtoa_r+0x880>
  80665c:	d9400717 	ldw	r5,28(sp)
  806660:	d9001617 	ldw	r4,88(sp)
  806664:	08091440 	call	809144 <__pow5mult>
  806668:	d8800715 	stw	r2,28(sp)
  80666c:	003eed06 	br	806224 <_dtoa_r+0x848>
  806670:	1000021e 	bne	r2,zero,80667c <_dtoa_r+0xca0>
  806674:	b880004c 	andi	r2,r23,1
  806678:	103fc11e 	bne	r2,zero,806580 <_dtoa_r+0xba4>
  80667c:	b5bfffc4 	addi	r22,r22,-1
  806680:	b0c00007 	ldb	r3,0(r22)
  806684:	00800c04 	movi	r2,48
  806688:	18bffc26 	beq	r3,r2,80667c <_dtoa_r+0xca0>
  80668c:	b7000044 	addi	fp,r22,1
  806690:	003fcb06 	br	8065c0 <_dtoa_r+0xbe4>
  806694:	d9800d17 	ldw	r6,52(sp)
  806698:	018fc83a 	sub	r7,zero,r6
  80669c:	3801f726 	beq	r7,zero,806e7c <_dtoa_r+0x14a0>
  8066a0:	398003cc 	andi	r6,r7,15
  8066a4:	300c90fa 	slli	r6,r6,3
  8066a8:	01402074 	movhi	r5,129
  8066ac:	29404804 	addi	r5,r5,288
  8066b0:	d9001217 	ldw	r4,72(sp)
  8066b4:	314d883a 	add	r6,r6,r5
  8066b8:	30c00117 	ldw	r3,4(r6)
  8066bc:	30800017 	ldw	r2,0(r6)
  8066c0:	d9401317 	ldw	r5,76(sp)
  8066c4:	3821d13a 	srai	r16,r7,4
  8066c8:	100d883a 	mov	r6,r2
  8066cc:	180f883a 	mov	r7,r3
  8066d0:	080ab200 	call	80ab20 <__muldf3>
  8066d4:	1011883a 	mov	r8,r2
  8066d8:	1813883a 	mov	r9,r3
  8066dc:	1029883a 	mov	r20,r2
  8066e0:	182b883a 	mov	r21,r3
  8066e4:	8001e526 	beq	r16,zero,806e7c <_dtoa_r+0x14a0>
  8066e8:	05800084 	movi	r22,2
  8066ec:	04402074 	movhi	r17,129
  8066f0:	8c407a04 	addi	r17,r17,488
  8066f4:	8080004c 	andi	r2,r16,1
  8066f8:	1005003a 	cmpeq	r2,r2,zero
  8066fc:	1000081e 	bne	r2,zero,806720 <_dtoa_r+0xd44>
  806700:	89800017 	ldw	r6,0(r17)
  806704:	89c00117 	ldw	r7,4(r17)
  806708:	480b883a 	mov	r5,r9
  80670c:	4009883a 	mov	r4,r8
  806710:	080ab200 	call	80ab20 <__muldf3>
  806714:	1011883a 	mov	r8,r2
  806718:	b5800044 	addi	r22,r22,1
  80671c:	1813883a 	mov	r9,r3
  806720:	8021d07a 	srai	r16,r16,1
  806724:	8c400204 	addi	r17,r17,8
  806728:	803ff21e 	bne	r16,zero,8066f4 <_dtoa_r+0xd18>
  80672c:	4029883a 	mov	r20,r8
  806730:	482b883a 	mov	r21,r9
  806734:	003dca06 	br	805e60 <_dtoa_r+0x484>
  806738:	d9000817 	ldw	r4,32(sp)
  80673c:	2005003a 	cmpeq	r2,r4,zero
  806740:	1001f61e 	bne	r2,zero,806f1c <_dtoa_r+0x1540>
  806744:	dc001117 	ldw	r16,68(sp)
  806748:	dc801017 	ldw	r18,64(sp)
  80674c:	18c10cc4 	addi	r3,r3,1075
  806750:	003f6106 	br	8064d8 <_dtoa_r+0xafc>
  806754:	d8000b15 	stw	zero,44(sp)
  806758:	d9802617 	ldw	r6,152(sp)
  80675c:	d8c00d17 	ldw	r3,52(sp)
  806760:	30800044 	addi	r2,r6,1
  806764:	18ad883a 	add	r22,r3,r2
  806768:	b13fffc4 	addi	r4,r22,-1
  80676c:	d9000e15 	stw	r4,56(sp)
  806770:	0581f60e 	bge	zero,r22,806f4c <_dtoa_r+0x1570>
  806774:	dd800f15 	stw	r22,60(sp)
  806778:	003f3006 	br	80643c <_dtoa_r+0xa60>
  80677c:	d8000b15 	stw	zero,44(sp)
  806780:	d9002617 	ldw	r4,152(sp)
  806784:	0101eb0e 	bge	zero,r4,806f34 <_dtoa_r+0x1558>
  806788:	202d883a 	mov	r22,r4
  80678c:	d9000e15 	stw	r4,56(sp)
  806790:	d9000f15 	stw	r4,60(sp)
  806794:	003f2906 	br	80643c <_dtoa_r+0xa60>
  806798:	01800044 	movi	r6,1
  80679c:	d9800b15 	stw	r6,44(sp)
  8067a0:	003ff706 	br	806780 <_dtoa_r+0xda4>
  8067a4:	01000044 	movi	r4,1
  8067a8:	d9000b15 	stw	r4,44(sp)
  8067ac:	003fea06 	br	806758 <_dtoa_r+0xd7c>
  8067b0:	04000c0e 	bge	zero,r16,8067e4 <_dtoa_r+0xe08>
  8067b4:	d9400717 	ldw	r5,28(sp)
  8067b8:	d9001617 	ldw	r4,88(sp)
  8067bc:	01800044 	movi	r6,1
  8067c0:	0808cd40 	call	808cd4 <__lshift>
  8067c4:	1009883a 	mov	r4,r2
  8067c8:	900b883a 	mov	r5,r18
  8067cc:	d8800715 	stw	r2,28(sp)
  8067d0:	08084ec0 	call	8084ec <__mcmp>
  8067d4:	0081e00e 	bge	zero,r2,806f58 <_dtoa_r+0x157c>
  8067d8:	bdc00044 	addi	r23,r23,1
  8067dc:	00800e84 	movi	r2,58
  8067e0:	b881a226 	beq	r23,r2,806e6c <_dtoa_r+0x1490>
  8067e4:	b7000044 	addi	fp,r22,1
  8067e8:	b5c00005 	stb	r23,0(r22)
  8067ec:	003f7406 	br	8065c0 <_dtoa_r+0xbe4>
  8067f0:	00800e44 	movi	r2,57
  8067f4:	b8819d26 	beq	r23,r2,806e6c <_dtoa_r+0x1490>
  8067f8:	053ffa0e 	bge	zero,r20,8067e4 <_dtoa_r+0xe08>
  8067fc:	8dc00c44 	addi	r23,r17,49
  806800:	003ff806 	br	8067e4 <_dtoa_r+0xe08>
  806804:	d9001617 	ldw	r4,88(sp)
  806808:	a80b883a 	mov	r5,r21
  80680c:	04000044 	movi	r16,1
  806810:	08083900 	call	808390 <_Bfree>
  806814:	003edf06 	br	806394 <_dtoa_r+0x9b8>
  806818:	d9001617 	ldw	r4,88(sp)
  80681c:	980b883a 	mov	r5,r19
  806820:	01800284 	movi	r6,10
  806824:	000f883a 	mov	r7,zero
  806828:	08090440 	call	809044 <__multadd>
  80682c:	1027883a 	mov	r19,r2
  806830:	d8800615 	stw	r2,24(sp)
  806834:	003ebb06 	br	806324 <_dtoa_r+0x948>
  806838:	d9801117 	ldw	r6,68(sp)
  80683c:	d8800d17 	ldw	r2,52(sp)
  806840:	d8000915 	stw	zero,36(sp)
  806844:	308dc83a 	sub	r6,r6,r2
  806848:	0087c83a 	sub	r3,zero,r2
  80684c:	d9801115 	stw	r6,68(sp)
  806850:	d8c01015 	stw	r3,64(sp)
  806854:	003cfe06 	br	805c50 <_dtoa_r+0x274>
  806858:	018dc83a 	sub	r6,zero,r6
  80685c:	d9801115 	stw	r6,68(sp)
  806860:	d8000a15 	stw	zero,40(sp)
  806864:	003cf306 	br	805c34 <_dtoa_r+0x258>
  806868:	d9000d17 	ldw	r4,52(sp)
  80686c:	080b3e40 	call	80b3e4 <__floatsidf>
  806870:	880b883a 	mov	r5,r17
  806874:	8009883a 	mov	r4,r16
  806878:	180f883a 	mov	r7,r3
  80687c:	100d883a 	mov	r6,r2
  806880:	080b1c40 	call	80b1c4 <__nedf2>
  806884:	103ce126 	beq	r2,zero,805c0c <_dtoa_r+0x230>
  806888:	d9800d17 	ldw	r6,52(sp)
  80688c:	31bfffc4 	addi	r6,r6,-1
  806890:	d9800d15 	stw	r6,52(sp)
  806894:	003cdd06 	br	805c0c <_dtoa_r+0x230>
  806898:	d9000717 	ldw	r4,28(sp)
  80689c:	900b883a 	mov	r5,r18
  8068a0:	08084ec0 	call	8084ec <__mcmp>
  8068a4:	103e8d0e 	bge	r2,zero,8062dc <_dtoa_r+0x900>
  8068a8:	d9400717 	ldw	r5,28(sp)
  8068ac:	d9001617 	ldw	r4,88(sp)
  8068b0:	01800284 	movi	r6,10
  8068b4:	000f883a 	mov	r7,zero
  8068b8:	08090440 	call	809044 <__multadd>
  8068bc:	d9800d17 	ldw	r6,52(sp)
  8068c0:	d8800715 	stw	r2,28(sp)
  8068c4:	31bfffc4 	addi	r6,r6,-1
  8068c8:	d9800d15 	stw	r6,52(sp)
  8068cc:	b001a71e 	bne	r22,zero,806f6c <_dtoa_r+0x1590>
  8068d0:	d8800e17 	ldw	r2,56(sp)
  8068d4:	d8800f15 	stw	r2,60(sp)
  8068d8:	003e8006 	br	8062dc <_dtoa_r+0x900>
  8068dc:	90800417 	ldw	r2,16(r18)
  8068e0:	1085883a 	add	r2,r2,r2
  8068e4:	1085883a 	add	r2,r2,r2
  8068e8:	1485883a 	add	r2,r2,r18
  8068ec:	11000417 	ldw	r4,16(r2)
  8068f0:	08083b80 	call	8083b8 <__hi0bits>
  8068f4:	00c00804 	movi	r3,32
  8068f8:	1887c83a 	sub	r3,r3,r2
  8068fc:	003e5a06 	br	806268 <_dtoa_r+0x88c>
  806900:	d9400717 	ldw	r5,28(sp)
  806904:	d9801017 	ldw	r6,64(sp)
  806908:	d9001617 	ldw	r4,88(sp)
  80690c:	08091440 	call	809144 <__pow5mult>
  806910:	d8800715 	stw	r2,28(sp)
  806914:	003e4306 	br	806224 <_dtoa_r+0x848>
  806918:	d9800f17 	ldw	r6,60(sp)
  80691c:	d8800d17 	ldw	r2,52(sp)
  806920:	d9800315 	stw	r6,12(sp)
  806924:	d8800415 	stw	r2,16(sp)
  806928:	d8c00b17 	ldw	r3,44(sp)
  80692c:	1805003a 	cmpeq	r2,r3,zero
  806930:	1000e21e 	bne	r2,zero,806cbc <_dtoa_r+0x12e0>
  806934:	d9000317 	ldw	r4,12(sp)
  806938:	0005883a 	mov	r2,zero
  80693c:	00cff834 	movhi	r3,16352
  806940:	200c90fa 	slli	r6,r4,3
  806944:	01002074 	movhi	r4,129
  806948:	21004804 	addi	r4,r4,288
  80694c:	180b883a 	mov	r5,r3
  806950:	310d883a 	add	r6,r6,r4
  806954:	327fff17 	ldw	r9,-4(r6)
  806958:	323ffe17 	ldw	r8,-8(r6)
  80695c:	1009883a 	mov	r4,r2
  806960:	480f883a 	mov	r7,r9
  806964:	400d883a 	mov	r6,r8
  806968:	080aee40 	call	80aee4 <__divdf3>
  80696c:	180b883a 	mov	r5,r3
  806970:	b00d883a 	mov	r6,r22
  806974:	b80f883a 	mov	r7,r23
  806978:	1009883a 	mov	r4,r2
  80697c:	080aa2c0 	call	80aa2c <__subdf3>
  806980:	a80b883a 	mov	r5,r21
  806984:	a009883a 	mov	r4,r20
  806988:	d8c01915 	stw	r3,100(sp)
  80698c:	d8801815 	stw	r2,96(sp)
  806990:	080b4dc0 	call	80b4dc <__fixdfsi>
  806994:	1009883a 	mov	r4,r2
  806998:	1027883a 	mov	r19,r2
  80699c:	080b3e40 	call	80b3e4 <__floatsidf>
  8069a0:	a80b883a 	mov	r5,r21
  8069a4:	a009883a 	mov	r4,r20
  8069a8:	180f883a 	mov	r7,r3
  8069ac:	100d883a 	mov	r6,r2
  8069b0:	080aa2c0 	call	80aa2c <__subdf3>
  8069b4:	d9801817 	ldw	r6,96(sp)
  8069b8:	1823883a 	mov	r17,r3
  8069bc:	d8801415 	stw	r2,80(sp)
  8069c0:	302d883a 	mov	r22,r6
  8069c4:	d9800517 	ldw	r6,20(sp)
  8069c8:	9cc00c04 	addi	r19,r19,48
  8069cc:	dc401515 	stw	r17,84(sp)
  8069d0:	d8c01917 	ldw	r3,100(sp)
  8069d4:	34c00005 	stb	r19,0(r6)
  8069d8:	d8800517 	ldw	r2,20(sp)
  8069dc:	d9401917 	ldw	r5,100(sp)
  8069e0:	d9801417 	ldw	r6,80(sp)
  8069e4:	b009883a 	mov	r4,r22
  8069e8:	880f883a 	mov	r7,r17
  8069ec:	182f883a 	mov	r23,r3
  8069f0:	17000044 	addi	fp,r2,1
  8069f4:	080b24c0 	call	80b24c <__gtdf2>
  8069f8:	00804e16 	blt	zero,r2,806b34 <_dtoa_r+0x1158>
  8069fc:	d9801417 	ldw	r6,80(sp)
  806a00:	0005883a 	mov	r2,zero
  806a04:	00cffc34 	movhi	r3,16368
  806a08:	180b883a 	mov	r5,r3
  806a0c:	880f883a 	mov	r7,r17
  806a10:	1009883a 	mov	r4,r2
  806a14:	080aa2c0 	call	80aa2c <__subdf3>
  806a18:	d9401917 	ldw	r5,100(sp)
  806a1c:	180f883a 	mov	r7,r3
  806a20:	b009883a 	mov	r4,r22
  806a24:	100d883a 	mov	r6,r2
  806a28:	080b24c0 	call	80b24c <__gtdf2>
  806a2c:	00bda216 	blt	zero,r2,8060b8 <_dtoa_r+0x6dc>
  806a30:	d8c00317 	ldw	r3,12(sp)
  806a34:	00800044 	movi	r2,1
  806a38:	10c01216 	blt	r2,r3,806a84 <_dtoa_r+0x10a8>
  806a3c:	003d4506 	br	805f54 <_dtoa_r+0x578>
  806a40:	d9801417 	ldw	r6,80(sp)
  806a44:	0005883a 	mov	r2,zero
  806a48:	00cffc34 	movhi	r3,16368
  806a4c:	180b883a 	mov	r5,r3
  806a50:	880f883a 	mov	r7,r17
  806a54:	1009883a 	mov	r4,r2
  806a58:	080aa2c0 	call	80aa2c <__subdf3>
  806a5c:	d9c01b17 	ldw	r7,108(sp)
  806a60:	180b883a 	mov	r5,r3
  806a64:	1009883a 	mov	r4,r2
  806a68:	b00d883a 	mov	r6,r22
  806a6c:	080b35c0 	call	80b35c <__ltdf2>
  806a70:	103d9116 	blt	r2,zero,8060b8 <_dtoa_r+0x6dc>
  806a74:	d9800517 	ldw	r6,20(sp)
  806a78:	d9000317 	ldw	r4,12(sp)
  806a7c:	3105883a 	add	r2,r6,r4
  806a80:	e0bd3426 	beq	fp,r2,805f54 <_dtoa_r+0x578>
  806a84:	04500934 	movhi	r17,16420
  806a88:	0021883a 	mov	r16,zero
  806a8c:	b80b883a 	mov	r5,r23
  806a90:	b009883a 	mov	r4,r22
  806a94:	800d883a 	mov	r6,r16
  806a98:	880f883a 	mov	r7,r17
  806a9c:	080ab200 	call	80ab20 <__muldf3>
  806aa0:	d9401517 	ldw	r5,84(sp)
  806aa4:	d9001417 	ldw	r4,80(sp)
  806aa8:	880f883a 	mov	r7,r17
  806aac:	000d883a 	mov	r6,zero
  806ab0:	d8801a15 	stw	r2,104(sp)
  806ab4:	d8c01b15 	stw	r3,108(sp)
  806ab8:	080ab200 	call	80ab20 <__muldf3>
  806abc:	180b883a 	mov	r5,r3
  806ac0:	1009883a 	mov	r4,r2
  806ac4:	1823883a 	mov	r17,r3
  806ac8:	1021883a 	mov	r16,r2
  806acc:	080b4dc0 	call	80b4dc <__fixdfsi>
  806ad0:	1009883a 	mov	r4,r2
  806ad4:	102b883a 	mov	r21,r2
  806ad8:	080b3e40 	call	80b3e4 <__floatsidf>
  806adc:	880b883a 	mov	r5,r17
  806ae0:	8009883a 	mov	r4,r16
  806ae4:	180f883a 	mov	r7,r3
  806ae8:	100d883a 	mov	r6,r2
  806aec:	080aa2c0 	call	80aa2c <__subdf3>
  806af0:	1021883a 	mov	r16,r2
  806af4:	d9001b17 	ldw	r4,108(sp)
  806af8:	1823883a 	mov	r17,r3
  806afc:	dc001415 	stw	r16,80(sp)
  806b00:	ad400c04 	addi	r21,r21,48
  806b04:	dc401515 	stw	r17,84(sp)
  806b08:	d8801a17 	ldw	r2,104(sp)
  806b0c:	e5400005 	stb	r21,0(fp)
  806b10:	202f883a 	mov	r23,r4
  806b14:	d9c01b17 	ldw	r7,108(sp)
  806b18:	d9001417 	ldw	r4,80(sp)
  806b1c:	880b883a 	mov	r5,r17
  806b20:	100d883a 	mov	r6,r2
  806b24:	102d883a 	mov	r22,r2
  806b28:	e7000044 	addi	fp,fp,1
  806b2c:	080b35c0 	call	80b35c <__ltdf2>
  806b30:	103fc30e 	bge	r2,zero,806a40 <_dtoa_r+0x1064>
  806b34:	d9000417 	ldw	r4,16(sp)
  806b38:	d9000d15 	stw	r4,52(sp)
  806b3c:	003d7106 	br	806104 <_dtoa_r+0x728>
  806b40:	d9801717 	ldw	r6,92(sp)
  806b44:	00800084 	movi	r2,2
  806b48:	11bde60e 	bge	r2,r6,8062e4 <_dtoa_r+0x908>
  806b4c:	203cfb1e 	bne	r4,zero,805f3c <_dtoa_r+0x560>
  806b50:	d9001617 	ldw	r4,88(sp)
  806b54:	900b883a 	mov	r5,r18
  806b58:	01800144 	movi	r6,5
  806b5c:	000f883a 	mov	r7,zero
  806b60:	08090440 	call	809044 <__multadd>
  806b64:	d9000717 	ldw	r4,28(sp)
  806b68:	100b883a 	mov	r5,r2
  806b6c:	1025883a 	mov	r18,r2
  806b70:	08084ec0 	call	8084ec <__mcmp>
  806b74:	00bcf10e 	bge	zero,r2,805f3c <_dtoa_r+0x560>
  806b78:	d8c00d17 	ldw	r3,52(sp)
  806b7c:	d9000517 	ldw	r4,20(sp)
  806b80:	d8000615 	stw	zero,24(sp)
  806b84:	18c00044 	addi	r3,r3,1
  806b88:	d8c00d15 	stw	r3,52(sp)
  806b8c:	00800c44 	movi	r2,49
  806b90:	27000044 	addi	fp,r4,1
  806b94:	20800005 	stb	r2,0(r4)
  806b98:	003e8906 	br	8065c0 <_dtoa_r+0xbe4>
  806b9c:	d8c00517 	ldw	r3,20(sp)
  806ba0:	003bc206 	br	805aac <_dtoa_r+0xd0>
  806ba4:	01802074 	movhi	r6,129
  806ba8:	31807a04 	addi	r6,r6,488
  806bac:	30c00917 	ldw	r3,36(r6)
  806bb0:	30800817 	ldw	r2,32(r6)
  806bb4:	d9001217 	ldw	r4,72(sp)
  806bb8:	d9401317 	ldw	r5,76(sp)
  806bbc:	180f883a 	mov	r7,r3
  806bc0:	100d883a 	mov	r6,r2
  806bc4:	080aee40 	call	80aee4 <__divdf3>
  806bc8:	948003cc 	andi	r18,r18,15
  806bcc:	058000c4 	movi	r22,3
  806bd0:	1029883a 	mov	r20,r2
  806bd4:	182b883a 	mov	r21,r3
  806bd8:	003c8906 	br	805e00 <_dtoa_r+0x424>
  806bdc:	d9001017 	ldw	r4,64(sp)
  806be0:	d9800917 	ldw	r6,36(sp)
  806be4:	0025883a 	mov	r18,zero
  806be8:	1105c83a 	sub	r2,r2,r4
  806bec:	2089883a 	add	r4,r4,r2
  806bf0:	308d883a 	add	r6,r6,r2
  806bf4:	d9001015 	stw	r4,64(sp)
  806bf8:	d9800915 	stw	r6,36(sp)
  806bfc:	003e3206 	br	8064c8 <_dtoa_r+0xaec>
  806c00:	28800044 	addi	r2,r5,1
  806c04:	27000044 	addi	fp,r4,1
  806c08:	20800005 	stb	r2,0(r4)
  806c0c:	003e6c06 	br	8065c0 <_dtoa_r+0xbe4>
  806c10:	d8800f17 	ldw	r2,60(sp)
  806c14:	00bce016 	blt	zero,r2,805f98 <_dtoa_r+0x5bc>
  806c18:	d9800f17 	ldw	r6,60(sp)
  806c1c:	303cc51e 	bne	r6,zero,805f34 <_dtoa_r+0x558>
  806c20:	0005883a 	mov	r2,zero
  806c24:	00d00534 	movhi	r3,16404
  806c28:	980b883a 	mov	r5,r19
  806c2c:	180f883a 	mov	r7,r3
  806c30:	9009883a 	mov	r4,r18
  806c34:	100d883a 	mov	r6,r2
  806c38:	080ab200 	call	80ab20 <__muldf3>
  806c3c:	180b883a 	mov	r5,r3
  806c40:	a80f883a 	mov	r7,r21
  806c44:	1009883a 	mov	r4,r2
  806c48:	a00d883a 	mov	r6,r20
  806c4c:	080b2d40 	call	80b2d4 <__gedf2>
  806c50:	103cb80e 	bge	r2,zero,805f34 <_dtoa_r+0x558>
  806c54:	0027883a 	mov	r19,zero
  806c58:	0025883a 	mov	r18,zero
  806c5c:	003fc606 	br	806b78 <_dtoa_r+0x119c>
  806c60:	99400117 	ldw	r5,4(r19)
  806c64:	d9001617 	ldw	r4,88(sp)
  806c68:	08089100 	call	808910 <_Balloc>
  806c6c:	99800417 	ldw	r6,16(r19)
  806c70:	11000304 	addi	r4,r2,12
  806c74:	99400304 	addi	r5,r19,12
  806c78:	318d883a 	add	r6,r6,r6
  806c7c:	318d883a 	add	r6,r6,r6
  806c80:	31800204 	addi	r6,r6,8
  806c84:	1023883a 	mov	r17,r2
  806c88:	0802de40 	call	802de4 <memcpy>
  806c8c:	d9001617 	ldw	r4,88(sp)
  806c90:	880b883a 	mov	r5,r17
  806c94:	01800044 	movi	r6,1
  806c98:	0808cd40 	call	808cd4 <__lshift>
  806c9c:	100b883a 	mov	r5,r2
  806ca0:	003d9c06 	br	806314 <_dtoa_r+0x938>
  806ca4:	00800e44 	movi	r2,57
  806ca8:	b8807026 	beq	r23,r2,806e6c <_dtoa_r+0x1490>
  806cac:	b8800044 	addi	r2,r23,1
  806cb0:	b7000044 	addi	fp,r22,1
  806cb4:	b0800005 	stb	r2,0(r22)
  806cb8:	003e4106 	br	8065c0 <_dtoa_r+0xbe4>
  806cbc:	d8800317 	ldw	r2,12(sp)
  806cc0:	01802074 	movhi	r6,129
  806cc4:	31804804 	addi	r6,r6,288
  806cc8:	b009883a 	mov	r4,r22
  806ccc:	100e90fa 	slli	r7,r2,3
  806cd0:	b80b883a 	mov	r5,r23
  806cd4:	398f883a 	add	r7,r7,r6
  806cd8:	38bffe17 	ldw	r2,-8(r7)
  806cdc:	d9800517 	ldw	r6,20(sp)
  806ce0:	38ffff17 	ldw	r3,-4(r7)
  806ce4:	37000044 	addi	fp,r6,1
  806ce8:	180f883a 	mov	r7,r3
  806cec:	100d883a 	mov	r6,r2
  806cf0:	080ab200 	call	80ab20 <__muldf3>
  806cf4:	a80b883a 	mov	r5,r21
  806cf8:	a009883a 	mov	r4,r20
  806cfc:	182f883a 	mov	r23,r3
  806d00:	102d883a 	mov	r22,r2
  806d04:	080b4dc0 	call	80b4dc <__fixdfsi>
  806d08:	1009883a 	mov	r4,r2
  806d0c:	1027883a 	mov	r19,r2
  806d10:	080b3e40 	call	80b3e4 <__floatsidf>
  806d14:	a80b883a 	mov	r5,r21
  806d18:	a009883a 	mov	r4,r20
  806d1c:	180f883a 	mov	r7,r3
  806d20:	100d883a 	mov	r6,r2
  806d24:	080aa2c0 	call	80aa2c <__subdf3>
  806d28:	180b883a 	mov	r5,r3
  806d2c:	d8c00517 	ldw	r3,20(sp)
  806d30:	9cc00c04 	addi	r19,r19,48
  806d34:	1009883a 	mov	r4,r2
  806d38:	1cc00005 	stb	r19,0(r3)
  806d3c:	2021883a 	mov	r16,r4
  806d40:	d9000317 	ldw	r4,12(sp)
  806d44:	00800044 	movi	r2,1
  806d48:	2823883a 	mov	r17,r5
  806d4c:	20802226 	beq	r4,r2,806dd8 <_dtoa_r+0x13fc>
  806d50:	1029883a 	mov	r20,r2
  806d54:	0005883a 	mov	r2,zero
  806d58:	00d00934 	movhi	r3,16420
  806d5c:	180f883a 	mov	r7,r3
  806d60:	100d883a 	mov	r6,r2
  806d64:	880b883a 	mov	r5,r17
  806d68:	8009883a 	mov	r4,r16
  806d6c:	080ab200 	call	80ab20 <__muldf3>
  806d70:	180b883a 	mov	r5,r3
  806d74:	1009883a 	mov	r4,r2
  806d78:	1823883a 	mov	r17,r3
  806d7c:	1021883a 	mov	r16,r2
  806d80:	080b4dc0 	call	80b4dc <__fixdfsi>
  806d84:	1009883a 	mov	r4,r2
  806d88:	102b883a 	mov	r21,r2
  806d8c:	080b3e40 	call	80b3e4 <__floatsidf>
  806d90:	880b883a 	mov	r5,r17
  806d94:	8009883a 	mov	r4,r16
  806d98:	180f883a 	mov	r7,r3
  806d9c:	100d883a 	mov	r6,r2
  806da0:	080aa2c0 	call	80aa2c <__subdf3>
  806da4:	180b883a 	mov	r5,r3
  806da8:	d8c00517 	ldw	r3,20(sp)
  806dac:	1009883a 	mov	r4,r2
  806db0:	ad400c04 	addi	r21,r21,48
  806db4:	1d05883a 	add	r2,r3,r20
  806db8:	15400005 	stb	r21,0(r2)
  806dbc:	2021883a 	mov	r16,r4
  806dc0:	d9000317 	ldw	r4,12(sp)
  806dc4:	a5000044 	addi	r20,r20,1
  806dc8:	2823883a 	mov	r17,r5
  806dcc:	a13fe11e 	bne	r20,r4,806d54 <_dtoa_r+0x1378>
  806dd0:	e505883a 	add	r2,fp,r20
  806dd4:	173fffc4 	addi	fp,r2,-1
  806dd8:	0025883a 	mov	r18,zero
  806ddc:	04cff834 	movhi	r19,16352
  806de0:	b009883a 	mov	r4,r22
  806de4:	b80b883a 	mov	r5,r23
  806de8:	900d883a 	mov	r6,r18
  806dec:	980f883a 	mov	r7,r19
  806df0:	080aaac0 	call	80aaac <__adddf3>
  806df4:	180b883a 	mov	r5,r3
  806df8:	1009883a 	mov	r4,r2
  806dfc:	800d883a 	mov	r6,r16
  806e00:	880f883a 	mov	r7,r17
  806e04:	080b35c0 	call	80b35c <__ltdf2>
  806e08:	103cab16 	blt	r2,zero,8060b8 <_dtoa_r+0x6dc>
  806e0c:	0009883a 	mov	r4,zero
  806e10:	980b883a 	mov	r5,r19
  806e14:	b80f883a 	mov	r7,r23
  806e18:	b00d883a 	mov	r6,r22
  806e1c:	080aa2c0 	call	80aa2c <__subdf3>
  806e20:	180b883a 	mov	r5,r3
  806e24:	880f883a 	mov	r7,r17
  806e28:	1009883a 	mov	r4,r2
  806e2c:	800d883a 	mov	r6,r16
  806e30:	080b24c0 	call	80b24c <__gtdf2>
  806e34:	00bc470e 	bge	zero,r2,805f54 <_dtoa_r+0x578>
  806e38:	00c00c04 	movi	r3,48
  806e3c:	e73fffc4 	addi	fp,fp,-1
  806e40:	e0800007 	ldb	r2,0(fp)
  806e44:	10fffd26 	beq	r2,r3,806e3c <_dtoa_r+0x1460>
  806e48:	d9800417 	ldw	r6,16(sp)
  806e4c:	e7000044 	addi	fp,fp,1
  806e50:	d9800d15 	stw	r6,52(sp)
  806e54:	003cab06 	br	806104 <_dtoa_r+0x728>
  806e58:	d8c00f17 	ldw	r3,60(sp)
  806e5c:	d9001117 	ldw	r4,68(sp)
  806e60:	20e1c83a 	sub	r16,r4,r3
  806e64:	0007883a 	mov	r3,zero
  806e68:	003d9b06 	br	8064d8 <_dtoa_r+0xafc>
  806e6c:	00800e44 	movi	r2,57
  806e70:	b0800005 	stb	r2,0(r22)
  806e74:	b5800044 	addi	r22,r22,1
  806e78:	003dc106 	br	806580 <_dtoa_r+0xba4>
  806e7c:	05800084 	movi	r22,2
  806e80:	003bf706 	br	805e60 <_dtoa_r+0x484>
  806e84:	d9000f17 	ldw	r4,60(sp)
  806e88:	013c000e 	bge	zero,r4,805e8c <_dtoa_r+0x4b0>
  806e8c:	d9800e17 	ldw	r6,56(sp)
  806e90:	01bc300e 	bge	zero,r6,805f54 <_dtoa_r+0x578>
  806e94:	0005883a 	mov	r2,zero
  806e98:	00d00934 	movhi	r3,16420
  806e9c:	a80b883a 	mov	r5,r21
  806ea0:	180f883a 	mov	r7,r3
  806ea4:	a009883a 	mov	r4,r20
  806ea8:	100d883a 	mov	r6,r2
  806eac:	080ab200 	call	80ab20 <__muldf3>
  806eb0:	b1000044 	addi	r4,r22,1
  806eb4:	1021883a 	mov	r16,r2
  806eb8:	1823883a 	mov	r17,r3
  806ebc:	080b3e40 	call	80b3e4 <__floatsidf>
  806ec0:	880b883a 	mov	r5,r17
  806ec4:	8009883a 	mov	r4,r16
  806ec8:	180f883a 	mov	r7,r3
  806ecc:	100d883a 	mov	r6,r2
  806ed0:	080ab200 	call	80ab20 <__muldf3>
  806ed4:	0011883a 	mov	r8,zero
  806ed8:	02500734 	movhi	r9,16412
  806edc:	180b883a 	mov	r5,r3
  806ee0:	480f883a 	mov	r7,r9
  806ee4:	1009883a 	mov	r4,r2
  806ee8:	400d883a 	mov	r6,r8
  806eec:	080aaac0 	call	80aaac <__adddf3>
  806ef0:	102d883a 	mov	r22,r2
  806ef4:	00bf3034 	movhi	r2,64704
  806ef8:	10ef883a 	add	r23,r2,r3
  806efc:	d8800d17 	ldw	r2,52(sp)
  806f00:	d8c00e17 	ldw	r3,56(sp)
  806f04:	8029883a 	mov	r20,r16
  806f08:	10bfffc4 	addi	r2,r2,-1
  806f0c:	882b883a 	mov	r21,r17
  806f10:	d8800415 	stw	r2,16(sp)
  806f14:	d8c00315 	stw	r3,12(sp)
  806f18:	003e8306 	br	806928 <_dtoa_r+0xf4c>
  806f1c:	d8800117 	ldw	r2,4(sp)
  806f20:	dc001117 	ldw	r16,68(sp)
  806f24:	dc801017 	ldw	r18,64(sp)
  806f28:	00c00d84 	movi	r3,54
  806f2c:	1887c83a 	sub	r3,r3,r2
  806f30:	003d6906 	br	8064d8 <_dtoa_r+0xafc>
  806f34:	01800044 	movi	r6,1
  806f38:	3021883a 	mov	r16,r6
  806f3c:	d9800f15 	stw	r6,60(sp)
  806f40:	d9802615 	stw	r6,152(sp)
  806f44:	d9800e15 	stw	r6,56(sp)
  806f48:	003b9306 	br	805d98 <_dtoa_r+0x3bc>
  806f4c:	b021883a 	mov	r16,r22
  806f50:	dd800f15 	stw	r22,60(sp)
  806f54:	003b9006 	br	805d98 <_dtoa_r+0x3bc>
  806f58:	103e221e 	bne	r2,zero,8067e4 <_dtoa_r+0xe08>
  806f5c:	b880004c 	andi	r2,r23,1
  806f60:	1005003a 	cmpeq	r2,r2,zero
  806f64:	103e1f1e 	bne	r2,zero,8067e4 <_dtoa_r+0xe08>
  806f68:	003e1b06 	br	8067d8 <_dtoa_r+0xdfc>
  806f6c:	d9001617 	ldw	r4,88(sp)
  806f70:	980b883a 	mov	r5,r19
  806f74:	01800284 	movi	r6,10
  806f78:	000f883a 	mov	r7,zero
  806f7c:	08090440 	call	809044 <__multadd>
  806f80:	d8c00e17 	ldw	r3,56(sp)
  806f84:	1027883a 	mov	r19,r2
  806f88:	d8c00f15 	stw	r3,60(sp)
  806f8c:	003cd306 	br	8062dc <_dtoa_r+0x900>

00806f90 <_fflush_r>:
  806f90:	defffb04 	addi	sp,sp,-20
  806f94:	dcc00315 	stw	r19,12(sp)
  806f98:	dc800215 	stw	r18,8(sp)
  806f9c:	dfc00415 	stw	ra,16(sp)
  806fa0:	dc400115 	stw	r17,4(sp)
  806fa4:	dc000015 	stw	r16,0(sp)
  806fa8:	2027883a 	mov	r19,r4
  806fac:	2825883a 	mov	r18,r5
  806fb0:	20000226 	beq	r4,zero,806fbc <_fflush_r+0x2c>
  806fb4:	20800e17 	ldw	r2,56(r4)
  806fb8:	10005626 	beq	r2,zero,807114 <_fflush_r+0x184>
  806fbc:	9100030b 	ldhu	r4,12(r18)
  806fc0:	20ffffcc 	andi	r3,r4,65535
  806fc4:	18e0001c 	xori	r3,r3,32768
  806fc8:	18e00004 	addi	r3,r3,-32768
  806fcc:	1880020c 	andi	r2,r3,8
  806fd0:	1000261e 	bne	r2,zero,80706c <_fflush_r+0xdc>
  806fd4:	90c00117 	ldw	r3,4(r18)
  806fd8:	20820014 	ori	r2,r4,2048
  806fdc:	9080030d 	sth	r2,12(r18)
  806fe0:	1009883a 	mov	r4,r2
  806fe4:	00c0400e 	bge	zero,r3,8070e8 <_fflush_r+0x158>
  806fe8:	92000a17 	ldw	r8,40(r18)
  806fec:	40004026 	beq	r8,zero,8070f0 <_fflush_r+0x160>
  806ff0:	2084000c 	andi	r2,r4,4096
  806ff4:	10005326 	beq	r2,zero,807144 <_fflush_r+0x1b4>
  806ff8:	94001417 	ldw	r16,80(r18)
  806ffc:	9080030b 	ldhu	r2,12(r18)
  807000:	1080010c 	andi	r2,r2,4
  807004:	1000481e 	bne	r2,zero,807128 <_fflush_r+0x198>
  807008:	91400717 	ldw	r5,28(r18)
  80700c:	9809883a 	mov	r4,r19
  807010:	800d883a 	mov	r6,r16
  807014:	000f883a 	mov	r7,zero
  807018:	403ee83a 	callr	r8
  80701c:	8080261e 	bne	r16,r2,8070b8 <_fflush_r+0x128>
  807020:	9080030b 	ldhu	r2,12(r18)
  807024:	91000417 	ldw	r4,16(r18)
  807028:	90000115 	stw	zero,4(r18)
  80702c:	10bdffcc 	andi	r2,r2,63487
  807030:	10ffffcc 	andi	r3,r2,65535
  807034:	18c4000c 	andi	r3,r3,4096
  807038:	9080030d 	sth	r2,12(r18)
  80703c:	91000015 	stw	r4,0(r18)
  807040:	18002b26 	beq	r3,zero,8070f0 <_fflush_r+0x160>
  807044:	0007883a 	mov	r3,zero
  807048:	1805883a 	mov	r2,r3
  80704c:	94001415 	stw	r16,80(r18)
  807050:	dfc00417 	ldw	ra,16(sp)
  807054:	dcc00317 	ldw	r19,12(sp)
  807058:	dc800217 	ldw	r18,8(sp)
  80705c:	dc400117 	ldw	r17,4(sp)
  807060:	dc000017 	ldw	r16,0(sp)
  807064:	dec00504 	addi	sp,sp,20
  807068:	f800283a 	ret
  80706c:	94400417 	ldw	r17,16(r18)
  807070:	88001f26 	beq	r17,zero,8070f0 <_fflush_r+0x160>
  807074:	90800017 	ldw	r2,0(r18)
  807078:	18c000cc 	andi	r3,r3,3
  80707c:	94400015 	stw	r17,0(r18)
  807080:	1461c83a 	sub	r16,r2,r17
  807084:	18002526 	beq	r3,zero,80711c <_fflush_r+0x18c>
  807088:	0005883a 	mov	r2,zero
  80708c:	90800215 	stw	r2,8(r18)
  807090:	0400170e 	bge	zero,r16,8070f0 <_fflush_r+0x160>
  807094:	90c00917 	ldw	r3,36(r18)
  807098:	91400717 	ldw	r5,28(r18)
  80709c:	880d883a 	mov	r6,r17
  8070a0:	800f883a 	mov	r7,r16
  8070a4:	9809883a 	mov	r4,r19
  8070a8:	183ee83a 	callr	r3
  8070ac:	88a3883a 	add	r17,r17,r2
  8070b0:	80a1c83a 	sub	r16,r16,r2
  8070b4:	00bff616 	blt	zero,r2,807090 <_fflush_r+0x100>
  8070b8:	9080030b 	ldhu	r2,12(r18)
  8070bc:	00ffffc4 	movi	r3,-1
  8070c0:	10801014 	ori	r2,r2,64
  8070c4:	9080030d 	sth	r2,12(r18)
  8070c8:	1805883a 	mov	r2,r3
  8070cc:	dfc00417 	ldw	ra,16(sp)
  8070d0:	dcc00317 	ldw	r19,12(sp)
  8070d4:	dc800217 	ldw	r18,8(sp)
  8070d8:	dc400117 	ldw	r17,4(sp)
  8070dc:	dc000017 	ldw	r16,0(sp)
  8070e0:	dec00504 	addi	sp,sp,20
  8070e4:	f800283a 	ret
  8070e8:	90800f17 	ldw	r2,60(r18)
  8070ec:	00bfbe16 	blt	zero,r2,806fe8 <_fflush_r+0x58>
  8070f0:	0007883a 	mov	r3,zero
  8070f4:	1805883a 	mov	r2,r3
  8070f8:	dfc00417 	ldw	ra,16(sp)
  8070fc:	dcc00317 	ldw	r19,12(sp)
  807100:	dc800217 	ldw	r18,8(sp)
  807104:	dc400117 	ldw	r17,4(sp)
  807108:	dc000017 	ldw	r16,0(sp)
  80710c:	dec00504 	addi	sp,sp,20
  807110:	f800283a 	ret
  807114:	08072280 	call	807228 <__sinit>
  807118:	003fa806 	br	806fbc <_fflush_r+0x2c>
  80711c:	90800517 	ldw	r2,20(r18)
  807120:	90800215 	stw	r2,8(r18)
  807124:	003fda06 	br	807090 <_fflush_r+0x100>
  807128:	90800117 	ldw	r2,4(r18)
  80712c:	90c00c17 	ldw	r3,48(r18)
  807130:	80a1c83a 	sub	r16,r16,r2
  807134:	183fb426 	beq	r3,zero,807008 <_fflush_r+0x78>
  807138:	90800f17 	ldw	r2,60(r18)
  80713c:	80a1c83a 	sub	r16,r16,r2
  807140:	003fb106 	br	807008 <_fflush_r+0x78>
  807144:	91400717 	ldw	r5,28(r18)
  807148:	9809883a 	mov	r4,r19
  80714c:	000d883a 	mov	r6,zero
  807150:	01c00044 	movi	r7,1
  807154:	403ee83a 	callr	r8
  807158:	1021883a 	mov	r16,r2
  80715c:	00bfffc4 	movi	r2,-1
  807160:	80800226 	beq	r16,r2,80716c <_fflush_r+0x1dc>
  807164:	92000a17 	ldw	r8,40(r18)
  807168:	003fa406 	br	806ffc <_fflush_r+0x6c>
  80716c:	98c00017 	ldw	r3,0(r19)
  807170:	00800744 	movi	r2,29
  807174:	18bfde26 	beq	r3,r2,8070f0 <_fflush_r+0x160>
  807178:	9080030b 	ldhu	r2,12(r18)
  80717c:	8007883a 	mov	r3,r16
  807180:	10801014 	ori	r2,r2,64
  807184:	9080030d 	sth	r2,12(r18)
  807188:	003fcf06 	br	8070c8 <_fflush_r+0x138>

0080718c <fflush>:
  80718c:	01402034 	movhi	r5,128
  807190:	295be404 	addi	r5,r5,28560
  807194:	2007883a 	mov	r3,r4
  807198:	20000526 	beq	r4,zero,8071b0 <fflush+0x24>
  80719c:	00802074 	movhi	r2,129
  8071a0:	10880c04 	addi	r2,r2,8240
  8071a4:	11000017 	ldw	r4,0(r2)
  8071a8:	180b883a 	mov	r5,r3
  8071ac:	0806f901 	jmpi	806f90 <_fflush_r>
  8071b0:	00802074 	movhi	r2,129
  8071b4:	10880d04 	addi	r2,r2,8244
  8071b8:	11000017 	ldw	r4,0(r2)
  8071bc:	0807d5c1 	jmpi	807d5c <_fwalk_reent>

008071c0 <std>:
  8071c0:	00802074 	movhi	r2,129
  8071c4:	10a4fd04 	addi	r2,r2,-27660
  8071c8:	20800b15 	stw	r2,44(r4)
  8071cc:	00802074 	movhi	r2,129
  8071d0:	10a53804 	addi	r2,r2,-27424
  8071d4:	20800815 	stw	r2,32(r4)
  8071d8:	00c02074 	movhi	r3,129
  8071dc:	18e51904 	addi	r3,r3,-27548
  8071e0:	00802074 	movhi	r2,129
  8071e4:	10a4ff04 	addi	r2,r2,-27652
  8071e8:	2140030d 	sth	r5,12(r4)
  8071ec:	2180038d 	sth	r6,14(r4)
  8071f0:	20c00915 	stw	r3,36(r4)
  8071f4:	20800a15 	stw	r2,40(r4)
  8071f8:	20000015 	stw	zero,0(r4)
  8071fc:	20000115 	stw	zero,4(r4)
  807200:	20000215 	stw	zero,8(r4)
  807204:	20000415 	stw	zero,16(r4)
  807208:	20000515 	stw	zero,20(r4)
  80720c:	20000615 	stw	zero,24(r4)
  807210:	21000715 	stw	r4,28(r4)
  807214:	f800283a 	ret

00807218 <__sfp_lock_acquire>:
  807218:	f800283a 	ret

0080721c <__sfp_lock_release>:
  80721c:	f800283a 	ret

00807220 <__sinit_lock_acquire>:
  807220:	f800283a 	ret

00807224 <__sinit_lock_release>:
  807224:	f800283a 	ret

00807228 <__sinit>:
  807228:	20800e17 	ldw	r2,56(r4)
  80722c:	defffd04 	addi	sp,sp,-12
  807230:	dc400115 	stw	r17,4(sp)
  807234:	dc000015 	stw	r16,0(sp)
  807238:	dfc00215 	stw	ra,8(sp)
  80723c:	04400044 	movi	r17,1
  807240:	01400104 	movi	r5,4
  807244:	000d883a 	mov	r6,zero
  807248:	2021883a 	mov	r16,r4
  80724c:	2200bb04 	addi	r8,r4,748
  807250:	200f883a 	mov	r7,r4
  807254:	10000526 	beq	r2,zero,80726c <__sinit+0x44>
  807258:	dfc00217 	ldw	ra,8(sp)
  80725c:	dc400117 	ldw	r17,4(sp)
  807260:	dc000017 	ldw	r16,0(sp)
  807264:	dec00304 	addi	sp,sp,12
  807268:	f800283a 	ret
  80726c:	21000117 	ldw	r4,4(r4)
  807270:	00802034 	movhi	r2,128
  807274:	109cc304 	addi	r2,r2,29452
  807278:	00c000c4 	movi	r3,3
  80727c:	80800f15 	stw	r2,60(r16)
  807280:	80c0b915 	stw	r3,740(r16)
  807284:	8200ba15 	stw	r8,744(r16)
  807288:	84400e15 	stw	r17,56(r16)
  80728c:	8000b815 	stw	zero,736(r16)
  807290:	08071c00 	call	8071c0 <std>
  807294:	81000217 	ldw	r4,8(r16)
  807298:	880d883a 	mov	r6,r17
  80729c:	800f883a 	mov	r7,r16
  8072a0:	01400284 	movi	r5,10
  8072a4:	08071c00 	call	8071c0 <std>
  8072a8:	81000317 	ldw	r4,12(r16)
  8072ac:	800f883a 	mov	r7,r16
  8072b0:	01400484 	movi	r5,18
  8072b4:	01800084 	movi	r6,2
  8072b8:	dfc00217 	ldw	ra,8(sp)
  8072bc:	dc400117 	ldw	r17,4(sp)
  8072c0:	dc000017 	ldw	r16,0(sp)
  8072c4:	dec00304 	addi	sp,sp,12
  8072c8:	08071c01 	jmpi	8071c0 <std>

008072cc <__fp_lock>:
  8072cc:	0005883a 	mov	r2,zero
  8072d0:	f800283a 	ret

008072d4 <__fp_unlock>:
  8072d4:	0005883a 	mov	r2,zero
  8072d8:	f800283a 	ret

008072dc <__fp_unlock_all>:
  8072dc:	00802074 	movhi	r2,129
  8072e0:	10880c04 	addi	r2,r2,8240
  8072e4:	11000017 	ldw	r4,0(r2)
  8072e8:	01402034 	movhi	r5,128
  8072ec:	295cb504 	addi	r5,r5,29396
  8072f0:	0807e241 	jmpi	807e24 <_fwalk>

008072f4 <__fp_lock_all>:
  8072f4:	00802074 	movhi	r2,129
  8072f8:	10880c04 	addi	r2,r2,8240
  8072fc:	11000017 	ldw	r4,0(r2)
  807300:	01402034 	movhi	r5,128
  807304:	295cb304 	addi	r5,r5,29388
  807308:	0807e241 	jmpi	807e24 <_fwalk>

0080730c <_cleanup_r>:
  80730c:	01402074 	movhi	r5,129
  807310:	29662a04 	addi	r5,r5,-26456
  807314:	0807e241 	jmpi	807e24 <_fwalk>

00807318 <_cleanup>:
  807318:	00802074 	movhi	r2,129
  80731c:	10880d04 	addi	r2,r2,8244
  807320:	11000017 	ldw	r4,0(r2)
  807324:	080730c1 	jmpi	80730c <_cleanup_r>

00807328 <__sfmoreglue>:
  807328:	defffc04 	addi	sp,sp,-16
  80732c:	dc400115 	stw	r17,4(sp)
  807330:	2c401724 	muli	r17,r5,92
  807334:	dc800215 	stw	r18,8(sp)
  807338:	2825883a 	mov	r18,r5
  80733c:	89400304 	addi	r5,r17,12
  807340:	dc000015 	stw	r16,0(sp)
  807344:	dfc00315 	stw	ra,12(sp)
  807348:	08026a40 	call	8026a4 <_malloc_r>
  80734c:	0021883a 	mov	r16,zero
  807350:	880d883a 	mov	r6,r17
  807354:	000b883a 	mov	r5,zero
  807358:	10000626 	beq	r2,zero,807374 <__sfmoreglue+0x4c>
  80735c:	11000304 	addi	r4,r2,12
  807360:	14800115 	stw	r18,4(r2)
  807364:	10000015 	stw	zero,0(r2)
  807368:	11000215 	stw	r4,8(r2)
  80736c:	1021883a 	mov	r16,r2
  807370:	08082f80 	call	8082f8 <memset>
  807374:	8005883a 	mov	r2,r16
  807378:	dfc00317 	ldw	ra,12(sp)
  80737c:	dc800217 	ldw	r18,8(sp)
  807380:	dc400117 	ldw	r17,4(sp)
  807384:	dc000017 	ldw	r16,0(sp)
  807388:	dec00404 	addi	sp,sp,16
  80738c:	f800283a 	ret

00807390 <__sfp>:
  807390:	defffd04 	addi	sp,sp,-12
  807394:	00802074 	movhi	r2,129
  807398:	10880d04 	addi	r2,r2,8244
  80739c:	dc000015 	stw	r16,0(sp)
  8073a0:	14000017 	ldw	r16,0(r2)
  8073a4:	dc400115 	stw	r17,4(sp)
  8073a8:	dfc00215 	stw	ra,8(sp)
  8073ac:	80800e17 	ldw	r2,56(r16)
  8073b0:	2023883a 	mov	r17,r4
  8073b4:	10002626 	beq	r2,zero,807450 <__sfp+0xc0>
  8073b8:	8400b804 	addi	r16,r16,736
  8073bc:	80800117 	ldw	r2,4(r16)
  8073c0:	81000217 	ldw	r4,8(r16)
  8073c4:	10ffffc4 	addi	r3,r2,-1
  8073c8:	18000916 	blt	r3,zero,8073f0 <__sfp+0x60>
  8073cc:	2080030f 	ldh	r2,12(r4)
  8073d0:	10000b26 	beq	r2,zero,807400 <__sfp+0x70>
  8073d4:	017fffc4 	movi	r5,-1
  8073d8:	00000206 	br	8073e4 <__sfp+0x54>
  8073dc:	2080030f 	ldh	r2,12(r4)
  8073e0:	10000726 	beq	r2,zero,807400 <__sfp+0x70>
  8073e4:	18ffffc4 	addi	r3,r3,-1
  8073e8:	21001704 	addi	r4,r4,92
  8073ec:	197ffb1e 	bne	r3,r5,8073dc <__sfp+0x4c>
  8073f0:	80800017 	ldw	r2,0(r16)
  8073f4:	10001926 	beq	r2,zero,80745c <__sfp+0xcc>
  8073f8:	1021883a 	mov	r16,r2
  8073fc:	003fef06 	br	8073bc <__sfp+0x2c>
  807400:	00bfffc4 	movi	r2,-1
  807404:	00c00044 	movi	r3,1
  807408:	2080038d 	sth	r2,14(r4)
  80740c:	20c0030d 	sth	r3,12(r4)
  807410:	20000015 	stw	zero,0(r4)
  807414:	20000215 	stw	zero,8(r4)
  807418:	20000115 	stw	zero,4(r4)
  80741c:	20000415 	stw	zero,16(r4)
  807420:	20000515 	stw	zero,20(r4)
  807424:	20000615 	stw	zero,24(r4)
  807428:	20000c15 	stw	zero,48(r4)
  80742c:	20000d15 	stw	zero,52(r4)
  807430:	20001115 	stw	zero,68(r4)
  807434:	20001215 	stw	zero,72(r4)
  807438:	2005883a 	mov	r2,r4
  80743c:	dfc00217 	ldw	ra,8(sp)
  807440:	dc400117 	ldw	r17,4(sp)
  807444:	dc000017 	ldw	r16,0(sp)
  807448:	dec00304 	addi	sp,sp,12
  80744c:	f800283a 	ret
  807450:	8009883a 	mov	r4,r16
  807454:	08072280 	call	807228 <__sinit>
  807458:	003fd706 	br	8073b8 <__sfp+0x28>
  80745c:	8809883a 	mov	r4,r17
  807460:	01400104 	movi	r5,4
  807464:	08073280 	call	807328 <__sfmoreglue>
  807468:	80800015 	stw	r2,0(r16)
  80746c:	103fe21e 	bne	r2,zero,8073f8 <__sfp+0x68>
  807470:	00800304 	movi	r2,12
  807474:	0009883a 	mov	r4,zero
  807478:	88800015 	stw	r2,0(r17)
  80747c:	003fee06 	br	807438 <__sfp+0xa8>

00807480 <_malloc_trim_r>:
  807480:	defffb04 	addi	sp,sp,-20
  807484:	dcc00315 	stw	r19,12(sp)
  807488:	04c02074 	movhi	r19,129
  80748c:	9cc11504 	addi	r19,r19,1108
  807490:	dc800215 	stw	r18,8(sp)
  807494:	dc400115 	stw	r17,4(sp)
  807498:	dc000015 	stw	r16,0(sp)
  80749c:	2823883a 	mov	r17,r5
  8074a0:	2025883a 	mov	r18,r4
  8074a4:	dfc00415 	stw	ra,16(sp)
  8074a8:	080c54c0 	call	80c54c <__malloc_lock>
  8074ac:	98800217 	ldw	r2,8(r19)
  8074b0:	9009883a 	mov	r4,r18
  8074b4:	000b883a 	mov	r5,zero
  8074b8:	10c00117 	ldw	r3,4(r2)
  8074bc:	00bfff04 	movi	r2,-4
  8074c0:	18a0703a 	and	r16,r3,r2
  8074c4:	8463c83a 	sub	r17,r16,r17
  8074c8:	8c43fbc4 	addi	r17,r17,4079
  8074cc:	8822d33a 	srli	r17,r17,12
  8074d0:	0083ffc4 	movi	r2,4095
  8074d4:	8c7fffc4 	addi	r17,r17,-1
  8074d8:	8822933a 	slli	r17,r17,12
  8074dc:	1440060e 	bge	r2,r17,8074f8 <_malloc_trim_r+0x78>
  8074e0:	08035c00 	call	8035c0 <_sbrk_r>
  8074e4:	98c00217 	ldw	r3,8(r19)
  8074e8:	9009883a 	mov	r4,r18
  8074ec:	044bc83a 	sub	r5,zero,r17
  8074f0:	80c7883a 	add	r3,r16,r3
  8074f4:	10c00926 	beq	r2,r3,80751c <_malloc_trim_r+0x9c>
  8074f8:	080c56c0 	call	80c56c <__malloc_unlock>
  8074fc:	0005883a 	mov	r2,zero
  807500:	dfc00417 	ldw	ra,16(sp)
  807504:	dcc00317 	ldw	r19,12(sp)
  807508:	dc800217 	ldw	r18,8(sp)
  80750c:	dc400117 	ldw	r17,4(sp)
  807510:	dc000017 	ldw	r16,0(sp)
  807514:	dec00504 	addi	sp,sp,20
  807518:	f800283a 	ret
  80751c:	9009883a 	mov	r4,r18
  807520:	08035c00 	call	8035c0 <_sbrk_r>
  807524:	844dc83a 	sub	r6,r16,r17
  807528:	00ffffc4 	movi	r3,-1
  80752c:	9009883a 	mov	r4,r18
  807530:	000b883a 	mov	r5,zero
  807534:	01c02074 	movhi	r7,129
  807538:	39cf3104 	addi	r7,r7,15556
  80753c:	31800054 	ori	r6,r6,1
  807540:	10c00926 	beq	r2,r3,807568 <_malloc_trim_r+0xe8>
  807544:	38800017 	ldw	r2,0(r7)
  807548:	98c00217 	ldw	r3,8(r19)
  80754c:	9009883a 	mov	r4,r18
  807550:	1445c83a 	sub	r2,r2,r17
  807554:	38800015 	stw	r2,0(r7)
  807558:	19800115 	stw	r6,4(r3)
  80755c:	080c56c0 	call	80c56c <__malloc_unlock>
  807560:	00800044 	movi	r2,1
  807564:	003fe606 	br	807500 <_malloc_trim_r+0x80>
  807568:	08035c00 	call	8035c0 <_sbrk_r>
  80756c:	99800217 	ldw	r6,8(r19)
  807570:	100f883a 	mov	r7,r2
  807574:	9009883a 	mov	r4,r18
  807578:	1187c83a 	sub	r3,r2,r6
  80757c:	008003c4 	movi	r2,15
  807580:	19400054 	ori	r5,r3,1
  807584:	10ffdc0e 	bge	r2,r3,8074f8 <_malloc_trim_r+0x78>
  807588:	00802074 	movhi	r2,129
  80758c:	10880b04 	addi	r2,r2,8236
  807590:	10c00017 	ldw	r3,0(r2)
  807594:	00802074 	movhi	r2,129
  807598:	108f3104 	addi	r2,r2,15556
  80759c:	31400115 	stw	r5,4(r6)
  8075a0:	38c7c83a 	sub	r3,r7,r3
  8075a4:	10c00015 	stw	r3,0(r2)
  8075a8:	003fd306 	br	8074f8 <_malloc_trim_r+0x78>

008075ac <_free_r>:
  8075ac:	defffd04 	addi	sp,sp,-12
  8075b0:	dc400115 	stw	r17,4(sp)
  8075b4:	dc000015 	stw	r16,0(sp)
  8075b8:	dfc00215 	stw	ra,8(sp)
  8075bc:	2821883a 	mov	r16,r5
  8075c0:	2023883a 	mov	r17,r4
  8075c4:	28005a26 	beq	r5,zero,807730 <_free_r+0x184>
  8075c8:	080c54c0 	call	80c54c <__malloc_lock>
  8075cc:	823ffe04 	addi	r8,r16,-8
  8075d0:	41400117 	ldw	r5,4(r8)
  8075d4:	00bfff84 	movi	r2,-2
  8075d8:	02802074 	movhi	r10,129
  8075dc:	52811504 	addi	r10,r10,1108
  8075e0:	288e703a 	and	r7,r5,r2
  8075e4:	41cd883a 	add	r6,r8,r7
  8075e8:	30c00117 	ldw	r3,4(r6)
  8075ec:	51000217 	ldw	r4,8(r10)
  8075f0:	00bfff04 	movi	r2,-4
  8075f4:	1892703a 	and	r9,r3,r2
  8075f8:	5017883a 	mov	r11,r10
  8075fc:	31006726 	beq	r6,r4,80779c <_free_r+0x1f0>
  807600:	2880004c 	andi	r2,r5,1
  807604:	1005003a 	cmpeq	r2,r2,zero
  807608:	32400115 	stw	r9,4(r6)
  80760c:	10001a1e 	bne	r2,zero,807678 <_free_r+0xcc>
  807610:	000b883a 	mov	r5,zero
  807614:	3247883a 	add	r3,r6,r9
  807618:	18800117 	ldw	r2,4(r3)
  80761c:	1080004c 	andi	r2,r2,1
  807620:	1000231e 	bne	r2,zero,8076b0 <_free_r+0x104>
  807624:	280ac03a 	cmpne	r5,r5,zero
  807628:	3a4f883a 	add	r7,r7,r9
  80762c:	2800451e 	bne	r5,zero,807744 <_free_r+0x198>
  807630:	31000217 	ldw	r4,8(r6)
  807634:	00802074 	movhi	r2,129
  807638:	10811704 	addi	r2,r2,1116
  80763c:	20807b26 	beq	r4,r2,80782c <_free_r+0x280>
  807640:	30800317 	ldw	r2,12(r6)
  807644:	3a07883a 	add	r3,r7,r8
  807648:	19c00015 	stw	r7,0(r3)
  80764c:	11000215 	stw	r4,8(r2)
  807650:	20800315 	stw	r2,12(r4)
  807654:	38800054 	ori	r2,r7,1
  807658:	40800115 	stw	r2,4(r8)
  80765c:	28001a26 	beq	r5,zero,8076c8 <_free_r+0x11c>
  807660:	8809883a 	mov	r4,r17
  807664:	dfc00217 	ldw	ra,8(sp)
  807668:	dc400117 	ldw	r17,4(sp)
  80766c:	dc000017 	ldw	r16,0(sp)
  807670:	dec00304 	addi	sp,sp,12
  807674:	080c56c1 	jmpi	80c56c <__malloc_unlock>
  807678:	80bffe17 	ldw	r2,-8(r16)
  80767c:	50c00204 	addi	r3,r10,8
  807680:	4091c83a 	sub	r8,r8,r2
  807684:	41000217 	ldw	r4,8(r8)
  807688:	388f883a 	add	r7,r7,r2
  80768c:	20c06126 	beq	r4,r3,807814 <_free_r+0x268>
  807690:	40800317 	ldw	r2,12(r8)
  807694:	3247883a 	add	r3,r6,r9
  807698:	000b883a 	mov	r5,zero
  80769c:	11000215 	stw	r4,8(r2)
  8076a0:	20800315 	stw	r2,12(r4)
  8076a4:	18800117 	ldw	r2,4(r3)
  8076a8:	1080004c 	andi	r2,r2,1
  8076ac:	103fdd26 	beq	r2,zero,807624 <_free_r+0x78>
  8076b0:	38800054 	ori	r2,r7,1
  8076b4:	3a07883a 	add	r3,r7,r8
  8076b8:	280ac03a 	cmpne	r5,r5,zero
  8076bc:	40800115 	stw	r2,4(r8)
  8076c0:	19c00015 	stw	r7,0(r3)
  8076c4:	283fe61e 	bne	r5,zero,807660 <_free_r+0xb4>
  8076c8:	00807fc4 	movi	r2,511
  8076cc:	11c01f2e 	bgeu	r2,r7,80774c <_free_r+0x1a0>
  8076d0:	3806d27a 	srli	r3,r7,9
  8076d4:	1800481e 	bne	r3,zero,8077f8 <_free_r+0x24c>
  8076d8:	3804d0fa 	srli	r2,r7,3
  8076dc:	100690fa 	slli	r3,r2,3
  8076e0:	1acd883a 	add	r6,r3,r11
  8076e4:	31400217 	ldw	r5,8(r6)
  8076e8:	31405926 	beq	r6,r5,807850 <_free_r+0x2a4>
  8076ec:	28800117 	ldw	r2,4(r5)
  8076f0:	00ffff04 	movi	r3,-4
  8076f4:	10c4703a 	and	r2,r2,r3
  8076f8:	3880022e 	bgeu	r7,r2,807704 <_free_r+0x158>
  8076fc:	29400217 	ldw	r5,8(r5)
  807700:	317ffa1e 	bne	r6,r5,8076ec <_free_r+0x140>
  807704:	29800317 	ldw	r6,12(r5)
  807708:	41800315 	stw	r6,12(r8)
  80770c:	41400215 	stw	r5,8(r8)
  807710:	8809883a 	mov	r4,r17
  807714:	2a000315 	stw	r8,12(r5)
  807718:	32000215 	stw	r8,8(r6)
  80771c:	dfc00217 	ldw	ra,8(sp)
  807720:	dc400117 	ldw	r17,4(sp)
  807724:	dc000017 	ldw	r16,0(sp)
  807728:	dec00304 	addi	sp,sp,12
  80772c:	080c56c1 	jmpi	80c56c <__malloc_unlock>
  807730:	dfc00217 	ldw	ra,8(sp)
  807734:	dc400117 	ldw	r17,4(sp)
  807738:	dc000017 	ldw	r16,0(sp)
  80773c:	dec00304 	addi	sp,sp,12
  807740:	f800283a 	ret
  807744:	31000217 	ldw	r4,8(r6)
  807748:	003fbd06 	br	807640 <_free_r+0x94>
  80774c:	3806d0fa 	srli	r3,r7,3
  807750:	00800044 	movi	r2,1
  807754:	51400117 	ldw	r5,4(r10)
  807758:	180890fa 	slli	r4,r3,3
  80775c:	1807d0ba 	srai	r3,r3,2
  807760:	22c9883a 	add	r4,r4,r11
  807764:	21800217 	ldw	r6,8(r4)
  807768:	10c4983a 	sll	r2,r2,r3
  80776c:	41000315 	stw	r4,12(r8)
  807770:	41800215 	stw	r6,8(r8)
  807774:	288ab03a 	or	r5,r5,r2
  807778:	22000215 	stw	r8,8(r4)
  80777c:	8809883a 	mov	r4,r17
  807780:	51400115 	stw	r5,4(r10)
  807784:	32000315 	stw	r8,12(r6)
  807788:	dfc00217 	ldw	ra,8(sp)
  80778c:	dc400117 	ldw	r17,4(sp)
  807790:	dc000017 	ldw	r16,0(sp)
  807794:	dec00304 	addi	sp,sp,12
  807798:	080c56c1 	jmpi	80c56c <__malloc_unlock>
  80779c:	2880004c 	andi	r2,r5,1
  8077a0:	3a4d883a 	add	r6,r7,r9
  8077a4:	1000071e 	bne	r2,zero,8077c4 <_free_r+0x218>
  8077a8:	80bffe17 	ldw	r2,-8(r16)
  8077ac:	4091c83a 	sub	r8,r8,r2
  8077b0:	41000317 	ldw	r4,12(r8)
  8077b4:	40c00217 	ldw	r3,8(r8)
  8077b8:	308d883a 	add	r6,r6,r2
  8077bc:	20c00215 	stw	r3,8(r4)
  8077c0:	19000315 	stw	r4,12(r3)
  8077c4:	00802074 	movhi	r2,129
  8077c8:	10880a04 	addi	r2,r2,8232
  8077cc:	11000017 	ldw	r4,0(r2)
  8077d0:	30c00054 	ori	r3,r6,1
  8077d4:	52000215 	stw	r8,8(r10)
  8077d8:	40c00115 	stw	r3,4(r8)
  8077dc:	313fa036 	bltu	r6,r4,807660 <_free_r+0xb4>
  8077e0:	00802074 	movhi	r2,129
  8077e4:	108f2204 	addi	r2,r2,15496
  8077e8:	11400017 	ldw	r5,0(r2)
  8077ec:	8809883a 	mov	r4,r17
  8077f0:	08074800 	call	807480 <_malloc_trim_r>
  8077f4:	003f9a06 	br	807660 <_free_r+0xb4>
  8077f8:	00800104 	movi	r2,4
  8077fc:	10c0072e 	bgeu	r2,r3,80781c <_free_r+0x270>
  807800:	00800504 	movi	r2,20
  807804:	10c01936 	bltu	r2,r3,80786c <_free_r+0x2c0>
  807808:	188016c4 	addi	r2,r3,91
  80780c:	100690fa 	slli	r3,r2,3
  807810:	003fb306 	br	8076e0 <_free_r+0x134>
  807814:	01400044 	movi	r5,1
  807818:	003f7e06 	br	807614 <_free_r+0x68>
  80781c:	3804d1ba 	srli	r2,r7,6
  807820:	10800e04 	addi	r2,r2,56
  807824:	100690fa 	slli	r3,r2,3
  807828:	003fad06 	br	8076e0 <_free_r+0x134>
  80782c:	22000315 	stw	r8,12(r4)
  807830:	22000215 	stw	r8,8(r4)
  807834:	3a05883a 	add	r2,r7,r8
  807838:	38c00054 	ori	r3,r7,1
  80783c:	11c00015 	stw	r7,0(r2)
  807840:	41000215 	stw	r4,8(r8)
  807844:	40c00115 	stw	r3,4(r8)
  807848:	41000315 	stw	r4,12(r8)
  80784c:	003f8406 	br	807660 <_free_r+0xb4>
  807850:	1005d0ba 	srai	r2,r2,2
  807854:	00c00044 	movi	r3,1
  807858:	51000117 	ldw	r4,4(r10)
  80785c:	1886983a 	sll	r3,r3,r2
  807860:	20c8b03a 	or	r4,r4,r3
  807864:	51000115 	stw	r4,4(r10)
  807868:	003fa706 	br	807708 <_free_r+0x15c>
  80786c:	00801504 	movi	r2,84
  807870:	10c00436 	bltu	r2,r3,807884 <_free_r+0x2d8>
  807874:	3804d33a 	srli	r2,r7,12
  807878:	10801b84 	addi	r2,r2,110
  80787c:	100690fa 	slli	r3,r2,3
  807880:	003f9706 	br	8076e0 <_free_r+0x134>
  807884:	00805504 	movi	r2,340
  807888:	10c00436 	bltu	r2,r3,80789c <_free_r+0x2f0>
  80788c:	3804d3fa 	srli	r2,r7,15
  807890:	10801dc4 	addi	r2,r2,119
  807894:	100690fa 	slli	r3,r2,3
  807898:	003f9106 	br	8076e0 <_free_r+0x134>
  80789c:	00815504 	movi	r2,1364
  8078a0:	10c0032e 	bgeu	r2,r3,8078b0 <_free_r+0x304>
  8078a4:	00801f84 	movi	r2,126
  8078a8:	00c0fc04 	movi	r3,1008
  8078ac:	003f8c06 	br	8076e0 <_free_r+0x134>
  8078b0:	3804d4ba 	srli	r2,r7,18
  8078b4:	10801f04 	addi	r2,r2,124
  8078b8:	100690fa 	slli	r3,r2,3
  8078bc:	003f8806 	br	8076e0 <_free_r+0x134>

008078c0 <__sfvwrite_r>:
  8078c0:	30800217 	ldw	r2,8(r6)
  8078c4:	defff504 	addi	sp,sp,-44
  8078c8:	df000915 	stw	fp,36(sp)
  8078cc:	dd800715 	stw	r22,28(sp)
  8078d0:	dc800315 	stw	r18,12(sp)
  8078d4:	dfc00a15 	stw	ra,40(sp)
  8078d8:	ddc00815 	stw	r23,32(sp)
  8078dc:	dd400615 	stw	r21,24(sp)
  8078e0:	dd000515 	stw	r20,20(sp)
  8078e4:	dcc00415 	stw	r19,16(sp)
  8078e8:	dc400215 	stw	r17,8(sp)
  8078ec:	dc000115 	stw	r16,4(sp)
  8078f0:	302d883a 	mov	r22,r6
  8078f4:	2039883a 	mov	fp,r4
  8078f8:	2825883a 	mov	r18,r5
  8078fc:	10001c26 	beq	r2,zero,807970 <__sfvwrite_r+0xb0>
  807900:	29c0030b 	ldhu	r7,12(r5)
  807904:	3880020c 	andi	r2,r7,8
  807908:	10002726 	beq	r2,zero,8079a8 <__sfvwrite_r+0xe8>
  80790c:	28800417 	ldw	r2,16(r5)
  807910:	10002526 	beq	r2,zero,8079a8 <__sfvwrite_r+0xe8>
  807914:	3880008c 	andi	r2,r7,2
  807918:	b5400017 	ldw	r21,0(r22)
  80791c:	10002826 	beq	r2,zero,8079c0 <__sfvwrite_r+0x100>
  807920:	0021883a 	mov	r16,zero
  807924:	0023883a 	mov	r17,zero
  807928:	880d883a 	mov	r6,r17
  80792c:	e009883a 	mov	r4,fp
  807930:	00810004 	movi	r2,1024
  807934:	80006e26 	beq	r16,zero,807af0 <__sfvwrite_r+0x230>
  807938:	800f883a 	mov	r7,r16
  80793c:	91400717 	ldw	r5,28(r18)
  807940:	1400012e 	bgeu	r2,r16,807948 <__sfvwrite_r+0x88>
  807944:	100f883a 	mov	r7,r2
  807948:	90c00917 	ldw	r3,36(r18)
  80794c:	183ee83a 	callr	r3
  807950:	1007883a 	mov	r3,r2
  807954:	80a1c83a 	sub	r16,r16,r2
  807958:	88a3883a 	add	r17,r17,r2
  80795c:	00806d0e 	bge	zero,r2,807b14 <__sfvwrite_r+0x254>
  807960:	b0800217 	ldw	r2,8(r22)
  807964:	10c5c83a 	sub	r2,r2,r3
  807968:	b0800215 	stw	r2,8(r22)
  80796c:	103fee1e 	bne	r2,zero,807928 <__sfvwrite_r+0x68>
  807970:	0009883a 	mov	r4,zero
  807974:	2005883a 	mov	r2,r4
  807978:	dfc00a17 	ldw	ra,40(sp)
  80797c:	df000917 	ldw	fp,36(sp)
  807980:	ddc00817 	ldw	r23,32(sp)
  807984:	dd800717 	ldw	r22,28(sp)
  807988:	dd400617 	ldw	r21,24(sp)
  80798c:	dd000517 	ldw	r20,20(sp)
  807990:	dcc00417 	ldw	r19,16(sp)
  807994:	dc800317 	ldw	r18,12(sp)
  807998:	dc400217 	ldw	r17,8(sp)
  80799c:	dc000117 	ldw	r16,4(sp)
  8079a0:	dec00b04 	addi	sp,sp,44
  8079a4:	f800283a 	ret
  8079a8:	08056880 	call	805688 <__swsetup_r>
  8079ac:	1000e41e 	bne	r2,zero,807d40 <__sfvwrite_r+0x480>
  8079b0:	91c0030b 	ldhu	r7,12(r18)
  8079b4:	b5400017 	ldw	r21,0(r22)
  8079b8:	3880008c 	andi	r2,r7,2
  8079bc:	103fd81e 	bne	r2,zero,807920 <__sfvwrite_r+0x60>
  8079c0:	3880004c 	andi	r2,r7,1
  8079c4:	1005003a 	cmpeq	r2,r2,zero
  8079c8:	10005726 	beq	r2,zero,807b28 <__sfvwrite_r+0x268>
  8079cc:	0029883a 	mov	r20,zero
  8079d0:	002f883a 	mov	r23,zero
  8079d4:	a0004226 	beq	r20,zero,807ae0 <__sfvwrite_r+0x220>
  8079d8:	3880800c 	andi	r2,r7,512
  8079dc:	94000217 	ldw	r16,8(r18)
  8079e0:	10008b26 	beq	r2,zero,807c10 <__sfvwrite_r+0x350>
  8079e4:	800d883a 	mov	r6,r16
  8079e8:	a400a536 	bltu	r20,r16,807c80 <__sfvwrite_r+0x3c0>
  8079ec:	3881200c 	andi	r2,r7,1152
  8079f0:	10002726 	beq	r2,zero,807a90 <__sfvwrite_r+0x1d0>
  8079f4:	90800517 	ldw	r2,20(r18)
  8079f8:	92000417 	ldw	r8,16(r18)
  8079fc:	91400017 	ldw	r5,0(r18)
  807a00:	1087883a 	add	r3,r2,r2
  807a04:	1887883a 	add	r3,r3,r2
  807a08:	1808d7fa 	srli	r4,r3,31
  807a0c:	2a21c83a 	sub	r16,r5,r8
  807a10:	80800044 	addi	r2,r16,1
  807a14:	20c9883a 	add	r4,r4,r3
  807a18:	2027d07a 	srai	r19,r4,1
  807a1c:	a085883a 	add	r2,r20,r2
  807a20:	980d883a 	mov	r6,r19
  807a24:	9880022e 	bgeu	r19,r2,807a30 <__sfvwrite_r+0x170>
  807a28:	1027883a 	mov	r19,r2
  807a2c:	100d883a 	mov	r6,r2
  807a30:	3881000c 	andi	r2,r7,1024
  807a34:	1000b826 	beq	r2,zero,807d18 <__sfvwrite_r+0x458>
  807a38:	300b883a 	mov	r5,r6
  807a3c:	e009883a 	mov	r4,fp
  807a40:	08026a40 	call	8026a4 <_malloc_r>
  807a44:	10003126 	beq	r2,zero,807b0c <__sfvwrite_r+0x24c>
  807a48:	91400417 	ldw	r5,16(r18)
  807a4c:	1009883a 	mov	r4,r2
  807a50:	800d883a 	mov	r6,r16
  807a54:	1023883a 	mov	r17,r2
  807a58:	0802de40 	call	802de4 <memcpy>
  807a5c:	90c0030b 	ldhu	r3,12(r18)
  807a60:	00beffc4 	movi	r2,-1025
  807a64:	1886703a 	and	r3,r3,r2
  807a68:	18c02014 	ori	r3,r3,128
  807a6c:	90c0030d 	sth	r3,12(r18)
  807a70:	9c07c83a 	sub	r3,r19,r16
  807a74:	8c05883a 	add	r2,r17,r16
  807a78:	a00d883a 	mov	r6,r20
  807a7c:	a021883a 	mov	r16,r20
  807a80:	90800015 	stw	r2,0(r18)
  807a84:	90c00215 	stw	r3,8(r18)
  807a88:	94400415 	stw	r17,16(r18)
  807a8c:	94c00515 	stw	r19,20(r18)
  807a90:	91000017 	ldw	r4,0(r18)
  807a94:	b80b883a 	mov	r5,r23
  807a98:	a023883a 	mov	r17,r20
  807a9c:	08082180 	call	808218 <memmove>
  807aa0:	90c00217 	ldw	r3,8(r18)
  807aa4:	90800017 	ldw	r2,0(r18)
  807aa8:	a027883a 	mov	r19,r20
  807aac:	1c07c83a 	sub	r3,r3,r16
  807ab0:	1405883a 	add	r2,r2,r16
  807ab4:	90c00215 	stw	r3,8(r18)
  807ab8:	a021883a 	mov	r16,r20
  807abc:	90800015 	stw	r2,0(r18)
  807ac0:	b0800217 	ldw	r2,8(r22)
  807ac4:	1405c83a 	sub	r2,r2,r16
  807ac8:	b0800215 	stw	r2,8(r22)
  807acc:	103fa826 	beq	r2,zero,807970 <__sfvwrite_r+0xb0>
  807ad0:	a469c83a 	sub	r20,r20,r17
  807ad4:	91c0030b 	ldhu	r7,12(r18)
  807ad8:	bcef883a 	add	r23,r23,r19
  807adc:	a03fbe1e 	bne	r20,zero,8079d8 <__sfvwrite_r+0x118>
  807ae0:	adc00017 	ldw	r23,0(r21)
  807ae4:	ad000117 	ldw	r20,4(r21)
  807ae8:	ad400204 	addi	r21,r21,8
  807aec:	003fb906 	br	8079d4 <__sfvwrite_r+0x114>
  807af0:	ac400017 	ldw	r17,0(r21)
  807af4:	ac000117 	ldw	r16,4(r21)
  807af8:	ad400204 	addi	r21,r21,8
  807afc:	003f8a06 	br	807928 <__sfvwrite_r+0x68>
  807b00:	91400417 	ldw	r5,16(r18)
  807b04:	e009883a 	mov	r4,fp
  807b08:	08075ac0 	call	8075ac <_free_r>
  807b0c:	00800304 	movi	r2,12
  807b10:	e0800015 	stw	r2,0(fp)
  807b14:	9080030b 	ldhu	r2,12(r18)
  807b18:	013fffc4 	movi	r4,-1
  807b1c:	10801014 	ori	r2,r2,64
  807b20:	9080030d 	sth	r2,12(r18)
  807b24:	003f9306 	br	807974 <__sfvwrite_r+0xb4>
  807b28:	0027883a 	mov	r19,zero
  807b2c:	002f883a 	mov	r23,zero
  807b30:	d8000015 	stw	zero,0(sp)
  807b34:	0029883a 	mov	r20,zero
  807b38:	98001e26 	beq	r19,zero,807bb4 <__sfvwrite_r+0x2f4>
  807b3c:	d8c00017 	ldw	r3,0(sp)
  807b40:	1804c03a 	cmpne	r2,r3,zero
  807b44:	10005e26 	beq	r2,zero,807cc0 <__sfvwrite_r+0x400>
  807b48:	9821883a 	mov	r16,r19
  807b4c:	a4c0012e 	bgeu	r20,r19,807b54 <__sfvwrite_r+0x294>
  807b50:	a021883a 	mov	r16,r20
  807b54:	91000017 	ldw	r4,0(r18)
  807b58:	90800417 	ldw	r2,16(r18)
  807b5c:	91800217 	ldw	r6,8(r18)
  807b60:	91c00517 	ldw	r7,20(r18)
  807b64:	1100022e 	bgeu	r2,r4,807b70 <__sfvwrite_r+0x2b0>
  807b68:	31e3883a 	add	r17,r6,r7
  807b6c:	8c001616 	blt	r17,r16,807bc8 <__sfvwrite_r+0x308>
  807b70:	81c03816 	blt	r16,r7,807c54 <__sfvwrite_r+0x394>
  807b74:	90c00917 	ldw	r3,36(r18)
  807b78:	91400717 	ldw	r5,28(r18)
  807b7c:	e009883a 	mov	r4,fp
  807b80:	b80d883a 	mov	r6,r23
  807b84:	183ee83a 	callr	r3
  807b88:	1023883a 	mov	r17,r2
  807b8c:	00bfe10e 	bge	zero,r2,807b14 <__sfvwrite_r+0x254>
  807b90:	a469c83a 	sub	r20,r20,r17
  807b94:	a0001826 	beq	r20,zero,807bf8 <__sfvwrite_r+0x338>
  807b98:	b0800217 	ldw	r2,8(r22)
  807b9c:	1445c83a 	sub	r2,r2,r17
  807ba0:	b0800215 	stw	r2,8(r22)
  807ba4:	103f7226 	beq	r2,zero,807970 <__sfvwrite_r+0xb0>
  807ba8:	9c67c83a 	sub	r19,r19,r17
  807bac:	bc6f883a 	add	r23,r23,r17
  807bb0:	983fe21e 	bne	r19,zero,807b3c <__sfvwrite_r+0x27c>
  807bb4:	adc00017 	ldw	r23,0(r21)
  807bb8:	acc00117 	ldw	r19,4(r21)
  807bbc:	ad400204 	addi	r21,r21,8
  807bc0:	d8000015 	stw	zero,0(sp)
  807bc4:	003fdc06 	br	807b38 <__sfvwrite_r+0x278>
  807bc8:	b80b883a 	mov	r5,r23
  807bcc:	880d883a 	mov	r6,r17
  807bd0:	08082180 	call	808218 <memmove>
  807bd4:	90c00017 	ldw	r3,0(r18)
  807bd8:	e009883a 	mov	r4,fp
  807bdc:	900b883a 	mov	r5,r18
  807be0:	1c47883a 	add	r3,r3,r17
  807be4:	90c00015 	stw	r3,0(r18)
  807be8:	0806f900 	call	806f90 <_fflush_r>
  807bec:	103fc91e 	bne	r2,zero,807b14 <__sfvwrite_r+0x254>
  807bf0:	a469c83a 	sub	r20,r20,r17
  807bf4:	a03fe81e 	bne	r20,zero,807b98 <__sfvwrite_r+0x2d8>
  807bf8:	e009883a 	mov	r4,fp
  807bfc:	900b883a 	mov	r5,r18
  807c00:	0806f900 	call	806f90 <_fflush_r>
  807c04:	103fc31e 	bne	r2,zero,807b14 <__sfvwrite_r+0x254>
  807c08:	d8000015 	stw	zero,0(sp)
  807c0c:	003fe206 	br	807b98 <__sfvwrite_r+0x2d8>
  807c10:	91000017 	ldw	r4,0(r18)
  807c14:	90800417 	ldw	r2,16(r18)
  807c18:	1100022e 	bgeu	r2,r4,807c24 <__sfvwrite_r+0x364>
  807c1c:	8023883a 	mov	r17,r16
  807c20:	85003136 	bltu	r16,r20,807ce8 <__sfvwrite_r+0x428>
  807c24:	91c00517 	ldw	r7,20(r18)
  807c28:	a1c01836 	bltu	r20,r7,807c8c <__sfvwrite_r+0x3cc>
  807c2c:	90c00917 	ldw	r3,36(r18)
  807c30:	91400717 	ldw	r5,28(r18)
  807c34:	e009883a 	mov	r4,fp
  807c38:	b80d883a 	mov	r6,r23
  807c3c:	183ee83a 	callr	r3
  807c40:	1021883a 	mov	r16,r2
  807c44:	00bfb30e 	bge	zero,r2,807b14 <__sfvwrite_r+0x254>
  807c48:	1023883a 	mov	r17,r2
  807c4c:	1027883a 	mov	r19,r2
  807c50:	003f9b06 	br	807ac0 <__sfvwrite_r+0x200>
  807c54:	b80b883a 	mov	r5,r23
  807c58:	800d883a 	mov	r6,r16
  807c5c:	08082180 	call	808218 <memmove>
  807c60:	90c00217 	ldw	r3,8(r18)
  807c64:	90800017 	ldw	r2,0(r18)
  807c68:	8023883a 	mov	r17,r16
  807c6c:	1c07c83a 	sub	r3,r3,r16
  807c70:	1405883a 	add	r2,r2,r16
  807c74:	90c00215 	stw	r3,8(r18)
  807c78:	90800015 	stw	r2,0(r18)
  807c7c:	003fc406 	br	807b90 <__sfvwrite_r+0x2d0>
  807c80:	a00d883a 	mov	r6,r20
  807c84:	a021883a 	mov	r16,r20
  807c88:	003f8106 	br	807a90 <__sfvwrite_r+0x1d0>
  807c8c:	b80b883a 	mov	r5,r23
  807c90:	a00d883a 	mov	r6,r20
  807c94:	08082180 	call	808218 <memmove>
  807c98:	90c00217 	ldw	r3,8(r18)
  807c9c:	90800017 	ldw	r2,0(r18)
  807ca0:	a021883a 	mov	r16,r20
  807ca4:	1d07c83a 	sub	r3,r3,r20
  807ca8:	1505883a 	add	r2,r2,r20
  807cac:	a023883a 	mov	r17,r20
  807cb0:	a027883a 	mov	r19,r20
  807cb4:	90c00215 	stw	r3,8(r18)
  807cb8:	90800015 	stw	r2,0(r18)
  807cbc:	003f8006 	br	807ac0 <__sfvwrite_r+0x200>
  807cc0:	b809883a 	mov	r4,r23
  807cc4:	01400284 	movi	r5,10
  807cc8:	980d883a 	mov	r6,r19
  807ccc:	08081340 	call	808134 <memchr>
  807cd0:	10001726 	beq	r2,zero,807d30 <__sfvwrite_r+0x470>
  807cd4:	15c5c83a 	sub	r2,r2,r23
  807cd8:	15000044 	addi	r20,r2,1
  807cdc:	00800044 	movi	r2,1
  807ce0:	d8800015 	stw	r2,0(sp)
  807ce4:	003f9806 	br	807b48 <__sfvwrite_r+0x288>
  807ce8:	b80b883a 	mov	r5,r23
  807cec:	800d883a 	mov	r6,r16
  807cf0:	08082180 	call	808218 <memmove>
  807cf4:	90c00017 	ldw	r3,0(r18)
  807cf8:	e009883a 	mov	r4,fp
  807cfc:	900b883a 	mov	r5,r18
  807d00:	1c07883a 	add	r3,r3,r16
  807d04:	90c00015 	stw	r3,0(r18)
  807d08:	8027883a 	mov	r19,r16
  807d0c:	0806f900 	call	806f90 <_fflush_r>
  807d10:	103f6b26 	beq	r2,zero,807ac0 <__sfvwrite_r+0x200>
  807d14:	003f7f06 	br	807b14 <__sfvwrite_r+0x254>
  807d18:	400b883a 	mov	r5,r8
  807d1c:	e009883a 	mov	r4,fp
  807d20:	0802fcc0 	call	802fcc <_realloc_r>
  807d24:	103f7626 	beq	r2,zero,807b00 <__sfvwrite_r+0x240>
  807d28:	1023883a 	mov	r17,r2
  807d2c:	003f5006 	br	807a70 <__sfvwrite_r+0x1b0>
  807d30:	00c00044 	movi	r3,1
  807d34:	9d000044 	addi	r20,r19,1
  807d38:	d8c00015 	stw	r3,0(sp)
  807d3c:	003f8206 	br	807b48 <__sfvwrite_r+0x288>
  807d40:	9080030b 	ldhu	r2,12(r18)
  807d44:	00c00244 	movi	r3,9
  807d48:	013fffc4 	movi	r4,-1
  807d4c:	10801014 	ori	r2,r2,64
  807d50:	9080030d 	sth	r2,12(r18)
  807d54:	e0c00015 	stw	r3,0(fp)
  807d58:	003f0606 	br	807974 <__sfvwrite_r+0xb4>

00807d5c <_fwalk_reent>:
  807d5c:	defff704 	addi	sp,sp,-36
  807d60:	dcc00315 	stw	r19,12(sp)
  807d64:	24c0b804 	addi	r19,r4,736
  807d68:	dd800615 	stw	r22,24(sp)
  807d6c:	dd400515 	stw	r21,20(sp)
  807d70:	dfc00815 	stw	ra,32(sp)
  807d74:	ddc00715 	stw	r23,28(sp)
  807d78:	dd000415 	stw	r20,16(sp)
  807d7c:	dc800215 	stw	r18,8(sp)
  807d80:	dc400115 	stw	r17,4(sp)
  807d84:	dc000015 	stw	r16,0(sp)
  807d88:	202b883a 	mov	r21,r4
  807d8c:	282d883a 	mov	r22,r5
  807d90:	08072180 	call	807218 <__sfp_lock_acquire>
  807d94:	98002126 	beq	r19,zero,807e1c <_fwalk_reent+0xc0>
  807d98:	002f883a 	mov	r23,zero
  807d9c:	9c800117 	ldw	r18,4(r19)
  807da0:	9c000217 	ldw	r16,8(r19)
  807da4:	90bfffc4 	addi	r2,r18,-1
  807da8:	10000d16 	blt	r2,zero,807de0 <_fwalk_reent+0x84>
  807dac:	0023883a 	mov	r17,zero
  807db0:	053fffc4 	movi	r20,-1
  807db4:	8080030f 	ldh	r2,12(r16)
  807db8:	8c400044 	addi	r17,r17,1
  807dbc:	10000626 	beq	r2,zero,807dd8 <_fwalk_reent+0x7c>
  807dc0:	8080038f 	ldh	r2,14(r16)
  807dc4:	800b883a 	mov	r5,r16
  807dc8:	a809883a 	mov	r4,r21
  807dcc:	15000226 	beq	r2,r20,807dd8 <_fwalk_reent+0x7c>
  807dd0:	b03ee83a 	callr	r22
  807dd4:	b8aeb03a 	or	r23,r23,r2
  807dd8:	84001704 	addi	r16,r16,92
  807ddc:	947ff51e 	bne	r18,r17,807db4 <_fwalk_reent+0x58>
  807de0:	9cc00017 	ldw	r19,0(r19)
  807de4:	983fed1e 	bne	r19,zero,807d9c <_fwalk_reent+0x40>
  807de8:	080721c0 	call	80721c <__sfp_lock_release>
  807dec:	b805883a 	mov	r2,r23
  807df0:	dfc00817 	ldw	ra,32(sp)
  807df4:	ddc00717 	ldw	r23,28(sp)
  807df8:	dd800617 	ldw	r22,24(sp)
  807dfc:	dd400517 	ldw	r21,20(sp)
  807e00:	dd000417 	ldw	r20,16(sp)
  807e04:	dcc00317 	ldw	r19,12(sp)
  807e08:	dc800217 	ldw	r18,8(sp)
  807e0c:	dc400117 	ldw	r17,4(sp)
  807e10:	dc000017 	ldw	r16,0(sp)
  807e14:	dec00904 	addi	sp,sp,36
  807e18:	f800283a 	ret
  807e1c:	002f883a 	mov	r23,zero
  807e20:	003ff106 	br	807de8 <_fwalk_reent+0x8c>

00807e24 <_fwalk>:
  807e24:	defff804 	addi	sp,sp,-32
  807e28:	dcc00315 	stw	r19,12(sp)
  807e2c:	24c0b804 	addi	r19,r4,736
  807e30:	dd400515 	stw	r21,20(sp)
  807e34:	dfc00715 	stw	ra,28(sp)
  807e38:	dd800615 	stw	r22,24(sp)
  807e3c:	dd000415 	stw	r20,16(sp)
  807e40:	dc800215 	stw	r18,8(sp)
  807e44:	dc400115 	stw	r17,4(sp)
  807e48:	dc000015 	stw	r16,0(sp)
  807e4c:	282b883a 	mov	r21,r5
  807e50:	08072180 	call	807218 <__sfp_lock_acquire>
  807e54:	98001f26 	beq	r19,zero,807ed4 <_fwalk+0xb0>
  807e58:	002d883a 	mov	r22,zero
  807e5c:	9c800117 	ldw	r18,4(r19)
  807e60:	9c000217 	ldw	r16,8(r19)
  807e64:	90bfffc4 	addi	r2,r18,-1
  807e68:	10000c16 	blt	r2,zero,807e9c <_fwalk+0x78>
  807e6c:	0023883a 	mov	r17,zero
  807e70:	053fffc4 	movi	r20,-1
  807e74:	8080030f 	ldh	r2,12(r16)
  807e78:	8c400044 	addi	r17,r17,1
  807e7c:	10000526 	beq	r2,zero,807e94 <_fwalk+0x70>
  807e80:	8080038f 	ldh	r2,14(r16)
  807e84:	8009883a 	mov	r4,r16
  807e88:	15000226 	beq	r2,r20,807e94 <_fwalk+0x70>
  807e8c:	a83ee83a 	callr	r21
  807e90:	b0acb03a 	or	r22,r22,r2
  807e94:	84001704 	addi	r16,r16,92
  807e98:	947ff61e 	bne	r18,r17,807e74 <_fwalk+0x50>
  807e9c:	9cc00017 	ldw	r19,0(r19)
  807ea0:	983fee1e 	bne	r19,zero,807e5c <_fwalk+0x38>
  807ea4:	080721c0 	call	80721c <__sfp_lock_release>
  807ea8:	b005883a 	mov	r2,r22
  807eac:	dfc00717 	ldw	ra,28(sp)
  807eb0:	dd800617 	ldw	r22,24(sp)
  807eb4:	dd400517 	ldw	r21,20(sp)
  807eb8:	dd000417 	ldw	r20,16(sp)
  807ebc:	dcc00317 	ldw	r19,12(sp)
  807ec0:	dc800217 	ldw	r18,8(sp)
  807ec4:	dc400117 	ldw	r17,4(sp)
  807ec8:	dc000017 	ldw	r16,0(sp)
  807ecc:	dec00804 	addi	sp,sp,32
  807ed0:	f800283a 	ret
  807ed4:	002d883a 	mov	r22,zero
  807ed8:	003ff206 	br	807ea4 <_fwalk+0x80>

00807edc <__locale_charset>:
  807edc:	d0a00517 	ldw	r2,-32748(gp)
  807ee0:	f800283a 	ret

00807ee4 <_localeconv_r>:
  807ee4:	00802074 	movhi	r2,129
  807ee8:	10803c04 	addi	r2,r2,240
  807eec:	f800283a 	ret

00807ef0 <localeconv>:
  807ef0:	00802074 	movhi	r2,129
  807ef4:	10880c04 	addi	r2,r2,8240
  807ef8:	11000017 	ldw	r4,0(r2)
  807efc:	0807ee41 	jmpi	807ee4 <_localeconv_r>

00807f00 <_setlocale_r>:
  807f00:	defffc04 	addi	sp,sp,-16
  807f04:	00c02074 	movhi	r3,129
  807f08:	18c03704 	addi	r3,r3,220
  807f0c:	dc800215 	stw	r18,8(sp)
  807f10:	dc400115 	stw	r17,4(sp)
  807f14:	dc000015 	stw	r16,0(sp)
  807f18:	2023883a 	mov	r17,r4
  807f1c:	2825883a 	mov	r18,r5
  807f20:	dfc00315 	stw	ra,12(sp)
  807f24:	3021883a 	mov	r16,r6
  807f28:	3009883a 	mov	r4,r6
  807f2c:	180b883a 	mov	r5,r3
  807f30:	30000926 	beq	r6,zero,807f58 <_setlocale_r+0x58>
  807f34:	08095400 	call	809540 <strcmp>
  807f38:	8009883a 	mov	r4,r16
  807f3c:	01402074 	movhi	r5,129
  807f40:	29402204 	addi	r5,r5,136
  807f44:	10000b1e 	bne	r2,zero,807f74 <_setlocale_r+0x74>
  807f48:	8c000d15 	stw	r16,52(r17)
  807f4c:	8c800c15 	stw	r18,48(r17)
  807f50:	00c02074 	movhi	r3,129
  807f54:	18c03704 	addi	r3,r3,220
  807f58:	1805883a 	mov	r2,r3
  807f5c:	dfc00317 	ldw	ra,12(sp)
  807f60:	dc800217 	ldw	r18,8(sp)
  807f64:	dc400117 	ldw	r17,4(sp)
  807f68:	dc000017 	ldw	r16,0(sp)
  807f6c:	dec00404 	addi	sp,sp,16
  807f70:	f800283a 	ret
  807f74:	08095400 	call	809540 <strcmp>
  807f78:	0007883a 	mov	r3,zero
  807f7c:	103ff226 	beq	r2,zero,807f48 <_setlocale_r+0x48>
  807f80:	003ff506 	br	807f58 <_setlocale_r+0x58>

00807f84 <setlocale>:
  807f84:	01802074 	movhi	r6,129
  807f88:	31880c04 	addi	r6,r6,8240
  807f8c:	2007883a 	mov	r3,r4
  807f90:	31000017 	ldw	r4,0(r6)
  807f94:	280d883a 	mov	r6,r5
  807f98:	180b883a 	mov	r5,r3
  807f9c:	0807f001 	jmpi	807f00 <_setlocale_r>

00807fa0 <__smakebuf_r>:
  807fa0:	2880030b 	ldhu	r2,12(r5)
  807fa4:	deffed04 	addi	sp,sp,-76
  807fa8:	dc401015 	stw	r17,64(sp)
  807fac:	1080008c 	andi	r2,r2,2
  807fb0:	dc000f15 	stw	r16,60(sp)
  807fb4:	dfc01215 	stw	ra,72(sp)
  807fb8:	dc801115 	stw	r18,68(sp)
  807fbc:	2821883a 	mov	r16,r5
  807fc0:	2023883a 	mov	r17,r4
  807fc4:	10000b26 	beq	r2,zero,807ff4 <__smakebuf_r+0x54>
  807fc8:	28c010c4 	addi	r3,r5,67
  807fcc:	00800044 	movi	r2,1
  807fd0:	28800515 	stw	r2,20(r5)
  807fd4:	28c00415 	stw	r3,16(r5)
  807fd8:	28c00015 	stw	r3,0(r5)
  807fdc:	dfc01217 	ldw	ra,72(sp)
  807fe0:	dc801117 	ldw	r18,68(sp)
  807fe4:	dc401017 	ldw	r17,64(sp)
  807fe8:	dc000f17 	ldw	r16,60(sp)
  807fec:	dec01304 	addi	sp,sp,76
  807ff0:	f800283a 	ret
  807ff4:	2940038f 	ldh	r5,14(r5)
  807ff8:	28002116 	blt	r5,zero,808080 <__smakebuf_r+0xe0>
  807ffc:	d80d883a 	mov	r6,sp
  808000:	08098bc0 	call	8098bc <_fstat_r>
  808004:	10001e16 	blt	r2,zero,808080 <__smakebuf_r+0xe0>
  808008:	d8800117 	ldw	r2,4(sp)
  80800c:	00e00014 	movui	r3,32768
  808010:	113c000c 	andi	r4,r2,61440
  808014:	20c03126 	beq	r4,r3,8080dc <__smakebuf_r+0x13c>
  808018:	8080030b 	ldhu	r2,12(r16)
  80801c:	00c80004 	movi	r3,8192
  808020:	10820014 	ori	r2,r2,2048
  808024:	8080030d 	sth	r2,12(r16)
  808028:	20c01e26 	beq	r4,r3,8080a4 <__smakebuf_r+0x104>
  80802c:	04810004 	movi	r18,1024
  808030:	8809883a 	mov	r4,r17
  808034:	900b883a 	mov	r5,r18
  808038:	08026a40 	call	8026a4 <_malloc_r>
  80803c:	1009883a 	mov	r4,r2
  808040:	10003126 	beq	r2,zero,808108 <__smakebuf_r+0x168>
  808044:	80c0030b 	ldhu	r3,12(r16)
  808048:	00802034 	movhi	r2,128
  80804c:	109cc304 	addi	r2,r2,29452
  808050:	88800f15 	stw	r2,60(r17)
  808054:	18c02014 	ori	r3,r3,128
  808058:	84800515 	stw	r18,20(r16)
  80805c:	80c0030d 	sth	r3,12(r16)
  808060:	81000415 	stw	r4,16(r16)
  808064:	81000015 	stw	r4,0(r16)
  808068:	dfc01217 	ldw	ra,72(sp)
  80806c:	dc801117 	ldw	r18,68(sp)
  808070:	dc401017 	ldw	r17,64(sp)
  808074:	dc000f17 	ldw	r16,60(sp)
  808078:	dec01304 	addi	sp,sp,76
  80807c:	f800283a 	ret
  808080:	80c0030b 	ldhu	r3,12(r16)
  808084:	1880200c 	andi	r2,r3,128
  808088:	10000426 	beq	r2,zero,80809c <__smakebuf_r+0xfc>
  80808c:	04801004 	movi	r18,64
  808090:	18820014 	ori	r2,r3,2048
  808094:	8080030d 	sth	r2,12(r16)
  808098:	003fe506 	br	808030 <__smakebuf_r+0x90>
  80809c:	04810004 	movi	r18,1024
  8080a0:	003ffb06 	br	808090 <__smakebuf_r+0xf0>
  8080a4:	8140038f 	ldh	r5,14(r16)
  8080a8:	8809883a 	mov	r4,r17
  8080ac:	08099300 	call	809930 <_isatty_r>
  8080b0:	103fde26 	beq	r2,zero,80802c <__smakebuf_r+0x8c>
  8080b4:	8080030b 	ldhu	r2,12(r16)
  8080b8:	80c010c4 	addi	r3,r16,67
  8080bc:	04810004 	movi	r18,1024
  8080c0:	10800054 	ori	r2,r2,1
  8080c4:	8080030d 	sth	r2,12(r16)
  8080c8:	00800044 	movi	r2,1
  8080cc:	80c00415 	stw	r3,16(r16)
  8080d0:	80800515 	stw	r2,20(r16)
  8080d4:	80c00015 	stw	r3,0(r16)
  8080d8:	003fd506 	br	808030 <__smakebuf_r+0x90>
  8080dc:	80c00a17 	ldw	r3,40(r16)
  8080e0:	00802074 	movhi	r2,129
  8080e4:	10a4ff04 	addi	r2,r2,-27652
  8080e8:	18bfcb1e 	bne	r3,r2,808018 <__smakebuf_r+0x78>
  8080ec:	8080030b 	ldhu	r2,12(r16)
  8080f0:	00c10004 	movi	r3,1024
  8080f4:	1825883a 	mov	r18,r3
  8080f8:	10c4b03a 	or	r2,r2,r3
  8080fc:	8080030d 	sth	r2,12(r16)
  808100:	80c01315 	stw	r3,76(r16)
  808104:	003fca06 	br	808030 <__smakebuf_r+0x90>
  808108:	8100030b 	ldhu	r4,12(r16)
  80810c:	2080800c 	andi	r2,r4,512
  808110:	103fb21e 	bne	r2,zero,807fdc <__smakebuf_r+0x3c>
  808114:	80c010c4 	addi	r3,r16,67
  808118:	21000094 	ori	r4,r4,2
  80811c:	00800044 	movi	r2,1
  808120:	80800515 	stw	r2,20(r16)
  808124:	8100030d 	sth	r4,12(r16)
  808128:	80c00415 	stw	r3,16(r16)
  80812c:	80c00015 	stw	r3,0(r16)
  808130:	003faa06 	br	807fdc <__smakebuf_r+0x3c>

00808134 <memchr>:
  808134:	008000c4 	movi	r2,3
  808138:	29403fcc 	andi	r5,r5,255
  80813c:	2007883a 	mov	r3,r4
  808140:	1180022e 	bgeu	r2,r6,80814c <memchr+0x18>
  808144:	2084703a 	and	r2,r4,r2
  808148:	10000b26 	beq	r2,zero,808178 <memchr+0x44>
  80814c:	313fffc4 	addi	r4,r6,-1
  808150:	3000051e 	bne	r6,zero,808168 <memchr+0x34>
  808154:	00002c06 	br	808208 <memchr+0xd4>
  808158:	213fffc4 	addi	r4,r4,-1
  80815c:	00bfffc4 	movi	r2,-1
  808160:	18c00044 	addi	r3,r3,1
  808164:	20802826 	beq	r4,r2,808208 <memchr+0xd4>
  808168:	18800003 	ldbu	r2,0(r3)
  80816c:	28bffa1e 	bne	r5,r2,808158 <memchr+0x24>
  808170:	1805883a 	mov	r2,r3
  808174:	f800283a 	ret
  808178:	0011883a 	mov	r8,zero
  80817c:	0007883a 	mov	r3,zero
  808180:	01c00104 	movi	r7,4
  808184:	4004923a 	slli	r2,r8,8
  808188:	18c00044 	addi	r3,r3,1
  80818c:	1151883a 	add	r8,r2,r5
  808190:	19fffc1e 	bne	r3,r7,808184 <memchr+0x50>
  808194:	02bfbff4 	movhi	r10,65279
  808198:	52bfbfc4 	addi	r10,r10,-257
  80819c:	02602074 	movhi	r9,32897
  8081a0:	4a602004 	addi	r9,r9,-32640
  8081a4:	02c000c4 	movi	r11,3
  8081a8:	20800017 	ldw	r2,0(r4)
  8081ac:	31bfff04 	addi	r6,r6,-4
  8081b0:	200f883a 	mov	r7,r4
  8081b4:	1204f03a 	xor	r2,r2,r8
  8081b8:	1287883a 	add	r3,r2,r10
  8081bc:	1a46703a 	and	r3,r3,r9
  8081c0:	0084303a 	nor	r2,zero,r2
  8081c4:	10c4703a 	and	r2,r2,r3
  8081c8:	10000b26 	beq	r2,zero,8081f8 <memchr+0xc4>
  8081cc:	20800003 	ldbu	r2,0(r4)
  8081d0:	28800f26 	beq	r5,r2,808210 <memchr+0xdc>
  8081d4:	20800043 	ldbu	r2,1(r4)
  8081d8:	21c00044 	addi	r7,r4,1
  8081dc:	28800c26 	beq	r5,r2,808210 <memchr+0xdc>
  8081e0:	20800083 	ldbu	r2,2(r4)
  8081e4:	21c00084 	addi	r7,r4,2
  8081e8:	28800926 	beq	r5,r2,808210 <memchr+0xdc>
  8081ec:	208000c3 	ldbu	r2,3(r4)
  8081f0:	21c000c4 	addi	r7,r4,3
  8081f4:	28800626 	beq	r5,r2,808210 <memchr+0xdc>
  8081f8:	21000104 	addi	r4,r4,4
  8081fc:	59bfea36 	bltu	r11,r6,8081a8 <memchr+0x74>
  808200:	2007883a 	mov	r3,r4
  808204:	003fd106 	br	80814c <memchr+0x18>
  808208:	0005883a 	mov	r2,zero
  80820c:	f800283a 	ret
  808210:	3805883a 	mov	r2,r7
  808214:	f800283a 	ret

00808218 <memmove>:
  808218:	2807883a 	mov	r3,r5
  80821c:	2011883a 	mov	r8,r4
  808220:	29000c2e 	bgeu	r5,r4,808254 <memmove+0x3c>
  808224:	298f883a 	add	r7,r5,r6
  808228:	21c00a2e 	bgeu	r4,r7,808254 <memmove+0x3c>
  80822c:	30000726 	beq	r6,zero,80824c <memmove+0x34>
  808230:	2187883a 	add	r3,r4,r6
  808234:	198dc83a 	sub	r6,r3,r6
  808238:	39ffffc4 	addi	r7,r7,-1
  80823c:	38800003 	ldbu	r2,0(r7)
  808240:	18ffffc4 	addi	r3,r3,-1
  808244:	18800005 	stb	r2,0(r3)
  808248:	19bffb1e 	bne	r3,r6,808238 <memmove+0x20>
  80824c:	2005883a 	mov	r2,r4
  808250:	f800283a 	ret
  808254:	01c003c4 	movi	r7,15
  808258:	39800a36 	bltu	r7,r6,808284 <memmove+0x6c>
  80825c:	303ffb26 	beq	r6,zero,80824c <memmove+0x34>
  808260:	400f883a 	mov	r7,r8
  808264:	320d883a 	add	r6,r6,r8
  808268:	28800003 	ldbu	r2,0(r5)
  80826c:	29400044 	addi	r5,r5,1
  808270:	38800005 	stb	r2,0(r7)
  808274:	39c00044 	addi	r7,r7,1
  808278:	39bffb1e 	bne	r7,r6,808268 <memmove+0x50>
  80827c:	2005883a 	mov	r2,r4
  808280:	f800283a 	ret
  808284:	1904b03a 	or	r2,r3,r4
  808288:	108000cc 	andi	r2,r2,3
  80828c:	103ff31e 	bne	r2,zero,80825c <memmove+0x44>
  808290:	3811883a 	mov	r8,r7
  808294:	180b883a 	mov	r5,r3
  808298:	200f883a 	mov	r7,r4
  80829c:	28c00017 	ldw	r3,0(r5)
  8082a0:	31bffc04 	addi	r6,r6,-16
  8082a4:	38c00015 	stw	r3,0(r7)
  8082a8:	28800117 	ldw	r2,4(r5)
  8082ac:	38800115 	stw	r2,4(r7)
  8082b0:	28c00217 	ldw	r3,8(r5)
  8082b4:	38c00215 	stw	r3,8(r7)
  8082b8:	28800317 	ldw	r2,12(r5)
  8082bc:	29400404 	addi	r5,r5,16
  8082c0:	38800315 	stw	r2,12(r7)
  8082c4:	39c00404 	addi	r7,r7,16
  8082c8:	41bff436 	bltu	r8,r6,80829c <memmove+0x84>
  8082cc:	008000c4 	movi	r2,3
  8082d0:	1180072e 	bgeu	r2,r6,8082f0 <memmove+0xd8>
  8082d4:	1007883a 	mov	r3,r2
  8082d8:	28800017 	ldw	r2,0(r5)
  8082dc:	31bfff04 	addi	r6,r6,-4
  8082e0:	29400104 	addi	r5,r5,4
  8082e4:	38800015 	stw	r2,0(r7)
  8082e8:	39c00104 	addi	r7,r7,4
  8082ec:	19bffa36 	bltu	r3,r6,8082d8 <memmove+0xc0>
  8082f0:	3811883a 	mov	r8,r7
  8082f4:	003fd906 	br	80825c <memmove+0x44>

008082f8 <memset>:
  8082f8:	008000c4 	movi	r2,3
  8082fc:	29403fcc 	andi	r5,r5,255
  808300:	2007883a 	mov	r3,r4
  808304:	1180022e 	bgeu	r2,r6,808310 <memset+0x18>
  808308:	2084703a 	and	r2,r4,r2
  80830c:	10000826 	beq	r2,zero,808330 <memset+0x38>
  808310:	30000526 	beq	r6,zero,808328 <memset+0x30>
  808314:	2805883a 	mov	r2,r5
  808318:	30cd883a 	add	r6,r6,r3
  80831c:	18800005 	stb	r2,0(r3)
  808320:	18c00044 	addi	r3,r3,1
  808324:	19bffd1e 	bne	r3,r6,80831c <memset+0x24>
  808328:	2005883a 	mov	r2,r4
  80832c:	f800283a 	ret
  808330:	2804923a 	slli	r2,r5,8
  808334:	020003c4 	movi	r8,15
  808338:	200f883a 	mov	r7,r4
  80833c:	2884b03a 	or	r2,r5,r2
  808340:	1006943a 	slli	r3,r2,16
  808344:	10c6b03a 	or	r3,r2,r3
  808348:	41800a2e 	bgeu	r8,r6,808374 <memset+0x7c>
  80834c:	4005883a 	mov	r2,r8
  808350:	31bffc04 	addi	r6,r6,-16
  808354:	38c00015 	stw	r3,0(r7)
  808358:	38c00115 	stw	r3,4(r7)
  80835c:	38c00215 	stw	r3,8(r7)
  808360:	38c00315 	stw	r3,12(r7)
  808364:	39c00404 	addi	r7,r7,16
  808368:	11bff936 	bltu	r2,r6,808350 <memset+0x58>
  80836c:	008000c4 	movi	r2,3
  808370:	1180052e 	bgeu	r2,r6,808388 <memset+0x90>
  808374:	31bfff04 	addi	r6,r6,-4
  808378:	008000c4 	movi	r2,3
  80837c:	38c00015 	stw	r3,0(r7)
  808380:	39c00104 	addi	r7,r7,4
  808384:	11bffb36 	bltu	r2,r6,808374 <memset+0x7c>
  808388:	3807883a 	mov	r3,r7
  80838c:	003fe006 	br	808310 <memset+0x18>

00808390 <_Bfree>:
  808390:	28000826 	beq	r5,zero,8083b4 <_Bfree+0x24>
  808394:	28800117 	ldw	r2,4(r5)
  808398:	21001317 	ldw	r4,76(r4)
  80839c:	1085883a 	add	r2,r2,r2
  8083a0:	1085883a 	add	r2,r2,r2
  8083a4:	1105883a 	add	r2,r2,r4
  8083a8:	10c00017 	ldw	r3,0(r2)
  8083ac:	28c00015 	stw	r3,0(r5)
  8083b0:	11400015 	stw	r5,0(r2)
  8083b4:	f800283a 	ret

008083b8 <__hi0bits>:
  8083b8:	20bfffec 	andhi	r2,r4,65535
  8083bc:	10001426 	beq	r2,zero,808410 <__hi0bits+0x58>
  8083c0:	0007883a 	mov	r3,zero
  8083c4:	20bfc02c 	andhi	r2,r4,65280
  8083c8:	1000021e 	bne	r2,zero,8083d4 <__hi0bits+0x1c>
  8083cc:	2008923a 	slli	r4,r4,8
  8083d0:	18c00204 	addi	r3,r3,8
  8083d4:	20bc002c 	andhi	r2,r4,61440
  8083d8:	1000021e 	bne	r2,zero,8083e4 <__hi0bits+0x2c>
  8083dc:	2008913a 	slli	r4,r4,4
  8083e0:	18c00104 	addi	r3,r3,4
  8083e4:	20b0002c 	andhi	r2,r4,49152
  8083e8:	1000031e 	bne	r2,zero,8083f8 <__hi0bits+0x40>
  8083ec:	2105883a 	add	r2,r4,r4
  8083f0:	18c00084 	addi	r3,r3,2
  8083f4:	1089883a 	add	r4,r2,r2
  8083f8:	20000316 	blt	r4,zero,808408 <__hi0bits+0x50>
  8083fc:	2090002c 	andhi	r2,r4,16384
  808400:	10000626 	beq	r2,zero,80841c <__hi0bits+0x64>
  808404:	18c00044 	addi	r3,r3,1
  808408:	1805883a 	mov	r2,r3
  80840c:	f800283a 	ret
  808410:	2008943a 	slli	r4,r4,16
  808414:	00c00404 	movi	r3,16
  808418:	003fea06 	br	8083c4 <__hi0bits+0xc>
  80841c:	00c00804 	movi	r3,32
  808420:	1805883a 	mov	r2,r3
  808424:	f800283a 	ret

00808428 <__lo0bits>:
  808428:	20c00017 	ldw	r3,0(r4)
  80842c:	188001cc 	andi	r2,r3,7
  808430:	10000a26 	beq	r2,zero,80845c <__lo0bits+0x34>
  808434:	1880004c 	andi	r2,r3,1
  808438:	1005003a 	cmpeq	r2,r2,zero
  80843c:	10002126 	beq	r2,zero,8084c4 <__lo0bits+0x9c>
  808440:	1880008c 	andi	r2,r3,2
  808444:	1000251e 	bne	r2,zero,8084dc <__lo0bits+0xb4>
  808448:	1804d0ba 	srli	r2,r3,2
  80844c:	01400084 	movi	r5,2
  808450:	20800015 	stw	r2,0(r4)
  808454:	2805883a 	mov	r2,r5
  808458:	f800283a 	ret
  80845c:	18bfffcc 	andi	r2,r3,65535
  808460:	10001526 	beq	r2,zero,8084b8 <__lo0bits+0x90>
  808464:	000b883a 	mov	r5,zero
  808468:	18803fcc 	andi	r2,r3,255
  80846c:	1000021e 	bne	r2,zero,808478 <__lo0bits+0x50>
  808470:	1806d23a 	srli	r3,r3,8
  808474:	29400204 	addi	r5,r5,8
  808478:	188003cc 	andi	r2,r3,15
  80847c:	1000021e 	bne	r2,zero,808488 <__lo0bits+0x60>
  808480:	1806d13a 	srli	r3,r3,4
  808484:	29400104 	addi	r5,r5,4
  808488:	188000cc 	andi	r2,r3,3
  80848c:	1000021e 	bne	r2,zero,808498 <__lo0bits+0x70>
  808490:	1806d0ba 	srli	r3,r3,2
  808494:	29400084 	addi	r5,r5,2
  808498:	1880004c 	andi	r2,r3,1
  80849c:	1000031e 	bne	r2,zero,8084ac <__lo0bits+0x84>
  8084a0:	1806d07a 	srli	r3,r3,1
  8084a4:	18000a26 	beq	r3,zero,8084d0 <__lo0bits+0xa8>
  8084a8:	29400044 	addi	r5,r5,1
  8084ac:	2805883a 	mov	r2,r5
  8084b0:	20c00015 	stw	r3,0(r4)
  8084b4:	f800283a 	ret
  8084b8:	1806d43a 	srli	r3,r3,16
  8084bc:	01400404 	movi	r5,16
  8084c0:	003fe906 	br	808468 <__lo0bits+0x40>
  8084c4:	000b883a 	mov	r5,zero
  8084c8:	2805883a 	mov	r2,r5
  8084cc:	f800283a 	ret
  8084d0:	01400804 	movi	r5,32
  8084d4:	2805883a 	mov	r2,r5
  8084d8:	f800283a 	ret
  8084dc:	1804d07a 	srli	r2,r3,1
  8084e0:	01400044 	movi	r5,1
  8084e4:	20800015 	stw	r2,0(r4)
  8084e8:	003fda06 	br	808454 <__lo0bits+0x2c>

008084ec <__mcmp>:
  8084ec:	20800417 	ldw	r2,16(r4)
  8084f0:	28c00417 	ldw	r3,16(r5)
  8084f4:	10cfc83a 	sub	r7,r2,r3
  8084f8:	38000c1e 	bne	r7,zero,80852c <__mcmp+0x40>
  8084fc:	18c5883a 	add	r2,r3,r3
  808500:	1085883a 	add	r2,r2,r2
  808504:	10c00504 	addi	r3,r2,20
  808508:	21000504 	addi	r4,r4,20
  80850c:	28cb883a 	add	r5,r5,r3
  808510:	2085883a 	add	r2,r4,r2
  808514:	10bfff04 	addi	r2,r2,-4
  808518:	297fff04 	addi	r5,r5,-4
  80851c:	11800017 	ldw	r6,0(r2)
  808520:	28c00017 	ldw	r3,0(r5)
  808524:	30c0031e 	bne	r6,r3,808534 <__mcmp+0x48>
  808528:	20bffa36 	bltu	r4,r2,808514 <__mcmp+0x28>
  80852c:	3805883a 	mov	r2,r7
  808530:	f800283a 	ret
  808534:	30c00336 	bltu	r6,r3,808544 <__mcmp+0x58>
  808538:	01c00044 	movi	r7,1
  80853c:	3805883a 	mov	r2,r7
  808540:	f800283a 	ret
  808544:	01ffffc4 	movi	r7,-1
  808548:	003ff806 	br	80852c <__mcmp+0x40>

0080854c <__ulp>:
  80854c:	295ffc2c 	andhi	r5,r5,32752
  808550:	013f3034 	movhi	r4,64704
  808554:	290b883a 	add	r5,r5,r4
  808558:	0145c83a 	sub	r2,zero,r5
  80855c:	1007d53a 	srai	r3,r2,20
  808560:	000d883a 	mov	r6,zero
  808564:	0140040e 	bge	zero,r5,808578 <__ulp+0x2c>
  808568:	280f883a 	mov	r7,r5
  80856c:	3807883a 	mov	r3,r7
  808570:	3005883a 	mov	r2,r6
  808574:	f800283a 	ret
  808578:	008004c4 	movi	r2,19
  80857c:	193ffb04 	addi	r4,r3,-20
  808580:	10c00c0e 	bge	r2,r3,8085b4 <__ulp+0x68>
  808584:	008007c4 	movi	r2,31
  808588:	1107c83a 	sub	r3,r2,r4
  80858c:	00800784 	movi	r2,30
  808590:	01400044 	movi	r5,1
  808594:	11000216 	blt	r2,r4,8085a0 <__ulp+0x54>
  808598:	00800044 	movi	r2,1
  80859c:	10ca983a 	sll	r5,r2,r3
  8085a0:	000f883a 	mov	r7,zero
  8085a4:	280d883a 	mov	r6,r5
  8085a8:	3807883a 	mov	r3,r7
  8085ac:	3005883a 	mov	r2,r6
  8085b0:	f800283a 	ret
  8085b4:	00800234 	movhi	r2,8
  8085b8:	10cfd83a 	sra	r7,r2,r3
  8085bc:	000d883a 	mov	r6,zero
  8085c0:	3005883a 	mov	r2,r6
  8085c4:	3807883a 	mov	r3,r7
  8085c8:	f800283a 	ret

008085cc <__b2d>:
  8085cc:	20800417 	ldw	r2,16(r4)
  8085d0:	defff904 	addi	sp,sp,-28
  8085d4:	dd000415 	stw	r20,16(sp)
  8085d8:	1085883a 	add	r2,r2,r2
  8085dc:	25000504 	addi	r20,r4,20
  8085e0:	1085883a 	add	r2,r2,r2
  8085e4:	dc000015 	stw	r16,0(sp)
  8085e8:	a0a1883a 	add	r16,r20,r2
  8085ec:	dd400515 	stw	r21,20(sp)
  8085f0:	857fff17 	ldw	r21,-4(r16)
  8085f4:	dc400115 	stw	r17,4(sp)
  8085f8:	dfc00615 	stw	ra,24(sp)
  8085fc:	a809883a 	mov	r4,r21
  808600:	2823883a 	mov	r17,r5
  808604:	dcc00315 	stw	r19,12(sp)
  808608:	dc800215 	stw	r18,8(sp)
  80860c:	08083b80 	call	8083b8 <__hi0bits>
  808610:	100b883a 	mov	r5,r2
  808614:	00800804 	movi	r2,32
  808618:	1145c83a 	sub	r2,r2,r5
  80861c:	88800015 	stw	r2,0(r17)
  808620:	00800284 	movi	r2,10
  808624:	80ffff04 	addi	r3,r16,-4
  808628:	11401416 	blt	r2,r5,80867c <__b2d+0xb0>
  80862c:	008002c4 	movi	r2,11
  808630:	1149c83a 	sub	r4,r2,r5
  808634:	a0c02736 	bltu	r20,r3,8086d4 <__b2d+0x108>
  808638:	000d883a 	mov	r6,zero
  80863c:	28800544 	addi	r2,r5,21
  808640:	a906d83a 	srl	r3,r21,r4
  808644:	a884983a 	sll	r2,r21,r2
  808648:	1ccffc34 	orhi	r19,r3,16368
  80864c:	11a4b03a 	or	r18,r2,r6
  808650:	9005883a 	mov	r2,r18
  808654:	9807883a 	mov	r3,r19
  808658:	dfc00617 	ldw	ra,24(sp)
  80865c:	dd400517 	ldw	r21,20(sp)
  808660:	dd000417 	ldw	r20,16(sp)
  808664:	dcc00317 	ldw	r19,12(sp)
  808668:	dc800217 	ldw	r18,8(sp)
  80866c:	dc400117 	ldw	r17,4(sp)
  808670:	dc000017 	ldw	r16,0(sp)
  808674:	dec00704 	addi	sp,sp,28
  808678:	f800283a 	ret
  80867c:	a0c00e36 	bltu	r20,r3,8086b8 <__b2d+0xec>
  808680:	293ffd44 	addi	r4,r5,-11
  808684:	000d883a 	mov	r6,zero
  808688:	20000f26 	beq	r4,zero,8086c8 <__b2d+0xfc>
  80868c:	00800804 	movi	r2,32
  808690:	110bc83a 	sub	r5,r2,r4
  808694:	a0c01236 	bltu	r20,r3,8086e0 <__b2d+0x114>
  808698:	000f883a 	mov	r7,zero
  80869c:	a904983a 	sll	r2,r21,r4
  8086a0:	3146d83a 	srl	r3,r6,r5
  8086a4:	3108983a 	sll	r4,r6,r4
  8086a8:	108ffc34 	orhi	r2,r2,16368
  8086ac:	18a6b03a 	or	r19,r3,r2
  8086b0:	3924b03a 	or	r18,r7,r4
  8086b4:	003fe606 	br	808650 <__b2d+0x84>
  8086b8:	293ffd44 	addi	r4,r5,-11
  8086bc:	81bffe17 	ldw	r6,-8(r16)
  8086c0:	80fffe04 	addi	r3,r16,-8
  8086c4:	203ff11e 	bne	r4,zero,80868c <__b2d+0xc0>
  8086c8:	accffc34 	orhi	r19,r21,16368
  8086cc:	3025883a 	mov	r18,r6
  8086d0:	003fdf06 	br	808650 <__b2d+0x84>
  8086d4:	18bfff17 	ldw	r2,-4(r3)
  8086d8:	110cd83a 	srl	r6,r2,r4
  8086dc:	003fd706 	br	80863c <__b2d+0x70>
  8086e0:	18bfff17 	ldw	r2,-4(r3)
  8086e4:	114ed83a 	srl	r7,r2,r5
  8086e8:	003fec06 	br	80869c <__b2d+0xd0>

008086ec <__ratio>:
  8086ec:	defff904 	addi	sp,sp,-28
  8086f0:	dc400215 	stw	r17,8(sp)
  8086f4:	2823883a 	mov	r17,r5
  8086f8:	d80b883a 	mov	r5,sp
  8086fc:	dfc00615 	stw	ra,24(sp)
  808700:	dd000515 	stw	r20,20(sp)
  808704:	dcc00415 	stw	r19,16(sp)
  808708:	dc800315 	stw	r18,12(sp)
  80870c:	2025883a 	mov	r18,r4
  808710:	08085cc0 	call	8085cc <__b2d>
  808714:	8809883a 	mov	r4,r17
  808718:	d9400104 	addi	r5,sp,4
  80871c:	1027883a 	mov	r19,r2
  808720:	1829883a 	mov	r20,r3
  808724:	08085cc0 	call	8085cc <__b2d>
  808728:	89000417 	ldw	r4,16(r17)
  80872c:	91c00417 	ldw	r7,16(r18)
  808730:	d9800117 	ldw	r6,4(sp)
  808734:	180b883a 	mov	r5,r3
  808738:	390fc83a 	sub	r7,r7,r4
  80873c:	1009883a 	mov	r4,r2
  808740:	d8800017 	ldw	r2,0(sp)
  808744:	380e917a 	slli	r7,r7,5
  808748:	2011883a 	mov	r8,r4
  80874c:	1185c83a 	sub	r2,r2,r6
  808750:	11c5883a 	add	r2,r2,r7
  808754:	1006953a 	slli	r3,r2,20
  808758:	2813883a 	mov	r9,r5
  80875c:	00800d0e 	bge	zero,r2,808794 <__ratio+0xa8>
  808760:	1d29883a 	add	r20,r3,r20
  808764:	a00b883a 	mov	r5,r20
  808768:	480f883a 	mov	r7,r9
  80876c:	9809883a 	mov	r4,r19
  808770:	400d883a 	mov	r6,r8
  808774:	080aee40 	call	80aee4 <__divdf3>
  808778:	dfc00617 	ldw	ra,24(sp)
  80877c:	dd000517 	ldw	r20,20(sp)
  808780:	dcc00417 	ldw	r19,16(sp)
  808784:	dc800317 	ldw	r18,12(sp)
  808788:	dc400217 	ldw	r17,8(sp)
  80878c:	dec00704 	addi	sp,sp,28
  808790:	f800283a 	ret
  808794:	28d3c83a 	sub	r9,r5,r3
  808798:	003ff206 	br	808764 <__ratio+0x78>

0080879c <_mprec_log10>:
  80879c:	defffe04 	addi	sp,sp,-8
  8087a0:	008005c4 	movi	r2,23
  8087a4:	dc000015 	stw	r16,0(sp)
  8087a8:	dfc00115 	stw	ra,4(sp)
  8087ac:	2021883a 	mov	r16,r4
  8087b0:	11000c16 	blt	r2,r4,8087e4 <_mprec_log10+0x48>
  8087b4:	200490fa 	slli	r2,r4,3
  8087b8:	00c02074 	movhi	r3,129
  8087bc:	18c04804 	addi	r3,r3,288
  8087c0:	10c5883a 	add	r2,r2,r3
  8087c4:	12400117 	ldw	r9,4(r2)
  8087c8:	12000017 	ldw	r8,0(r2)
  8087cc:	4807883a 	mov	r3,r9
  8087d0:	4005883a 	mov	r2,r8
  8087d4:	dfc00117 	ldw	ra,4(sp)
  8087d8:	dc000017 	ldw	r16,0(sp)
  8087dc:	dec00204 	addi	sp,sp,8
  8087e0:	f800283a 	ret
  8087e4:	0011883a 	mov	r8,zero
  8087e8:	024ffc34 	movhi	r9,16368
  8087ec:	0005883a 	mov	r2,zero
  8087f0:	00d00934 	movhi	r3,16420
  8087f4:	480b883a 	mov	r5,r9
  8087f8:	4009883a 	mov	r4,r8
  8087fc:	180f883a 	mov	r7,r3
  808800:	100d883a 	mov	r6,r2
  808804:	080ab200 	call	80ab20 <__muldf3>
  808808:	843fffc4 	addi	r16,r16,-1
  80880c:	1011883a 	mov	r8,r2
  808810:	1813883a 	mov	r9,r3
  808814:	803ff51e 	bne	r16,zero,8087ec <_mprec_log10+0x50>
  808818:	4005883a 	mov	r2,r8
  80881c:	4807883a 	mov	r3,r9
  808820:	dfc00117 	ldw	ra,4(sp)
  808824:	dc000017 	ldw	r16,0(sp)
  808828:	dec00204 	addi	sp,sp,8
  80882c:	f800283a 	ret

00808830 <__copybits>:
  808830:	297fffc4 	addi	r5,r5,-1
  808834:	30800417 	ldw	r2,16(r6)
  808838:	280bd17a 	srai	r5,r5,5
  80883c:	31800504 	addi	r6,r6,20
  808840:	1085883a 	add	r2,r2,r2
  808844:	294b883a 	add	r5,r5,r5
  808848:	294b883a 	add	r5,r5,r5
  80884c:	1085883a 	add	r2,r2,r2
  808850:	290b883a 	add	r5,r5,r4
  808854:	3087883a 	add	r3,r6,r2
  808858:	29400104 	addi	r5,r5,4
  80885c:	30c0052e 	bgeu	r6,r3,808874 <__copybits+0x44>
  808860:	30800017 	ldw	r2,0(r6)
  808864:	31800104 	addi	r6,r6,4
  808868:	20800015 	stw	r2,0(r4)
  80886c:	21000104 	addi	r4,r4,4
  808870:	30fffb36 	bltu	r6,r3,808860 <__copybits+0x30>
  808874:	2140032e 	bgeu	r4,r5,808884 <__copybits+0x54>
  808878:	20000015 	stw	zero,0(r4)
  80887c:	21000104 	addi	r4,r4,4
  808880:	217ffd36 	bltu	r4,r5,808878 <__copybits+0x48>
  808884:	f800283a 	ret

00808888 <__any_on>:
  808888:	20800417 	ldw	r2,16(r4)
  80888c:	2807d17a 	srai	r3,r5,5
  808890:	21000504 	addi	r4,r4,20
  808894:	10c00d0e 	bge	r2,r3,8088cc <__any_on+0x44>
  808898:	1085883a 	add	r2,r2,r2
  80889c:	1085883a 	add	r2,r2,r2
  8088a0:	208d883a 	add	r6,r4,r2
  8088a4:	2180182e 	bgeu	r4,r6,808908 <__any_on+0x80>
  8088a8:	30bfff17 	ldw	r2,-4(r6)
  8088ac:	30ffff04 	addi	r3,r6,-4
  8088b0:	1000041e 	bne	r2,zero,8088c4 <__any_on+0x3c>
  8088b4:	20c0142e 	bgeu	r4,r3,808908 <__any_on+0x80>
  8088b8:	18ffff04 	addi	r3,r3,-4
  8088bc:	18800017 	ldw	r2,0(r3)
  8088c0:	103ffc26 	beq	r2,zero,8088b4 <__any_on+0x2c>
  8088c4:	00800044 	movi	r2,1
  8088c8:	f800283a 	ret
  8088cc:	18800a0e 	bge	r3,r2,8088f8 <__any_on+0x70>
  8088d0:	294007cc 	andi	r5,r5,31
  8088d4:	28000826 	beq	r5,zero,8088f8 <__any_on+0x70>
  8088d8:	18c5883a 	add	r2,r3,r3
  8088dc:	1085883a 	add	r2,r2,r2
  8088e0:	208d883a 	add	r6,r4,r2
  8088e4:	30c00017 	ldw	r3,0(r6)
  8088e8:	1944d83a 	srl	r2,r3,r5
  8088ec:	1144983a 	sll	r2,r2,r5
  8088f0:	18bff41e 	bne	r3,r2,8088c4 <__any_on+0x3c>
  8088f4:	003feb06 	br	8088a4 <__any_on+0x1c>
  8088f8:	18c5883a 	add	r2,r3,r3
  8088fc:	1085883a 	add	r2,r2,r2
  808900:	208d883a 	add	r6,r4,r2
  808904:	003fe706 	br	8088a4 <__any_on+0x1c>
  808908:	0005883a 	mov	r2,zero
  80890c:	f800283a 	ret

00808910 <_Balloc>:
  808910:	20c01317 	ldw	r3,76(r4)
  808914:	defffb04 	addi	sp,sp,-20
  808918:	dcc00315 	stw	r19,12(sp)
  80891c:	dc800215 	stw	r18,8(sp)
  808920:	dfc00415 	stw	ra,16(sp)
  808924:	2825883a 	mov	r18,r5
  808928:	dc400115 	stw	r17,4(sp)
  80892c:	dc000015 	stw	r16,0(sp)
  808930:	2027883a 	mov	r19,r4
  808934:	01800404 	movi	r6,16
  808938:	01400104 	movi	r5,4
  80893c:	18001726 	beq	r3,zero,80899c <_Balloc+0x8c>
  808940:	01400044 	movi	r5,1
  808944:	9485883a 	add	r2,r18,r18
  808948:	2ca2983a 	sll	r17,r5,r18
  80894c:	1085883a 	add	r2,r2,r2
  808950:	10c7883a 	add	r3,r2,r3
  808954:	1c000017 	ldw	r16,0(r3)
  808958:	8c4d883a 	add	r6,r17,r17
  80895c:	318d883a 	add	r6,r6,r6
  808960:	9809883a 	mov	r4,r19
  808964:	31800504 	addi	r6,r6,20
  808968:	80001226 	beq	r16,zero,8089b4 <_Balloc+0xa4>
  80896c:	80800017 	ldw	r2,0(r16)
  808970:	18800015 	stw	r2,0(r3)
  808974:	80000415 	stw	zero,16(r16)
  808978:	80000315 	stw	zero,12(r16)
  80897c:	8005883a 	mov	r2,r16
  808980:	dfc00417 	ldw	ra,16(sp)
  808984:	dcc00317 	ldw	r19,12(sp)
  808988:	dc800217 	ldw	r18,8(sp)
  80898c:	dc400117 	ldw	r17,4(sp)
  808990:	dc000017 	ldw	r16,0(sp)
  808994:	dec00504 	addi	sp,sp,20
  808998:	f800283a 	ret
  80899c:	08096740 	call	809674 <_calloc_r>
  8089a0:	1007883a 	mov	r3,r2
  8089a4:	0021883a 	mov	r16,zero
  8089a8:	98801315 	stw	r2,76(r19)
  8089ac:	103fe41e 	bne	r2,zero,808940 <_Balloc+0x30>
  8089b0:	003ff206 	br	80897c <_Balloc+0x6c>
  8089b4:	08096740 	call	809674 <_calloc_r>
  8089b8:	103ff026 	beq	r2,zero,80897c <_Balloc+0x6c>
  8089bc:	1021883a 	mov	r16,r2
  8089c0:	14800115 	stw	r18,4(r2)
  8089c4:	14400215 	stw	r17,8(r2)
  8089c8:	003fea06 	br	808974 <_Balloc+0x64>

008089cc <__d2b>:
  8089cc:	defff504 	addi	sp,sp,-44
  8089d0:	dcc00515 	stw	r19,20(sp)
  8089d4:	04c00044 	movi	r19,1
  8089d8:	dc000215 	stw	r16,8(sp)
  8089dc:	2821883a 	mov	r16,r5
  8089e0:	980b883a 	mov	r5,r19
  8089e4:	ddc00915 	stw	r23,36(sp)
  8089e8:	dd800815 	stw	r22,32(sp)
  8089ec:	dd400715 	stw	r21,28(sp)
  8089f0:	dd000615 	stw	r20,24(sp)
  8089f4:	dc800415 	stw	r18,16(sp)
  8089f8:	dc400315 	stw	r17,12(sp)
  8089fc:	dfc00a15 	stw	ra,40(sp)
  808a00:	3023883a 	mov	r17,r6
  808a04:	382d883a 	mov	r22,r7
  808a08:	ddc00b17 	ldw	r23,44(sp)
  808a0c:	08089100 	call	808910 <_Balloc>
  808a10:	1025883a 	mov	r18,r2
  808a14:	00a00034 	movhi	r2,32768
  808a18:	10bfffc4 	addi	r2,r2,-1
  808a1c:	8888703a 	and	r4,r17,r2
  808a20:	202ad53a 	srli	r21,r4,20
  808a24:	00800434 	movhi	r2,16
  808a28:	10bfffc4 	addi	r2,r2,-1
  808a2c:	8886703a 	and	r3,r17,r2
  808a30:	a829003a 	cmpeq	r20,r21,zero
  808a34:	800b883a 	mov	r5,r16
  808a38:	d8c00115 	stw	r3,4(sp)
  808a3c:	94000504 	addi	r16,r18,20
  808a40:	a000021e 	bne	r20,zero,808a4c <__d2b+0x80>
  808a44:	18c00434 	orhi	r3,r3,16
  808a48:	d8c00115 	stw	r3,4(sp)
  808a4c:	28002726 	beq	r5,zero,808aec <__d2b+0x120>
  808a50:	d809883a 	mov	r4,sp
  808a54:	d9400015 	stw	r5,0(sp)
  808a58:	08084280 	call	808428 <__lo0bits>
  808a5c:	100d883a 	mov	r6,r2
  808a60:	10003526 	beq	r2,zero,808b38 <__d2b+0x16c>
  808a64:	d8c00117 	ldw	r3,4(sp)
  808a68:	00800804 	movi	r2,32
  808a6c:	1185c83a 	sub	r2,r2,r6
  808a70:	d9000017 	ldw	r4,0(sp)
  808a74:	1886983a 	sll	r3,r3,r2
  808a78:	1906b03a 	or	r3,r3,r4
  808a7c:	90c00515 	stw	r3,20(r18)
  808a80:	d8c00117 	ldw	r3,4(sp)
  808a84:	1986d83a 	srl	r3,r3,r6
  808a88:	d8c00115 	stw	r3,4(sp)
  808a8c:	180b003a 	cmpeq	r5,r3,zero
  808a90:	00800084 	movi	r2,2
  808a94:	114bc83a 	sub	r5,r2,r5
  808a98:	80c00115 	stw	r3,4(r16)
  808a9c:	91400415 	stw	r5,16(r18)
  808aa0:	a0001a1e 	bne	r20,zero,808b0c <__d2b+0x140>
  808aa4:	3545883a 	add	r2,r6,r21
  808aa8:	10bef344 	addi	r2,r2,-1075
  808aac:	00c00d44 	movi	r3,53
  808ab0:	b0800015 	stw	r2,0(r22)
  808ab4:	1987c83a 	sub	r3,r3,r6
  808ab8:	b8c00015 	stw	r3,0(r23)
  808abc:	9005883a 	mov	r2,r18
  808ac0:	dfc00a17 	ldw	ra,40(sp)
  808ac4:	ddc00917 	ldw	r23,36(sp)
  808ac8:	dd800817 	ldw	r22,32(sp)
  808acc:	dd400717 	ldw	r21,28(sp)
  808ad0:	dd000617 	ldw	r20,24(sp)
  808ad4:	dcc00517 	ldw	r19,20(sp)
  808ad8:	dc800417 	ldw	r18,16(sp)
  808adc:	dc400317 	ldw	r17,12(sp)
  808ae0:	dc000217 	ldw	r16,8(sp)
  808ae4:	dec00b04 	addi	sp,sp,44
  808ae8:	f800283a 	ret
  808aec:	d9000104 	addi	r4,sp,4
  808af0:	08084280 	call	808428 <__lo0bits>
  808af4:	11800804 	addi	r6,r2,32
  808af8:	d8800117 	ldw	r2,4(sp)
  808afc:	94c00415 	stw	r19,16(r18)
  808b00:	980b883a 	mov	r5,r19
  808b04:	90800515 	stw	r2,20(r18)
  808b08:	a03fe626 	beq	r20,zero,808aa4 <__d2b+0xd8>
  808b0c:	2945883a 	add	r2,r5,r5
  808b10:	1085883a 	add	r2,r2,r2
  808b14:	1405883a 	add	r2,r2,r16
  808b18:	113fff17 	ldw	r4,-4(r2)
  808b1c:	30fef384 	addi	r3,r6,-1074
  808b20:	2820917a 	slli	r16,r5,5
  808b24:	b0c00015 	stw	r3,0(r22)
  808b28:	08083b80 	call	8083b8 <__hi0bits>
  808b2c:	80a1c83a 	sub	r16,r16,r2
  808b30:	bc000015 	stw	r16,0(r23)
  808b34:	003fe106 	br	808abc <__d2b+0xf0>
  808b38:	d8800017 	ldw	r2,0(sp)
  808b3c:	90800515 	stw	r2,20(r18)
  808b40:	d8c00117 	ldw	r3,4(sp)
  808b44:	003fd106 	br	808a8c <__d2b+0xc0>

00808b48 <__mdiff>:
  808b48:	defffb04 	addi	sp,sp,-20
  808b4c:	dc000015 	stw	r16,0(sp)
  808b50:	2821883a 	mov	r16,r5
  808b54:	dc800215 	stw	r18,8(sp)
  808b58:	300b883a 	mov	r5,r6
  808b5c:	2025883a 	mov	r18,r4
  808b60:	8009883a 	mov	r4,r16
  808b64:	dc400115 	stw	r17,4(sp)
  808b68:	dfc00415 	stw	ra,16(sp)
  808b6c:	dcc00315 	stw	r19,12(sp)
  808b70:	3023883a 	mov	r17,r6
  808b74:	08084ec0 	call	8084ec <__mcmp>
  808b78:	10004226 	beq	r2,zero,808c84 <__mdiff+0x13c>
  808b7c:	10005016 	blt	r2,zero,808cc0 <__mdiff+0x178>
  808b80:	0027883a 	mov	r19,zero
  808b84:	81400117 	ldw	r5,4(r16)
  808b88:	9009883a 	mov	r4,r18
  808b8c:	08089100 	call	808910 <_Balloc>
  808b90:	1019883a 	mov	r12,r2
  808b94:	82800417 	ldw	r10,16(r16)
  808b98:	88800417 	ldw	r2,16(r17)
  808b9c:	81800504 	addi	r6,r16,20
  808ba0:	5287883a 	add	r3,r10,r10
  808ba4:	1085883a 	add	r2,r2,r2
  808ba8:	18c7883a 	add	r3,r3,r3
  808bac:	1085883a 	add	r2,r2,r2
  808bb0:	8a000504 	addi	r8,r17,20
  808bb4:	64c00315 	stw	r19,12(r12)
  808bb8:	30db883a 	add	r13,r6,r3
  808bbc:	4097883a 	add	r11,r8,r2
  808bc0:	61c00504 	addi	r7,r12,20
  808bc4:	0013883a 	mov	r9,zero
  808bc8:	31000017 	ldw	r4,0(r6)
  808bcc:	41400017 	ldw	r5,0(r8)
  808bd0:	42000104 	addi	r8,r8,4
  808bd4:	20bfffcc 	andi	r2,r4,65535
  808bd8:	28ffffcc 	andi	r3,r5,65535
  808bdc:	10c5c83a 	sub	r2,r2,r3
  808be0:	1245883a 	add	r2,r2,r9
  808be4:	2008d43a 	srli	r4,r4,16
  808be8:	280ad43a 	srli	r5,r5,16
  808bec:	1007d43a 	srai	r3,r2,16
  808bf0:	3880000d 	sth	r2,0(r7)
  808bf4:	2149c83a 	sub	r4,r4,r5
  808bf8:	20c9883a 	add	r4,r4,r3
  808bfc:	3900008d 	sth	r4,2(r7)
  808c00:	31800104 	addi	r6,r6,4
  808c04:	39c00104 	addi	r7,r7,4
  808c08:	2013d43a 	srai	r9,r4,16
  808c0c:	42ffee36 	bltu	r8,r11,808bc8 <__mdiff+0x80>
  808c10:	33400c2e 	bgeu	r6,r13,808c44 <__mdiff+0xfc>
  808c14:	30800017 	ldw	r2,0(r6)
  808c18:	31800104 	addi	r6,r6,4
  808c1c:	10ffffcc 	andi	r3,r2,65535
  808c20:	1a47883a 	add	r3,r3,r9
  808c24:	1004d43a 	srli	r2,r2,16
  808c28:	1809d43a 	srai	r4,r3,16
  808c2c:	38c0000d 	sth	r3,0(r7)
  808c30:	1105883a 	add	r2,r2,r4
  808c34:	3880008d 	sth	r2,2(r7)
  808c38:	1013d43a 	srai	r9,r2,16
  808c3c:	39c00104 	addi	r7,r7,4
  808c40:	337ff436 	bltu	r6,r13,808c14 <__mdiff+0xcc>
  808c44:	38bfff17 	ldw	r2,-4(r7)
  808c48:	38ffff04 	addi	r3,r7,-4
  808c4c:	1000041e 	bne	r2,zero,808c60 <__mdiff+0x118>
  808c50:	18ffff04 	addi	r3,r3,-4
  808c54:	18800017 	ldw	r2,0(r3)
  808c58:	52bfffc4 	addi	r10,r10,-1
  808c5c:	103ffc26 	beq	r2,zero,808c50 <__mdiff+0x108>
  808c60:	6005883a 	mov	r2,r12
  808c64:	62800415 	stw	r10,16(r12)
  808c68:	dfc00417 	ldw	ra,16(sp)
  808c6c:	dcc00317 	ldw	r19,12(sp)
  808c70:	dc800217 	ldw	r18,8(sp)
  808c74:	dc400117 	ldw	r17,4(sp)
  808c78:	dc000017 	ldw	r16,0(sp)
  808c7c:	dec00504 	addi	sp,sp,20
  808c80:	f800283a 	ret
  808c84:	9009883a 	mov	r4,r18
  808c88:	000b883a 	mov	r5,zero
  808c8c:	08089100 	call	808910 <_Balloc>
  808c90:	1019883a 	mov	r12,r2
  808c94:	00800044 	movi	r2,1
  808c98:	60800415 	stw	r2,16(r12)
  808c9c:	6005883a 	mov	r2,r12
  808ca0:	60000515 	stw	zero,20(r12)
  808ca4:	dfc00417 	ldw	ra,16(sp)
  808ca8:	dcc00317 	ldw	r19,12(sp)
  808cac:	dc800217 	ldw	r18,8(sp)
  808cb0:	dc400117 	ldw	r17,4(sp)
  808cb4:	dc000017 	ldw	r16,0(sp)
  808cb8:	dec00504 	addi	sp,sp,20
  808cbc:	f800283a 	ret
  808cc0:	880d883a 	mov	r6,r17
  808cc4:	04c00044 	movi	r19,1
  808cc8:	8023883a 	mov	r17,r16
  808ccc:	3021883a 	mov	r16,r6
  808cd0:	003fac06 	br	808b84 <__mdiff+0x3c>

00808cd4 <__lshift>:
  808cd4:	defff904 	addi	sp,sp,-28
  808cd8:	28800417 	ldw	r2,16(r5)
  808cdc:	dc000015 	stw	r16,0(sp)
  808ce0:	3021d17a 	srai	r16,r6,5
  808ce4:	28c00217 	ldw	r3,8(r5)
  808ce8:	10800044 	addi	r2,r2,1
  808cec:	dc400115 	stw	r17,4(sp)
  808cf0:	80a3883a 	add	r17,r16,r2
  808cf4:	dd400515 	stw	r21,20(sp)
  808cf8:	dd000415 	stw	r20,16(sp)
  808cfc:	dc800215 	stw	r18,8(sp)
  808d00:	dfc00615 	stw	ra,24(sp)
  808d04:	2825883a 	mov	r18,r5
  808d08:	dcc00315 	stw	r19,12(sp)
  808d0c:	3029883a 	mov	r20,r6
  808d10:	202b883a 	mov	r21,r4
  808d14:	29400117 	ldw	r5,4(r5)
  808d18:	1c40030e 	bge	r3,r17,808d28 <__lshift+0x54>
  808d1c:	18c7883a 	add	r3,r3,r3
  808d20:	29400044 	addi	r5,r5,1
  808d24:	1c7ffd16 	blt	r3,r17,808d1c <__lshift+0x48>
  808d28:	a809883a 	mov	r4,r21
  808d2c:	08089100 	call	808910 <_Balloc>
  808d30:	1027883a 	mov	r19,r2
  808d34:	11400504 	addi	r5,r2,20
  808d38:	0400090e 	bge	zero,r16,808d60 <__lshift+0x8c>
  808d3c:	2805883a 	mov	r2,r5
  808d40:	0007883a 	mov	r3,zero
  808d44:	18c00044 	addi	r3,r3,1
  808d48:	10000015 	stw	zero,0(r2)
  808d4c:	10800104 	addi	r2,r2,4
  808d50:	80fffc1e 	bne	r16,r3,808d44 <__lshift+0x70>
  808d54:	8405883a 	add	r2,r16,r16
  808d58:	1085883a 	add	r2,r2,r2
  808d5c:	288b883a 	add	r5,r5,r2
  808d60:	90800417 	ldw	r2,16(r18)
  808d64:	91000504 	addi	r4,r18,20
  808d68:	a18007cc 	andi	r6,r20,31
  808d6c:	1085883a 	add	r2,r2,r2
  808d70:	1085883a 	add	r2,r2,r2
  808d74:	208f883a 	add	r7,r4,r2
  808d78:	30001e26 	beq	r6,zero,808df4 <__lshift+0x120>
  808d7c:	00800804 	movi	r2,32
  808d80:	1191c83a 	sub	r8,r2,r6
  808d84:	0007883a 	mov	r3,zero
  808d88:	20800017 	ldw	r2,0(r4)
  808d8c:	1184983a 	sll	r2,r2,r6
  808d90:	1884b03a 	or	r2,r3,r2
  808d94:	28800015 	stw	r2,0(r5)
  808d98:	20c00017 	ldw	r3,0(r4)
  808d9c:	21000104 	addi	r4,r4,4
  808da0:	29400104 	addi	r5,r5,4
  808da4:	1a06d83a 	srl	r3,r3,r8
  808da8:	21fff736 	bltu	r4,r7,808d88 <__lshift+0xb4>
  808dac:	28c00015 	stw	r3,0(r5)
  808db0:	18000126 	beq	r3,zero,808db8 <__lshift+0xe4>
  808db4:	8c400044 	addi	r17,r17,1
  808db8:	88bfffc4 	addi	r2,r17,-1
  808dbc:	98800415 	stw	r2,16(r19)
  808dc0:	a809883a 	mov	r4,r21
  808dc4:	900b883a 	mov	r5,r18
  808dc8:	08083900 	call	808390 <_Bfree>
  808dcc:	9805883a 	mov	r2,r19
  808dd0:	dfc00617 	ldw	ra,24(sp)
  808dd4:	dd400517 	ldw	r21,20(sp)
  808dd8:	dd000417 	ldw	r20,16(sp)
  808ddc:	dcc00317 	ldw	r19,12(sp)
  808de0:	dc800217 	ldw	r18,8(sp)
  808de4:	dc400117 	ldw	r17,4(sp)
  808de8:	dc000017 	ldw	r16,0(sp)
  808dec:	dec00704 	addi	sp,sp,28
  808df0:	f800283a 	ret
  808df4:	20800017 	ldw	r2,0(r4)
  808df8:	21000104 	addi	r4,r4,4
  808dfc:	28800015 	stw	r2,0(r5)
  808e00:	29400104 	addi	r5,r5,4
  808e04:	21ffec2e 	bgeu	r4,r7,808db8 <__lshift+0xe4>
  808e08:	20800017 	ldw	r2,0(r4)
  808e0c:	21000104 	addi	r4,r4,4
  808e10:	28800015 	stw	r2,0(r5)
  808e14:	29400104 	addi	r5,r5,4
  808e18:	21fff636 	bltu	r4,r7,808df4 <__lshift+0x120>
  808e1c:	003fe606 	br	808db8 <__lshift+0xe4>

00808e20 <__multiply>:
  808e20:	defff904 	addi	sp,sp,-28
  808e24:	dcc00315 	stw	r19,12(sp)
  808e28:	dc800215 	stw	r18,8(sp)
  808e2c:	2cc00417 	ldw	r19,16(r5)
  808e30:	34800417 	ldw	r18,16(r6)
  808e34:	dd000415 	stw	r20,16(sp)
  808e38:	dc400115 	stw	r17,4(sp)
  808e3c:	dfc00615 	stw	ra,24(sp)
  808e40:	dd400515 	stw	r21,20(sp)
  808e44:	dc000015 	stw	r16,0(sp)
  808e48:	2823883a 	mov	r17,r5
  808e4c:	3029883a 	mov	r20,r6
  808e50:	9c80040e 	bge	r19,r18,808e64 <__multiply+0x44>
  808e54:	9027883a 	mov	r19,r18
  808e58:	2c800417 	ldw	r18,16(r5)
  808e5c:	2829883a 	mov	r20,r5
  808e60:	3023883a 	mov	r17,r6
  808e64:	88800217 	ldw	r2,8(r17)
  808e68:	9ca1883a 	add	r16,r19,r18
  808e6c:	89400117 	ldw	r5,4(r17)
  808e70:	1400010e 	bge	r2,r16,808e78 <__multiply+0x58>
  808e74:	29400044 	addi	r5,r5,1
  808e78:	08089100 	call	808910 <_Balloc>
  808e7c:	102b883a 	mov	r21,r2
  808e80:	8405883a 	add	r2,r16,r16
  808e84:	1085883a 	add	r2,r2,r2
  808e88:	a9000504 	addi	r4,r21,20
  808e8c:	209d883a 	add	r14,r4,r2
  808e90:	2380042e 	bgeu	r4,r14,808ea4 <__multiply+0x84>
  808e94:	2005883a 	mov	r2,r4
  808e98:	10000015 	stw	zero,0(r2)
  808e9c:	10800104 	addi	r2,r2,4
  808ea0:	13bffd36 	bltu	r2,r14,808e98 <__multiply+0x78>
  808ea4:	9485883a 	add	r2,r18,r18
  808ea8:	9cc7883a 	add	r3,r19,r19
  808eac:	a1800504 	addi	r6,r20,20
  808eb0:	1085883a 	add	r2,r2,r2
  808eb4:	8b400504 	addi	r13,r17,20
  808eb8:	18c7883a 	add	r3,r3,r3
  808ebc:	309f883a 	add	r15,r6,r2
  808ec0:	68d7883a 	add	r11,r13,r3
  808ec4:	33c03b2e 	bgeu	r6,r15,808fb4 <__multiply+0x194>
  808ec8:	2019883a 	mov	r12,r4
  808ecc:	30800017 	ldw	r2,0(r6)
  808ed0:	127fffcc 	andi	r9,r2,65535
  808ed4:	48001826 	beq	r9,zero,808f38 <__multiply+0x118>
  808ed8:	6811883a 	mov	r8,r13
  808edc:	600f883a 	mov	r7,r12
  808ee0:	0015883a 	mov	r10,zero
  808ee4:	40c00017 	ldw	r3,0(r8)
  808ee8:	39400017 	ldw	r5,0(r7)
  808eec:	42000104 	addi	r8,r8,4
  808ef0:	193fffcc 	andi	r4,r3,65535
  808ef4:	4909383a 	mul	r4,r9,r4
  808ef8:	1806d43a 	srli	r3,r3,16
  808efc:	28bfffcc 	andi	r2,r5,65535
  808f00:	5085883a 	add	r2,r10,r2
  808f04:	2089883a 	add	r4,r4,r2
  808f08:	48c7383a 	mul	r3,r9,r3
  808f0c:	280ad43a 	srli	r5,r5,16
  808f10:	2004d43a 	srli	r2,r4,16
  808f14:	3900000d 	sth	r4,0(r7)
  808f18:	1947883a 	add	r3,r3,r5
  808f1c:	10c5883a 	add	r2,r2,r3
  808f20:	3880008d 	sth	r2,2(r7)
  808f24:	1014d43a 	srli	r10,r2,16
  808f28:	39c00104 	addi	r7,r7,4
  808f2c:	42ffed36 	bltu	r8,r11,808ee4 <__multiply+0xc4>
  808f30:	3a800015 	stw	r10,0(r7)
  808f34:	30800017 	ldw	r2,0(r6)
  808f38:	1012d43a 	srli	r9,r2,16
  808f3c:	48001926 	beq	r9,zero,808fa4 <__multiply+0x184>
  808f40:	60800017 	ldw	r2,0(r12)
  808f44:	6811883a 	mov	r8,r13
  808f48:	600f883a 	mov	r7,r12
  808f4c:	0015883a 	mov	r10,zero
  808f50:	100b883a 	mov	r5,r2
  808f54:	41000017 	ldw	r4,0(r8)
  808f58:	2806d43a 	srli	r3,r5,16
  808f5c:	3880000d 	sth	r2,0(r7)
  808f60:	20bfffcc 	andi	r2,r4,65535
  808f64:	4885383a 	mul	r2,r9,r2
  808f68:	50c7883a 	add	r3,r10,r3
  808f6c:	2008d43a 	srli	r4,r4,16
  808f70:	10c5883a 	add	r2,r2,r3
  808f74:	3880008d 	sth	r2,2(r7)
  808f78:	39c00104 	addi	r7,r7,4
  808f7c:	39400017 	ldw	r5,0(r7)
  808f80:	4909383a 	mul	r4,r9,r4
  808f84:	1004d43a 	srli	r2,r2,16
  808f88:	28ffffcc 	andi	r3,r5,65535
  808f8c:	20c9883a 	add	r4,r4,r3
  808f90:	1105883a 	add	r2,r2,r4
  808f94:	42000104 	addi	r8,r8,4
  808f98:	1014d43a 	srli	r10,r2,16
  808f9c:	42ffed36 	bltu	r8,r11,808f54 <__multiply+0x134>
  808fa0:	38800015 	stw	r2,0(r7)
  808fa4:	31800104 	addi	r6,r6,4
  808fa8:	33c0022e 	bgeu	r6,r15,808fb4 <__multiply+0x194>
  808fac:	63000104 	addi	r12,r12,4
  808fb0:	003fc606 	br	808ecc <__multiply+0xac>
  808fb4:	0400090e 	bge	zero,r16,808fdc <__multiply+0x1bc>
  808fb8:	70bfff17 	ldw	r2,-4(r14)
  808fbc:	70ffff04 	addi	r3,r14,-4
  808fc0:	10000326 	beq	r2,zero,808fd0 <__multiply+0x1b0>
  808fc4:	00000506 	br	808fdc <__multiply+0x1bc>
  808fc8:	18800017 	ldw	r2,0(r3)
  808fcc:	1000031e 	bne	r2,zero,808fdc <__multiply+0x1bc>
  808fd0:	843fffc4 	addi	r16,r16,-1
  808fd4:	18ffff04 	addi	r3,r3,-4
  808fd8:	803ffb1e 	bne	r16,zero,808fc8 <__multiply+0x1a8>
  808fdc:	a805883a 	mov	r2,r21
  808fe0:	ac000415 	stw	r16,16(r21)
  808fe4:	dfc00617 	ldw	ra,24(sp)
  808fe8:	dd400517 	ldw	r21,20(sp)
  808fec:	dd000417 	ldw	r20,16(sp)
  808ff0:	dcc00317 	ldw	r19,12(sp)
  808ff4:	dc800217 	ldw	r18,8(sp)
  808ff8:	dc400117 	ldw	r17,4(sp)
  808ffc:	dc000017 	ldw	r16,0(sp)
  809000:	dec00704 	addi	sp,sp,28
  809004:	f800283a 	ret

00809008 <__i2b>:
  809008:	defffd04 	addi	sp,sp,-12
  80900c:	dc000015 	stw	r16,0(sp)
  809010:	04000044 	movi	r16,1
  809014:	dc800115 	stw	r18,4(sp)
  809018:	2825883a 	mov	r18,r5
  80901c:	800b883a 	mov	r5,r16
  809020:	dfc00215 	stw	ra,8(sp)
  809024:	08089100 	call	808910 <_Balloc>
  809028:	14000415 	stw	r16,16(r2)
  80902c:	14800515 	stw	r18,20(r2)
  809030:	dfc00217 	ldw	ra,8(sp)
  809034:	dc800117 	ldw	r18,4(sp)
  809038:	dc000017 	ldw	r16,0(sp)
  80903c:	dec00304 	addi	sp,sp,12
  809040:	f800283a 	ret

00809044 <__multadd>:
  809044:	defffa04 	addi	sp,sp,-24
  809048:	dc800215 	stw	r18,8(sp)
  80904c:	2c800417 	ldw	r18,16(r5)
  809050:	dd000415 	stw	r20,16(sp)
  809054:	dcc00315 	stw	r19,12(sp)
  809058:	dc000015 	stw	r16,0(sp)
  80905c:	dfc00515 	stw	ra,20(sp)
  809060:	3821883a 	mov	r16,r7
  809064:	dc400115 	stw	r17,4(sp)
  809068:	2827883a 	mov	r19,r5
  80906c:	2029883a 	mov	r20,r4
  809070:	2a000504 	addi	r8,r5,20
  809074:	000f883a 	mov	r7,zero
  809078:	40800017 	ldw	r2,0(r8)
  80907c:	39c00044 	addi	r7,r7,1
  809080:	10ffffcc 	andi	r3,r2,65535
  809084:	1987383a 	mul	r3,r3,r6
  809088:	1004d43a 	srli	r2,r2,16
  80908c:	1c07883a 	add	r3,r3,r16
  809090:	180ad43a 	srli	r5,r3,16
  809094:	1185383a 	mul	r2,r2,r6
  809098:	18ffffcc 	andi	r3,r3,65535
  80909c:	1145883a 	add	r2,r2,r5
  8090a0:	1008943a 	slli	r4,r2,16
  8090a4:	1020d43a 	srli	r16,r2,16
  8090a8:	20c9883a 	add	r4,r4,r3
  8090ac:	41000015 	stw	r4,0(r8)
  8090b0:	42000104 	addi	r8,r8,4
  8090b4:	3cbff016 	blt	r7,r18,809078 <__multadd+0x34>
  8090b8:	80000826 	beq	r16,zero,8090dc <__multadd+0x98>
  8090bc:	98800217 	ldw	r2,8(r19)
  8090c0:	90800f0e 	bge	r18,r2,809100 <__multadd+0xbc>
  8090c4:	9485883a 	add	r2,r18,r18
  8090c8:	1085883a 	add	r2,r2,r2
  8090cc:	14c5883a 	add	r2,r2,r19
  8090d0:	90c00044 	addi	r3,r18,1
  8090d4:	14000515 	stw	r16,20(r2)
  8090d8:	98c00415 	stw	r3,16(r19)
  8090dc:	9805883a 	mov	r2,r19
  8090e0:	dfc00517 	ldw	ra,20(sp)
  8090e4:	dd000417 	ldw	r20,16(sp)
  8090e8:	dcc00317 	ldw	r19,12(sp)
  8090ec:	dc800217 	ldw	r18,8(sp)
  8090f0:	dc400117 	ldw	r17,4(sp)
  8090f4:	dc000017 	ldw	r16,0(sp)
  8090f8:	dec00604 	addi	sp,sp,24
  8090fc:	f800283a 	ret
  809100:	99400117 	ldw	r5,4(r19)
  809104:	a009883a 	mov	r4,r20
  809108:	29400044 	addi	r5,r5,1
  80910c:	08089100 	call	808910 <_Balloc>
  809110:	99800417 	ldw	r6,16(r19)
  809114:	99400304 	addi	r5,r19,12
  809118:	11000304 	addi	r4,r2,12
  80911c:	318d883a 	add	r6,r6,r6
  809120:	318d883a 	add	r6,r6,r6
  809124:	31800204 	addi	r6,r6,8
  809128:	1023883a 	mov	r17,r2
  80912c:	0802de40 	call	802de4 <memcpy>
  809130:	980b883a 	mov	r5,r19
  809134:	a009883a 	mov	r4,r20
  809138:	08083900 	call	808390 <_Bfree>
  80913c:	8827883a 	mov	r19,r17
  809140:	003fe006 	br	8090c4 <__multadd+0x80>

00809144 <__pow5mult>:
  809144:	defffa04 	addi	sp,sp,-24
  809148:	308000cc 	andi	r2,r6,3
  80914c:	dd000415 	stw	r20,16(sp)
  809150:	dcc00315 	stw	r19,12(sp)
  809154:	dc000015 	stw	r16,0(sp)
  809158:	dfc00515 	stw	ra,20(sp)
  80915c:	dc800215 	stw	r18,8(sp)
  809160:	dc400115 	stw	r17,4(sp)
  809164:	3021883a 	mov	r16,r6
  809168:	2027883a 	mov	r19,r4
  80916c:	2829883a 	mov	r20,r5
  809170:	10002b1e 	bne	r2,zero,809220 <__pow5mult+0xdc>
  809174:	8025d0ba 	srai	r18,r16,2
  809178:	90001b26 	beq	r18,zero,8091e8 <__pow5mult+0xa4>
  80917c:	9c001217 	ldw	r16,72(r19)
  809180:	8000081e 	bne	r16,zero,8091a4 <__pow5mult+0x60>
  809184:	00003006 	br	809248 <__pow5mult+0x104>
  809188:	800b883a 	mov	r5,r16
  80918c:	800d883a 	mov	r6,r16
  809190:	9809883a 	mov	r4,r19
  809194:	90001426 	beq	r18,zero,8091e8 <__pow5mult+0xa4>
  809198:	80800017 	ldw	r2,0(r16)
  80919c:	10001b26 	beq	r2,zero,80920c <__pow5mult+0xc8>
  8091a0:	1021883a 	mov	r16,r2
  8091a4:	9080004c 	andi	r2,r18,1
  8091a8:	1005003a 	cmpeq	r2,r2,zero
  8091ac:	9025d07a 	srai	r18,r18,1
  8091b0:	800d883a 	mov	r6,r16
  8091b4:	9809883a 	mov	r4,r19
  8091b8:	a00b883a 	mov	r5,r20
  8091bc:	103ff21e 	bne	r2,zero,809188 <__pow5mult+0x44>
  8091c0:	0808e200 	call	808e20 <__multiply>
  8091c4:	a00b883a 	mov	r5,r20
  8091c8:	9809883a 	mov	r4,r19
  8091cc:	1023883a 	mov	r17,r2
  8091d0:	08083900 	call	808390 <_Bfree>
  8091d4:	8829883a 	mov	r20,r17
  8091d8:	800b883a 	mov	r5,r16
  8091dc:	800d883a 	mov	r6,r16
  8091e0:	9809883a 	mov	r4,r19
  8091e4:	903fec1e 	bne	r18,zero,809198 <__pow5mult+0x54>
  8091e8:	a005883a 	mov	r2,r20
  8091ec:	dfc00517 	ldw	ra,20(sp)
  8091f0:	dd000417 	ldw	r20,16(sp)
  8091f4:	dcc00317 	ldw	r19,12(sp)
  8091f8:	dc800217 	ldw	r18,8(sp)
  8091fc:	dc400117 	ldw	r17,4(sp)
  809200:	dc000017 	ldw	r16,0(sp)
  809204:	dec00604 	addi	sp,sp,24
  809208:	f800283a 	ret
  80920c:	0808e200 	call	808e20 <__multiply>
  809210:	80800015 	stw	r2,0(r16)
  809214:	1021883a 	mov	r16,r2
  809218:	10000015 	stw	zero,0(r2)
  80921c:	003fe106 	br	8091a4 <__pow5mult+0x60>
  809220:	1085883a 	add	r2,r2,r2
  809224:	00c02074 	movhi	r3,129
  809228:	18c08e04 	addi	r3,r3,568
  80922c:	1085883a 	add	r2,r2,r2
  809230:	10c5883a 	add	r2,r2,r3
  809234:	11bfff17 	ldw	r6,-4(r2)
  809238:	000f883a 	mov	r7,zero
  80923c:	08090440 	call	809044 <__multadd>
  809240:	1029883a 	mov	r20,r2
  809244:	003fcb06 	br	809174 <__pow5mult+0x30>
  809248:	9809883a 	mov	r4,r19
  80924c:	01409c44 	movi	r5,625
  809250:	08090080 	call	809008 <__i2b>
  809254:	98801215 	stw	r2,72(r19)
  809258:	1021883a 	mov	r16,r2
  80925c:	10000015 	stw	zero,0(r2)
  809260:	003fd006 	br	8091a4 <__pow5mult+0x60>

00809264 <__s2b>:
  809264:	defff904 	addi	sp,sp,-28
  809268:	dcc00315 	stw	r19,12(sp)
  80926c:	dc800215 	stw	r18,8(sp)
  809270:	2827883a 	mov	r19,r5
  809274:	2025883a 	mov	r18,r4
  809278:	01400244 	movi	r5,9
  80927c:	39000204 	addi	r4,r7,8
  809280:	dd000415 	stw	r20,16(sp)
  809284:	dc400115 	stw	r17,4(sp)
  809288:	dfc00615 	stw	ra,24(sp)
  80928c:	dd400515 	stw	r21,20(sp)
  809290:	dc000015 	stw	r16,0(sp)
  809294:	3829883a 	mov	r20,r7
  809298:	3023883a 	mov	r17,r6
  80929c:	08025ac0 	call	8025ac <__divsi3>
  8092a0:	00c00044 	movi	r3,1
  8092a4:	1880350e 	bge	r3,r2,80937c <__s2b+0x118>
  8092a8:	000b883a 	mov	r5,zero
  8092ac:	18c7883a 	add	r3,r3,r3
  8092b0:	29400044 	addi	r5,r5,1
  8092b4:	18bffd16 	blt	r3,r2,8092ac <__s2b+0x48>
  8092b8:	9009883a 	mov	r4,r18
  8092bc:	08089100 	call	808910 <_Balloc>
  8092c0:	1011883a 	mov	r8,r2
  8092c4:	d8800717 	ldw	r2,28(sp)
  8092c8:	00c00044 	movi	r3,1
  8092cc:	01800244 	movi	r6,9
  8092d0:	40800515 	stw	r2,20(r8)
  8092d4:	40c00415 	stw	r3,16(r8)
  8092d8:	3440260e 	bge	r6,r17,809374 <__s2b+0x110>
  8092dc:	3021883a 	mov	r16,r6
  8092e0:	99ab883a 	add	r21,r19,r6
  8092e4:	9c05883a 	add	r2,r19,r16
  8092e8:	11c00007 	ldb	r7,0(r2)
  8092ec:	400b883a 	mov	r5,r8
  8092f0:	9009883a 	mov	r4,r18
  8092f4:	39fff404 	addi	r7,r7,-48
  8092f8:	01800284 	movi	r6,10
  8092fc:	08090440 	call	809044 <__multadd>
  809300:	84000044 	addi	r16,r16,1
  809304:	1011883a 	mov	r8,r2
  809308:	8c3ff61e 	bne	r17,r16,8092e4 <__s2b+0x80>
  80930c:	ac45883a 	add	r2,r21,r17
  809310:	117ffe04 	addi	r5,r2,-8
  809314:	880d883a 	mov	r6,r17
  809318:	35000c0e 	bge	r6,r20,80934c <__s2b+0xe8>
  80931c:	a185c83a 	sub	r2,r20,r6
  809320:	2821883a 	mov	r16,r5
  809324:	28a3883a 	add	r17,r5,r2
  809328:	81c00007 	ldb	r7,0(r16)
  80932c:	400b883a 	mov	r5,r8
  809330:	9009883a 	mov	r4,r18
  809334:	39fff404 	addi	r7,r7,-48
  809338:	01800284 	movi	r6,10
  80933c:	08090440 	call	809044 <__multadd>
  809340:	84000044 	addi	r16,r16,1
  809344:	1011883a 	mov	r8,r2
  809348:	847ff71e 	bne	r16,r17,809328 <__s2b+0xc4>
  80934c:	4005883a 	mov	r2,r8
  809350:	dfc00617 	ldw	ra,24(sp)
  809354:	dd400517 	ldw	r21,20(sp)
  809358:	dd000417 	ldw	r20,16(sp)
  80935c:	dcc00317 	ldw	r19,12(sp)
  809360:	dc800217 	ldw	r18,8(sp)
  809364:	dc400117 	ldw	r17,4(sp)
  809368:	dc000017 	ldw	r16,0(sp)
  80936c:	dec00704 	addi	sp,sp,28
  809370:	f800283a 	ret
  809374:	99400284 	addi	r5,r19,10
  809378:	003fe706 	br	809318 <__s2b+0xb4>
  80937c:	000b883a 	mov	r5,zero
  809380:	003fcd06 	br	8092b8 <__s2b+0x54>

00809384 <__isinfd>:
  809384:	200d883a 	mov	r6,r4
  809388:	0109c83a 	sub	r4,zero,r4
  80938c:	2188b03a 	or	r4,r4,r6
  809390:	2008d7fa 	srli	r4,r4,31
  809394:	00a00034 	movhi	r2,32768
  809398:	10bfffc4 	addi	r2,r2,-1
  80939c:	1144703a 	and	r2,r2,r5
  8093a0:	2088b03a 	or	r4,r4,r2
  8093a4:	009ffc34 	movhi	r2,32752
  8093a8:	1105c83a 	sub	r2,r2,r4
  8093ac:	0087c83a 	sub	r3,zero,r2
  8093b0:	10c4b03a 	or	r2,r2,r3
  8093b4:	1004d7fa 	srli	r2,r2,31
  8093b8:	00c00044 	movi	r3,1
  8093bc:	1885c83a 	sub	r2,r3,r2
  8093c0:	f800283a 	ret

008093c4 <__isnand>:
  8093c4:	200d883a 	mov	r6,r4
  8093c8:	0109c83a 	sub	r4,zero,r4
  8093cc:	2188b03a 	or	r4,r4,r6
  8093d0:	2008d7fa 	srli	r4,r4,31
  8093d4:	00a00034 	movhi	r2,32768
  8093d8:	10bfffc4 	addi	r2,r2,-1
  8093dc:	1144703a 	and	r2,r2,r5
  8093e0:	2088b03a 	or	r4,r4,r2
  8093e4:	009ffc34 	movhi	r2,32752
  8093e8:	1105c83a 	sub	r2,r2,r4
  8093ec:	1004d7fa 	srli	r2,r2,31
  8093f0:	f800283a 	ret

008093f4 <__sclose>:
  8093f4:	2940038f 	ldh	r5,14(r5)
  8093f8:	08097281 	jmpi	809728 <_close_r>

008093fc <__sseek>:
  8093fc:	defffe04 	addi	sp,sp,-8
  809400:	dc000015 	stw	r16,0(sp)
  809404:	2821883a 	mov	r16,r5
  809408:	2940038f 	ldh	r5,14(r5)
  80940c:	dfc00115 	stw	ra,4(sp)
  809410:	08099a00 	call	8099a0 <_lseek_r>
  809414:	1007883a 	mov	r3,r2
  809418:	00bfffc4 	movi	r2,-1
  80941c:	18800926 	beq	r3,r2,809444 <__sseek+0x48>
  809420:	8080030b 	ldhu	r2,12(r16)
  809424:	80c01415 	stw	r3,80(r16)
  809428:	10840014 	ori	r2,r2,4096
  80942c:	8080030d 	sth	r2,12(r16)
  809430:	1805883a 	mov	r2,r3
  809434:	dfc00117 	ldw	ra,4(sp)
  809438:	dc000017 	ldw	r16,0(sp)
  80943c:	dec00204 	addi	sp,sp,8
  809440:	f800283a 	ret
  809444:	8080030b 	ldhu	r2,12(r16)
  809448:	10bbffcc 	andi	r2,r2,61439
  80944c:	8080030d 	sth	r2,12(r16)
  809450:	1805883a 	mov	r2,r3
  809454:	dfc00117 	ldw	ra,4(sp)
  809458:	dc000017 	ldw	r16,0(sp)
  80945c:	dec00204 	addi	sp,sp,8
  809460:	f800283a 	ret

00809464 <__swrite>:
  809464:	2880030b 	ldhu	r2,12(r5)
  809468:	defffb04 	addi	sp,sp,-20
  80946c:	dcc00315 	stw	r19,12(sp)
  809470:	1080400c 	andi	r2,r2,256
  809474:	dc800215 	stw	r18,8(sp)
  809478:	dc400115 	stw	r17,4(sp)
  80947c:	dc000015 	stw	r16,0(sp)
  809480:	3027883a 	mov	r19,r6
  809484:	3825883a 	mov	r18,r7
  809488:	dfc00415 	stw	ra,16(sp)
  80948c:	2821883a 	mov	r16,r5
  809490:	000d883a 	mov	r6,zero
  809494:	01c00084 	movi	r7,2
  809498:	2023883a 	mov	r17,r4
  80949c:	10000226 	beq	r2,zero,8094a8 <__swrite+0x44>
  8094a0:	2940038f 	ldh	r5,14(r5)
  8094a4:	08099a00 	call	8099a0 <_lseek_r>
  8094a8:	8080030b 	ldhu	r2,12(r16)
  8094ac:	8140038f 	ldh	r5,14(r16)
  8094b0:	8809883a 	mov	r4,r17
  8094b4:	10bbffcc 	andi	r2,r2,61439
  8094b8:	980d883a 	mov	r6,r19
  8094bc:	900f883a 	mov	r7,r18
  8094c0:	8080030d 	sth	r2,12(r16)
  8094c4:	dfc00417 	ldw	ra,16(sp)
  8094c8:	dcc00317 	ldw	r19,12(sp)
  8094cc:	dc800217 	ldw	r18,8(sp)
  8094d0:	dc400117 	ldw	r17,4(sp)
  8094d4:	dc000017 	ldw	r16,0(sp)
  8094d8:	dec00504 	addi	sp,sp,20
  8094dc:	08095fc1 	jmpi	8095fc <_write_r>

008094e0 <__sread>:
  8094e0:	defffe04 	addi	sp,sp,-8
  8094e4:	dc000015 	stw	r16,0(sp)
  8094e8:	2821883a 	mov	r16,r5
  8094ec:	2940038f 	ldh	r5,14(r5)
  8094f0:	dfc00115 	stw	ra,4(sp)
  8094f4:	0809a180 	call	809a18 <_read_r>
  8094f8:	1007883a 	mov	r3,r2
  8094fc:	10000816 	blt	r2,zero,809520 <__sread+0x40>
  809500:	80801417 	ldw	r2,80(r16)
  809504:	10c5883a 	add	r2,r2,r3
  809508:	80801415 	stw	r2,80(r16)
  80950c:	1805883a 	mov	r2,r3
  809510:	dfc00117 	ldw	ra,4(sp)
  809514:	dc000017 	ldw	r16,0(sp)
  809518:	dec00204 	addi	sp,sp,8
  80951c:	f800283a 	ret
  809520:	8080030b 	ldhu	r2,12(r16)
  809524:	10bbffcc 	andi	r2,r2,61439
  809528:	8080030d 	sth	r2,12(r16)
  80952c:	1805883a 	mov	r2,r3
  809530:	dfc00117 	ldw	ra,4(sp)
  809534:	dc000017 	ldw	r16,0(sp)
  809538:	dec00204 	addi	sp,sp,8
  80953c:	f800283a 	ret

00809540 <strcmp>:
  809540:	2144b03a 	or	r2,r4,r5
  809544:	108000cc 	andi	r2,r2,3
  809548:	10001d1e 	bne	r2,zero,8095c0 <strcmp+0x80>
  80954c:	200f883a 	mov	r7,r4
  809550:	28800017 	ldw	r2,0(r5)
  809554:	21000017 	ldw	r4,0(r4)
  809558:	280d883a 	mov	r6,r5
  80955c:	2080161e 	bne	r4,r2,8095b8 <strcmp+0x78>
  809560:	023fbff4 	movhi	r8,65279
  809564:	423fbfc4 	addi	r8,r8,-257
  809568:	2207883a 	add	r3,r4,r8
  80956c:	01602074 	movhi	r5,32897
  809570:	29602004 	addi	r5,r5,-32640
  809574:	1946703a 	and	r3,r3,r5
  809578:	0104303a 	nor	r2,zero,r4
  80957c:	10c4703a 	and	r2,r2,r3
  809580:	10001c1e 	bne	r2,zero,8095f4 <strcmp+0xb4>
  809584:	4013883a 	mov	r9,r8
  809588:	2811883a 	mov	r8,r5
  80958c:	00000106 	br	809594 <strcmp+0x54>
  809590:	1800181e 	bne	r3,zero,8095f4 <strcmp+0xb4>
  809594:	39c00104 	addi	r7,r7,4
  809598:	39000017 	ldw	r4,0(r7)
  80959c:	31800104 	addi	r6,r6,4
  8095a0:	31400017 	ldw	r5,0(r6)
  8095a4:	2245883a 	add	r2,r4,r9
  8095a8:	1204703a 	and	r2,r2,r8
  8095ac:	0106303a 	nor	r3,zero,r4
  8095b0:	1886703a 	and	r3,r3,r2
  8095b4:	217ff626 	beq	r4,r5,809590 <strcmp+0x50>
  8095b8:	3809883a 	mov	r4,r7
  8095bc:	300b883a 	mov	r5,r6
  8095c0:	20c00007 	ldb	r3,0(r4)
  8095c4:	1800051e 	bne	r3,zero,8095dc <strcmp+0x9c>
  8095c8:	00000606 	br	8095e4 <strcmp+0xa4>
  8095cc:	21000044 	addi	r4,r4,1
  8095d0:	20c00007 	ldb	r3,0(r4)
  8095d4:	29400044 	addi	r5,r5,1
  8095d8:	18000226 	beq	r3,zero,8095e4 <strcmp+0xa4>
  8095dc:	28800007 	ldb	r2,0(r5)
  8095e0:	18bffa26 	beq	r3,r2,8095cc <strcmp+0x8c>
  8095e4:	20c00003 	ldbu	r3,0(r4)
  8095e8:	28800003 	ldbu	r2,0(r5)
  8095ec:	1885c83a 	sub	r2,r3,r2
  8095f0:	f800283a 	ret
  8095f4:	0005883a 	mov	r2,zero
  8095f8:	f800283a 	ret

008095fc <_write_r>:
  8095fc:	defffd04 	addi	sp,sp,-12
  809600:	dc000015 	stw	r16,0(sp)
  809604:	04002074 	movhi	r16,129
  809608:	840f2504 	addi	r16,r16,15508
  80960c:	dc400115 	stw	r17,4(sp)
  809610:	80000015 	stw	zero,0(r16)
  809614:	2023883a 	mov	r17,r4
  809618:	2809883a 	mov	r4,r5
  80961c:	300b883a 	mov	r5,r6
  809620:	380d883a 	mov	r6,r7
  809624:	dfc00215 	stw	ra,8(sp)
  809628:	080c9cc0 	call	80c9cc <write>
  80962c:	1007883a 	mov	r3,r2
  809630:	00bfffc4 	movi	r2,-1
  809634:	18800626 	beq	r3,r2,809650 <_write_r+0x54>
  809638:	1805883a 	mov	r2,r3
  80963c:	dfc00217 	ldw	ra,8(sp)
  809640:	dc400117 	ldw	r17,4(sp)
  809644:	dc000017 	ldw	r16,0(sp)
  809648:	dec00304 	addi	sp,sp,12
  80964c:	f800283a 	ret
  809650:	80800017 	ldw	r2,0(r16)
  809654:	103ff826 	beq	r2,zero,809638 <_write_r+0x3c>
  809658:	88800015 	stw	r2,0(r17)
  80965c:	1805883a 	mov	r2,r3
  809660:	dfc00217 	ldw	ra,8(sp)
  809664:	dc400117 	ldw	r17,4(sp)
  809668:	dc000017 	ldw	r16,0(sp)
  80966c:	dec00304 	addi	sp,sp,12
  809670:	f800283a 	ret

00809674 <_calloc_r>:
  809674:	298b383a 	mul	r5,r5,r6
  809678:	defffe04 	addi	sp,sp,-8
  80967c:	dc000015 	stw	r16,0(sp)
  809680:	dfc00115 	stw	ra,4(sp)
  809684:	08026a40 	call	8026a4 <_malloc_r>
  809688:	1021883a 	mov	r16,r2
  80968c:	01c00904 	movi	r7,36
  809690:	10000d26 	beq	r2,zero,8096c8 <_calloc_r+0x54>
  809694:	10ffff17 	ldw	r3,-4(r2)
  809698:	1009883a 	mov	r4,r2
  80969c:	00bfff04 	movi	r2,-4
  8096a0:	1886703a 	and	r3,r3,r2
  8096a4:	1887883a 	add	r3,r3,r2
  8096a8:	180d883a 	mov	r6,r3
  8096ac:	000b883a 	mov	r5,zero
  8096b0:	38c01736 	bltu	r7,r3,809710 <_calloc_r+0x9c>
  8096b4:	008004c4 	movi	r2,19
  8096b8:	10c00836 	bltu	r2,r3,8096dc <_calloc_r+0x68>
  8096bc:	20000215 	stw	zero,8(r4)
  8096c0:	20000015 	stw	zero,0(r4)
  8096c4:	20000115 	stw	zero,4(r4)
  8096c8:	8005883a 	mov	r2,r16
  8096cc:	dfc00117 	ldw	ra,4(sp)
  8096d0:	dc000017 	ldw	r16,0(sp)
  8096d4:	dec00204 	addi	sp,sp,8
  8096d8:	f800283a 	ret
  8096dc:	008006c4 	movi	r2,27
  8096e0:	80000015 	stw	zero,0(r16)
  8096e4:	80000115 	stw	zero,4(r16)
  8096e8:	81000204 	addi	r4,r16,8
  8096ec:	10fff32e 	bgeu	r2,r3,8096bc <_calloc_r+0x48>
  8096f0:	80000215 	stw	zero,8(r16)
  8096f4:	80000315 	stw	zero,12(r16)
  8096f8:	81000404 	addi	r4,r16,16
  8096fc:	19ffef1e 	bne	r3,r7,8096bc <_calloc_r+0x48>
  809700:	81000604 	addi	r4,r16,24
  809704:	80000415 	stw	zero,16(r16)
  809708:	80000515 	stw	zero,20(r16)
  80970c:	003feb06 	br	8096bc <_calloc_r+0x48>
  809710:	08082f80 	call	8082f8 <memset>
  809714:	8005883a 	mov	r2,r16
  809718:	dfc00117 	ldw	ra,4(sp)
  80971c:	dc000017 	ldw	r16,0(sp)
  809720:	dec00204 	addi	sp,sp,8
  809724:	f800283a 	ret

00809728 <_close_r>:
  809728:	defffd04 	addi	sp,sp,-12
  80972c:	dc000015 	stw	r16,0(sp)
  809730:	04002074 	movhi	r16,129
  809734:	840f2504 	addi	r16,r16,15508
  809738:	dc400115 	stw	r17,4(sp)
  80973c:	80000015 	stw	zero,0(r16)
  809740:	2023883a 	mov	r17,r4
  809744:	2809883a 	mov	r4,r5
  809748:	dfc00215 	stw	ra,8(sp)
  80974c:	080bec80 	call	80bec8 <close>
  809750:	1007883a 	mov	r3,r2
  809754:	00bfffc4 	movi	r2,-1
  809758:	18800626 	beq	r3,r2,809774 <_close_r+0x4c>
  80975c:	1805883a 	mov	r2,r3
  809760:	dfc00217 	ldw	ra,8(sp)
  809764:	dc400117 	ldw	r17,4(sp)
  809768:	dc000017 	ldw	r16,0(sp)
  80976c:	dec00304 	addi	sp,sp,12
  809770:	f800283a 	ret
  809774:	80800017 	ldw	r2,0(r16)
  809778:	103ff826 	beq	r2,zero,80975c <_close_r+0x34>
  80977c:	88800015 	stw	r2,0(r17)
  809780:	1805883a 	mov	r2,r3
  809784:	dfc00217 	ldw	ra,8(sp)
  809788:	dc400117 	ldw	r17,4(sp)
  80978c:	dc000017 	ldw	r16,0(sp)
  809790:	dec00304 	addi	sp,sp,12
  809794:	f800283a 	ret

00809798 <_fclose_r>:
  809798:	defffc04 	addi	sp,sp,-16
  80979c:	dc400115 	stw	r17,4(sp)
  8097a0:	dc000015 	stw	r16,0(sp)
  8097a4:	dfc00315 	stw	ra,12(sp)
  8097a8:	dc800215 	stw	r18,8(sp)
  8097ac:	2821883a 	mov	r16,r5
  8097b0:	2023883a 	mov	r17,r4
  8097b4:	28002926 	beq	r5,zero,80985c <_fclose_r+0xc4>
  8097b8:	08072180 	call	807218 <__sfp_lock_acquire>
  8097bc:	88000226 	beq	r17,zero,8097c8 <_fclose_r+0x30>
  8097c0:	88800e17 	ldw	r2,56(r17)
  8097c4:	10002d26 	beq	r2,zero,80987c <_fclose_r+0xe4>
  8097c8:	8080030f 	ldh	r2,12(r16)
  8097cc:	10002226 	beq	r2,zero,809858 <_fclose_r+0xc0>
  8097d0:	8809883a 	mov	r4,r17
  8097d4:	800b883a 	mov	r5,r16
  8097d8:	0806f900 	call	806f90 <_fflush_r>
  8097dc:	1025883a 	mov	r18,r2
  8097e0:	80800b17 	ldw	r2,44(r16)
  8097e4:	10000426 	beq	r2,zero,8097f8 <_fclose_r+0x60>
  8097e8:	81400717 	ldw	r5,28(r16)
  8097ec:	8809883a 	mov	r4,r17
  8097f0:	103ee83a 	callr	r2
  8097f4:	10002a16 	blt	r2,zero,8098a0 <_fclose_r+0x108>
  8097f8:	8080030b 	ldhu	r2,12(r16)
  8097fc:	1080200c 	andi	r2,r2,128
  809800:	1000231e 	bne	r2,zero,809890 <_fclose_r+0xf8>
  809804:	81400c17 	ldw	r5,48(r16)
  809808:	28000526 	beq	r5,zero,809820 <_fclose_r+0x88>
  80980c:	80801004 	addi	r2,r16,64
  809810:	28800226 	beq	r5,r2,80981c <_fclose_r+0x84>
  809814:	8809883a 	mov	r4,r17
  809818:	08075ac0 	call	8075ac <_free_r>
  80981c:	80000c15 	stw	zero,48(r16)
  809820:	81401117 	ldw	r5,68(r16)
  809824:	28000326 	beq	r5,zero,809834 <_fclose_r+0x9c>
  809828:	8809883a 	mov	r4,r17
  80982c:	08075ac0 	call	8075ac <_free_r>
  809830:	80001115 	stw	zero,68(r16)
  809834:	8000030d 	sth	zero,12(r16)
  809838:	080721c0 	call	80721c <__sfp_lock_release>
  80983c:	9005883a 	mov	r2,r18
  809840:	dfc00317 	ldw	ra,12(sp)
  809844:	dc800217 	ldw	r18,8(sp)
  809848:	dc400117 	ldw	r17,4(sp)
  80984c:	dc000017 	ldw	r16,0(sp)
  809850:	dec00404 	addi	sp,sp,16
  809854:	f800283a 	ret
  809858:	080721c0 	call	80721c <__sfp_lock_release>
  80985c:	0025883a 	mov	r18,zero
  809860:	9005883a 	mov	r2,r18
  809864:	dfc00317 	ldw	ra,12(sp)
  809868:	dc800217 	ldw	r18,8(sp)
  80986c:	dc400117 	ldw	r17,4(sp)
  809870:	dc000017 	ldw	r16,0(sp)
  809874:	dec00404 	addi	sp,sp,16
  809878:	f800283a 	ret
  80987c:	8809883a 	mov	r4,r17
  809880:	08072280 	call	807228 <__sinit>
  809884:	8080030f 	ldh	r2,12(r16)
  809888:	103fd11e 	bne	r2,zero,8097d0 <_fclose_r+0x38>
  80988c:	003ff206 	br	809858 <_fclose_r+0xc0>
  809890:	81400417 	ldw	r5,16(r16)
  809894:	8809883a 	mov	r4,r17
  809898:	08075ac0 	call	8075ac <_free_r>
  80989c:	003fd906 	br	809804 <_fclose_r+0x6c>
  8098a0:	04bfffc4 	movi	r18,-1
  8098a4:	003fd406 	br	8097f8 <_fclose_r+0x60>

008098a8 <fclose>:
  8098a8:	00802074 	movhi	r2,129
  8098ac:	10880c04 	addi	r2,r2,8240
  8098b0:	200b883a 	mov	r5,r4
  8098b4:	11000017 	ldw	r4,0(r2)
  8098b8:	08097981 	jmpi	809798 <_fclose_r>

008098bc <_fstat_r>:
  8098bc:	defffd04 	addi	sp,sp,-12
  8098c0:	dc000015 	stw	r16,0(sp)
  8098c4:	04002074 	movhi	r16,129
  8098c8:	840f2504 	addi	r16,r16,15508
  8098cc:	dc400115 	stw	r17,4(sp)
  8098d0:	80000015 	stw	zero,0(r16)
  8098d4:	2023883a 	mov	r17,r4
  8098d8:	2809883a 	mov	r4,r5
  8098dc:	300b883a 	mov	r5,r6
  8098e0:	dfc00215 	stw	ra,8(sp)
  8098e4:	080c0500 	call	80c050 <fstat>
  8098e8:	1007883a 	mov	r3,r2
  8098ec:	00bfffc4 	movi	r2,-1
  8098f0:	18800626 	beq	r3,r2,80990c <_fstat_r+0x50>
  8098f4:	1805883a 	mov	r2,r3
  8098f8:	dfc00217 	ldw	ra,8(sp)
  8098fc:	dc400117 	ldw	r17,4(sp)
  809900:	dc000017 	ldw	r16,0(sp)
  809904:	dec00304 	addi	sp,sp,12
  809908:	f800283a 	ret
  80990c:	80800017 	ldw	r2,0(r16)
  809910:	103ff826 	beq	r2,zero,8098f4 <_fstat_r+0x38>
  809914:	88800015 	stw	r2,0(r17)
  809918:	1805883a 	mov	r2,r3
  80991c:	dfc00217 	ldw	ra,8(sp)
  809920:	dc400117 	ldw	r17,4(sp)
  809924:	dc000017 	ldw	r16,0(sp)
  809928:	dec00304 	addi	sp,sp,12
  80992c:	f800283a 	ret

00809930 <_isatty_r>:
  809930:	defffd04 	addi	sp,sp,-12
  809934:	dc000015 	stw	r16,0(sp)
  809938:	04002074 	movhi	r16,129
  80993c:	840f2504 	addi	r16,r16,15508
  809940:	dc400115 	stw	r17,4(sp)
  809944:	80000015 	stw	zero,0(r16)
  809948:	2023883a 	mov	r17,r4
  80994c:	2809883a 	mov	r4,r5
  809950:	dfc00215 	stw	ra,8(sp)
  809954:	080c1840 	call	80c184 <isatty>
  809958:	1007883a 	mov	r3,r2
  80995c:	00bfffc4 	movi	r2,-1
  809960:	18800626 	beq	r3,r2,80997c <_isatty_r+0x4c>
  809964:	1805883a 	mov	r2,r3
  809968:	dfc00217 	ldw	ra,8(sp)
  80996c:	dc400117 	ldw	r17,4(sp)
  809970:	dc000017 	ldw	r16,0(sp)
  809974:	dec00304 	addi	sp,sp,12
  809978:	f800283a 	ret
  80997c:	80800017 	ldw	r2,0(r16)
  809980:	103ff826 	beq	r2,zero,809964 <_isatty_r+0x34>
  809984:	88800015 	stw	r2,0(r17)
  809988:	1805883a 	mov	r2,r3
  80998c:	dfc00217 	ldw	ra,8(sp)
  809990:	dc400117 	ldw	r17,4(sp)
  809994:	dc000017 	ldw	r16,0(sp)
  809998:	dec00304 	addi	sp,sp,12
  80999c:	f800283a 	ret

008099a0 <_lseek_r>:
  8099a0:	defffd04 	addi	sp,sp,-12
  8099a4:	dc000015 	stw	r16,0(sp)
  8099a8:	04002074 	movhi	r16,129
  8099ac:	840f2504 	addi	r16,r16,15508
  8099b0:	dc400115 	stw	r17,4(sp)
  8099b4:	80000015 	stw	zero,0(r16)
  8099b8:	2023883a 	mov	r17,r4
  8099bc:	2809883a 	mov	r4,r5
  8099c0:	300b883a 	mov	r5,r6
  8099c4:	380d883a 	mov	r6,r7
  8099c8:	dfc00215 	stw	ra,8(sp)
  8099cc:	080c3900 	call	80c390 <lseek>
  8099d0:	1007883a 	mov	r3,r2
  8099d4:	00bfffc4 	movi	r2,-1
  8099d8:	18800626 	beq	r3,r2,8099f4 <_lseek_r+0x54>
  8099dc:	1805883a 	mov	r2,r3
  8099e0:	dfc00217 	ldw	ra,8(sp)
  8099e4:	dc400117 	ldw	r17,4(sp)
  8099e8:	dc000017 	ldw	r16,0(sp)
  8099ec:	dec00304 	addi	sp,sp,12
  8099f0:	f800283a 	ret
  8099f4:	80800017 	ldw	r2,0(r16)
  8099f8:	103ff826 	beq	r2,zero,8099dc <_lseek_r+0x3c>
  8099fc:	88800015 	stw	r2,0(r17)
  809a00:	1805883a 	mov	r2,r3
  809a04:	dfc00217 	ldw	ra,8(sp)
  809a08:	dc400117 	ldw	r17,4(sp)
  809a0c:	dc000017 	ldw	r16,0(sp)
  809a10:	dec00304 	addi	sp,sp,12
  809a14:	f800283a 	ret

00809a18 <_read_r>:
  809a18:	defffd04 	addi	sp,sp,-12
  809a1c:	dc000015 	stw	r16,0(sp)
  809a20:	04002074 	movhi	r16,129
  809a24:	840f2504 	addi	r16,r16,15508
  809a28:	dc400115 	stw	r17,4(sp)
  809a2c:	80000015 	stw	zero,0(r16)
  809a30:	2023883a 	mov	r17,r4
  809a34:	2809883a 	mov	r4,r5
  809a38:	300b883a 	mov	r5,r6
  809a3c:	380d883a 	mov	r6,r7
  809a40:	dfc00215 	stw	ra,8(sp)
  809a44:	080c58c0 	call	80c58c <read>
  809a48:	1007883a 	mov	r3,r2
  809a4c:	00bfffc4 	movi	r2,-1
  809a50:	18800626 	beq	r3,r2,809a6c <_read_r+0x54>
  809a54:	1805883a 	mov	r2,r3
  809a58:	dfc00217 	ldw	ra,8(sp)
  809a5c:	dc400117 	ldw	r17,4(sp)
  809a60:	dc000017 	ldw	r16,0(sp)
  809a64:	dec00304 	addi	sp,sp,12
  809a68:	f800283a 	ret
  809a6c:	80800017 	ldw	r2,0(r16)
  809a70:	103ff826 	beq	r2,zero,809a54 <_read_r+0x3c>
  809a74:	88800015 	stw	r2,0(r17)
  809a78:	1805883a 	mov	r2,r3
  809a7c:	dfc00217 	ldw	ra,8(sp)
  809a80:	dc400117 	ldw	r17,4(sp)
  809a84:	dc000017 	ldw	r16,0(sp)
  809a88:	dec00304 	addi	sp,sp,12
  809a8c:	f800283a 	ret

00809a90 <__udivdi3>:
  809a90:	defff004 	addi	sp,sp,-64
  809a94:	2005883a 	mov	r2,r4
  809a98:	3011883a 	mov	r8,r6
  809a9c:	df000e15 	stw	fp,56(sp)
  809aa0:	dd000a15 	stw	r20,40(sp)
  809aa4:	dc000615 	stw	r16,24(sp)
  809aa8:	dfc00f15 	stw	ra,60(sp)
  809aac:	ddc00d15 	stw	r23,52(sp)
  809ab0:	dd800c15 	stw	r22,48(sp)
  809ab4:	dd400b15 	stw	r21,44(sp)
  809ab8:	dcc00915 	stw	r19,36(sp)
  809abc:	dc800815 	stw	r18,32(sp)
  809ac0:	dc400715 	stw	r17,28(sp)
  809ac4:	4021883a 	mov	r16,r8
  809ac8:	1039883a 	mov	fp,r2
  809acc:	2829883a 	mov	r20,r5
  809ad0:	38003b1e 	bne	r7,zero,809bc0 <__udivdi3+0x130>
  809ad4:	2a005c36 	bltu	r5,r8,809c48 <__udivdi3+0x1b8>
  809ad8:	4000a626 	beq	r8,zero,809d74 <__udivdi3+0x2e4>
  809adc:	00bfffd4 	movui	r2,65535
  809ae0:	14009e36 	bltu	r2,r16,809d5c <__udivdi3+0x2cc>
  809ae4:	00803fc4 	movi	r2,255
  809ae8:	14013d36 	bltu	r2,r16,809fe0 <__udivdi3+0x550>
  809aec:	000b883a 	mov	r5,zero
  809af0:	0005883a 	mov	r2,zero
  809af4:	8084d83a 	srl	r2,r16,r2
  809af8:	01002074 	movhi	r4,129
  809afc:	21009604 	addi	r4,r4,600
  809b00:	01800804 	movi	r6,32
  809b04:	1105883a 	add	r2,r2,r4
  809b08:	10c00003 	ldbu	r3,0(r2)
  809b0c:	28c7883a 	add	r3,r5,r3
  809b10:	30edc83a 	sub	r22,r6,r3
  809b14:	b000ee1e 	bne	r22,zero,809ed0 <__udivdi3+0x440>
  809b18:	802ad43a 	srli	r21,r16,16
  809b1c:	00800044 	movi	r2,1
  809b20:	a423c83a 	sub	r17,r20,r16
  809b24:	85ffffcc 	andi	r23,r16,65535
  809b28:	d8800315 	stw	r2,12(sp)
  809b2c:	8809883a 	mov	r4,r17
  809b30:	a80b883a 	mov	r5,r21
  809b34:	080266c0 	call	80266c <__udivsi3>
  809b38:	8809883a 	mov	r4,r17
  809b3c:	a80b883a 	mov	r5,r21
  809b40:	102d883a 	mov	r22,r2
  809b44:	08026740 	call	802674 <__umodsi3>
  809b48:	1004943a 	slli	r2,r2,16
  809b4c:	e006d43a 	srli	r3,fp,16
  809b50:	bda3383a 	mul	r17,r23,r22
  809b54:	10c4b03a 	or	r2,r2,r3
  809b58:	1440042e 	bgeu	r2,r17,809b6c <__udivdi3+0xdc>
  809b5c:	1405883a 	add	r2,r2,r16
  809b60:	b5bfffc4 	addi	r22,r22,-1
  809b64:	14000136 	bltu	r2,r16,809b6c <__udivdi3+0xdc>
  809b68:	14413d36 	bltu	r2,r17,80a060 <__udivdi3+0x5d0>
  809b6c:	1463c83a 	sub	r17,r2,r17
  809b70:	8809883a 	mov	r4,r17
  809b74:	a80b883a 	mov	r5,r21
  809b78:	080266c0 	call	80266c <__udivsi3>
  809b7c:	8809883a 	mov	r4,r17
  809b80:	a80b883a 	mov	r5,r21
  809b84:	1029883a 	mov	r20,r2
  809b88:	08026740 	call	802674 <__umodsi3>
  809b8c:	1004943a 	slli	r2,r2,16
  809b90:	bd09383a 	mul	r4,r23,r20
  809b94:	e0ffffcc 	andi	r3,fp,65535
  809b98:	10c4b03a 	or	r2,r2,r3
  809b9c:	1100042e 	bgeu	r2,r4,809bb0 <__udivdi3+0x120>
  809ba0:	8085883a 	add	r2,r16,r2
  809ba4:	a53fffc4 	addi	r20,r20,-1
  809ba8:	14000136 	bltu	r2,r16,809bb0 <__udivdi3+0x120>
  809bac:	11012036 	bltu	r2,r4,80a030 <__udivdi3+0x5a0>
  809bb0:	b004943a 	slli	r2,r22,16
  809bb4:	d9000317 	ldw	r4,12(sp)
  809bb8:	a084b03a 	or	r2,r20,r2
  809bbc:	00001506 	br	809c14 <__udivdi3+0x184>
  809bc0:	380d883a 	mov	r6,r7
  809bc4:	29c06236 	bltu	r5,r7,809d50 <__udivdi3+0x2c0>
  809bc8:	00bfffd4 	movui	r2,65535
  809bcc:	11c05a36 	bltu	r2,r7,809d38 <__udivdi3+0x2a8>
  809bd0:	00803fc4 	movi	r2,255
  809bd4:	11c0fc36 	bltu	r2,r7,809fc8 <__udivdi3+0x538>
  809bd8:	000b883a 	mov	r5,zero
  809bdc:	0005883a 	mov	r2,zero
  809be0:	3084d83a 	srl	r2,r6,r2
  809be4:	01002074 	movhi	r4,129
  809be8:	21009604 	addi	r4,r4,600
  809bec:	01c00804 	movi	r7,32
  809bf0:	1105883a 	add	r2,r2,r4
  809bf4:	10c00003 	ldbu	r3,0(r2)
  809bf8:	28c7883a 	add	r3,r5,r3
  809bfc:	38efc83a 	sub	r23,r7,r3
  809c00:	b800691e 	bne	r23,zero,809da8 <__udivdi3+0x318>
  809c04:	35000136 	bltu	r6,r20,809c0c <__udivdi3+0x17c>
  809c08:	e4005136 	bltu	fp,r16,809d50 <__udivdi3+0x2c0>
  809c0c:	00800044 	movi	r2,1
  809c10:	0009883a 	mov	r4,zero
  809c14:	2007883a 	mov	r3,r4
  809c18:	dfc00f17 	ldw	ra,60(sp)
  809c1c:	df000e17 	ldw	fp,56(sp)
  809c20:	ddc00d17 	ldw	r23,52(sp)
  809c24:	dd800c17 	ldw	r22,48(sp)
  809c28:	dd400b17 	ldw	r21,44(sp)
  809c2c:	dd000a17 	ldw	r20,40(sp)
  809c30:	dcc00917 	ldw	r19,36(sp)
  809c34:	dc800817 	ldw	r18,32(sp)
  809c38:	dc400717 	ldw	r17,28(sp)
  809c3c:	dc000617 	ldw	r16,24(sp)
  809c40:	dec01004 	addi	sp,sp,64
  809c44:	f800283a 	ret
  809c48:	00bfffd4 	movui	r2,65535
  809c4c:	12005036 	bltu	r2,r8,809d90 <__udivdi3+0x300>
  809c50:	00803fc4 	movi	r2,255
  809c54:	1200e836 	bltu	r2,r8,809ff8 <__udivdi3+0x568>
  809c58:	000b883a 	mov	r5,zero
  809c5c:	0005883a 	mov	r2,zero
  809c60:	8084d83a 	srl	r2,r16,r2
  809c64:	01002074 	movhi	r4,129
  809c68:	21009604 	addi	r4,r4,600
  809c6c:	01800804 	movi	r6,32
  809c70:	1105883a 	add	r2,r2,r4
  809c74:	10c00003 	ldbu	r3,0(r2)
  809c78:	28c7883a 	add	r3,r5,r3
  809c7c:	30cbc83a 	sub	r5,r6,r3
  809c80:	28000626 	beq	r5,zero,809c9c <__udivdi3+0x20c>
  809c84:	3145c83a 	sub	r2,r6,r5
  809c88:	e084d83a 	srl	r2,fp,r2
  809c8c:	a146983a 	sll	r3,r20,r5
  809c90:	e178983a 	sll	fp,fp,r5
  809c94:	8160983a 	sll	r16,r16,r5
  809c98:	18a8b03a 	or	r20,r3,r2
  809c9c:	802ad43a 	srli	r21,r16,16
  809ca0:	a009883a 	mov	r4,r20
  809ca4:	85ffffcc 	andi	r23,r16,65535
  809ca8:	a80b883a 	mov	r5,r21
  809cac:	080266c0 	call	80266c <__udivsi3>
  809cb0:	a009883a 	mov	r4,r20
  809cb4:	a80b883a 	mov	r5,r21
  809cb8:	102d883a 	mov	r22,r2
  809cbc:	08026740 	call	802674 <__umodsi3>
  809cc0:	1004943a 	slli	r2,r2,16
  809cc4:	e006d43a 	srli	r3,fp,16
  809cc8:	bda3383a 	mul	r17,r23,r22
  809ccc:	10c4b03a 	or	r2,r2,r3
  809cd0:	1440042e 	bgeu	r2,r17,809ce4 <__udivdi3+0x254>
  809cd4:	1405883a 	add	r2,r2,r16
  809cd8:	b5bfffc4 	addi	r22,r22,-1
  809cdc:	14000136 	bltu	r2,r16,809ce4 <__udivdi3+0x254>
  809ce0:	1440d536 	bltu	r2,r17,80a038 <__udivdi3+0x5a8>
  809ce4:	1463c83a 	sub	r17,r2,r17
  809ce8:	8809883a 	mov	r4,r17
  809cec:	a80b883a 	mov	r5,r21
  809cf0:	080266c0 	call	80266c <__udivsi3>
  809cf4:	8809883a 	mov	r4,r17
  809cf8:	a80b883a 	mov	r5,r21
  809cfc:	1029883a 	mov	r20,r2
  809d00:	08026740 	call	802674 <__umodsi3>
  809d04:	1004943a 	slli	r2,r2,16
  809d08:	bd09383a 	mul	r4,r23,r20
  809d0c:	e0ffffcc 	andi	r3,fp,65535
  809d10:	10c4b03a 	or	r2,r2,r3
  809d14:	1100042e 	bgeu	r2,r4,809d28 <__udivdi3+0x298>
  809d18:	8085883a 	add	r2,r16,r2
  809d1c:	a53fffc4 	addi	r20,r20,-1
  809d20:	14000136 	bltu	r2,r16,809d28 <__udivdi3+0x298>
  809d24:	1100c736 	bltu	r2,r4,80a044 <__udivdi3+0x5b4>
  809d28:	b004943a 	slli	r2,r22,16
  809d2c:	0009883a 	mov	r4,zero
  809d30:	a084b03a 	or	r2,r20,r2
  809d34:	003fb706 	br	809c14 <__udivdi3+0x184>
  809d38:	00804034 	movhi	r2,256
  809d3c:	10bfffc4 	addi	r2,r2,-1
  809d40:	11c0a436 	bltu	r2,r7,809fd4 <__udivdi3+0x544>
  809d44:	01400404 	movi	r5,16
  809d48:	2805883a 	mov	r2,r5
  809d4c:	003fa406 	br	809be0 <__udivdi3+0x150>
  809d50:	0005883a 	mov	r2,zero
  809d54:	0009883a 	mov	r4,zero
  809d58:	003fae06 	br	809c14 <__udivdi3+0x184>
  809d5c:	00804034 	movhi	r2,256
  809d60:	10bfffc4 	addi	r2,r2,-1
  809d64:	1400a136 	bltu	r2,r16,809fec <__udivdi3+0x55c>
  809d68:	01400404 	movi	r5,16
  809d6c:	2805883a 	mov	r2,r5
  809d70:	003f6006 	br	809af4 <__udivdi3+0x64>
  809d74:	01000044 	movi	r4,1
  809d78:	000b883a 	mov	r5,zero
  809d7c:	080266c0 	call	80266c <__udivsi3>
  809d80:	1021883a 	mov	r16,r2
  809d84:	00bfffd4 	movui	r2,65535
  809d88:	143ff436 	bltu	r2,r16,809d5c <__udivdi3+0x2cc>
  809d8c:	003f5506 	br	809ae4 <__udivdi3+0x54>
  809d90:	00804034 	movhi	r2,256
  809d94:	10bfffc4 	addi	r2,r2,-1
  809d98:	12009a36 	bltu	r2,r8,80a004 <__udivdi3+0x574>
  809d9c:	01400404 	movi	r5,16
  809da0:	2805883a 	mov	r2,r5
  809da4:	003fae06 	br	809c60 <__udivdi3+0x1d0>
  809da8:	3dc5c83a 	sub	r2,r7,r23
  809dac:	35c8983a 	sll	r4,r6,r23
  809db0:	8086d83a 	srl	r3,r16,r2
  809db4:	a0a2d83a 	srl	r17,r20,r2
  809db8:	e084d83a 	srl	r2,fp,r2
  809dbc:	20eab03a 	or	r21,r4,r3
  809dc0:	a82cd43a 	srli	r22,r21,16
  809dc4:	a5c6983a 	sll	r3,r20,r23
  809dc8:	8809883a 	mov	r4,r17
  809dcc:	b00b883a 	mov	r5,r22
  809dd0:	1886b03a 	or	r3,r3,r2
  809dd4:	d8c00215 	stw	r3,8(sp)
  809dd8:	080266c0 	call	80266c <__udivsi3>
  809ddc:	8809883a 	mov	r4,r17
  809de0:	b00b883a 	mov	r5,r22
  809de4:	1029883a 	mov	r20,r2
  809de8:	08026740 	call	802674 <__umodsi3>
  809dec:	a8ffffcc 	andi	r3,r21,65535
  809df0:	d8c00515 	stw	r3,20(sp)
  809df4:	d9000217 	ldw	r4,8(sp)
  809df8:	d9400517 	ldw	r5,20(sp)
  809dfc:	1004943a 	slli	r2,r2,16
  809e00:	2006d43a 	srli	r3,r4,16
  809e04:	85e0983a 	sll	r16,r16,r23
  809e08:	2d23383a 	mul	r17,r5,r20
  809e0c:	10c4b03a 	or	r2,r2,r3
  809e10:	dc000015 	stw	r16,0(sp)
  809e14:	1440032e 	bgeu	r2,r17,809e24 <__udivdi3+0x394>
  809e18:	1545883a 	add	r2,r2,r21
  809e1c:	a53fffc4 	addi	r20,r20,-1
  809e20:	15407f2e 	bgeu	r2,r21,80a020 <__udivdi3+0x590>
  809e24:	1463c83a 	sub	r17,r2,r17
  809e28:	8809883a 	mov	r4,r17
  809e2c:	b00b883a 	mov	r5,r22
  809e30:	080266c0 	call	80266c <__udivsi3>
  809e34:	8809883a 	mov	r4,r17
  809e38:	b00b883a 	mov	r5,r22
  809e3c:	1021883a 	mov	r16,r2
  809e40:	08026740 	call	802674 <__umodsi3>
  809e44:	d8c00517 	ldw	r3,20(sp)
  809e48:	d9000217 	ldw	r4,8(sp)
  809e4c:	1004943a 	slli	r2,r2,16
  809e50:	1c0f383a 	mul	r7,r3,r16
  809e54:	20ffffcc 	andi	r3,r4,65535
  809e58:	10e2b03a 	or	r17,r2,r3
  809e5c:	89c0032e 	bgeu	r17,r7,809e6c <__udivdi3+0x3dc>
  809e60:	8d63883a 	add	r17,r17,r21
  809e64:	843fffc4 	addi	r16,r16,-1
  809e68:	8d40692e 	bgeu	r17,r21,80a010 <__udivdi3+0x580>
  809e6c:	a008943a 	slli	r4,r20,16
  809e70:	d9400017 	ldw	r5,0(sp)
  809e74:	89e3c83a 	sub	r17,r17,r7
  809e78:	8110b03a 	or	r8,r16,r4
  809e7c:	280cd43a 	srli	r6,r5,16
  809e80:	28ffffcc 	andi	r3,r5,65535
  809e84:	40bfffcc 	andi	r2,r8,65535
  809e88:	400ad43a 	srli	r5,r8,16
  809e8c:	10d3383a 	mul	r9,r2,r3
  809e90:	1185383a 	mul	r2,r2,r6
  809e94:	28c7383a 	mul	r3,r5,r3
  809e98:	4808d43a 	srli	r4,r9,16
  809e9c:	298b383a 	mul	r5,r5,r6
  809ea0:	10c5883a 	add	r2,r2,r3
  809ea4:	2089883a 	add	r4,r4,r2
  809ea8:	20c0022e 	bgeu	r4,r3,809eb4 <__udivdi3+0x424>
  809eac:	00800074 	movhi	r2,1
  809eb0:	288b883a 	add	r5,r5,r2
  809eb4:	2004d43a 	srli	r2,r4,16
  809eb8:	288b883a 	add	r5,r5,r2
  809ebc:	89403f36 	bltu	r17,r5,809fbc <__udivdi3+0x52c>
  809ec0:	89403926 	beq	r17,r5,809fa8 <__udivdi3+0x518>
  809ec4:	4005883a 	mov	r2,r8
  809ec8:	0009883a 	mov	r4,zero
  809ecc:	003f5106 	br	809c14 <__udivdi3+0x184>
  809ed0:	85a0983a 	sll	r16,r16,r22
  809ed4:	3585c83a 	sub	r2,r6,r22
  809ed8:	a0a2d83a 	srl	r17,r20,r2
  809edc:	802ad43a 	srli	r21,r16,16
  809ee0:	e084d83a 	srl	r2,fp,r2
  809ee4:	a586983a 	sll	r3,r20,r22
  809ee8:	8809883a 	mov	r4,r17
  809eec:	a80b883a 	mov	r5,r21
  809ef0:	1886b03a 	or	r3,r3,r2
  809ef4:	d8c00115 	stw	r3,4(sp)
  809ef8:	080266c0 	call	80266c <__udivsi3>
  809efc:	8809883a 	mov	r4,r17
  809f00:	a80b883a 	mov	r5,r21
  809f04:	d8800415 	stw	r2,16(sp)
  809f08:	08026740 	call	802674 <__umodsi3>
  809f0c:	d9000117 	ldw	r4,4(sp)
  809f10:	d9400417 	ldw	r5,16(sp)
  809f14:	1004943a 	slli	r2,r2,16
  809f18:	85ffffcc 	andi	r23,r16,65535
  809f1c:	2006d43a 	srli	r3,r4,16
  809f20:	b963383a 	mul	r17,r23,r5
  809f24:	10c4b03a 	or	r2,r2,r3
  809f28:	1440042e 	bgeu	r2,r17,809f3c <__udivdi3+0x4ac>
  809f2c:	297fffc4 	addi	r5,r5,-1
  809f30:	1405883a 	add	r2,r2,r16
  809f34:	d9400415 	stw	r5,16(sp)
  809f38:	1400442e 	bgeu	r2,r16,80a04c <__udivdi3+0x5bc>
  809f3c:	1463c83a 	sub	r17,r2,r17
  809f40:	8809883a 	mov	r4,r17
  809f44:	a80b883a 	mov	r5,r21
  809f48:	080266c0 	call	80266c <__udivsi3>
  809f4c:	8809883a 	mov	r4,r17
  809f50:	a80b883a 	mov	r5,r21
  809f54:	1029883a 	mov	r20,r2
  809f58:	08026740 	call	802674 <__umodsi3>
  809f5c:	d9400117 	ldw	r5,4(sp)
  809f60:	1004943a 	slli	r2,r2,16
  809f64:	bd09383a 	mul	r4,r23,r20
  809f68:	28ffffcc 	andi	r3,r5,65535
  809f6c:	10c6b03a 	or	r3,r2,r3
  809f70:	1900062e 	bgeu	r3,r4,809f8c <__udivdi3+0x4fc>
  809f74:	1c07883a 	add	r3,r3,r16
  809f78:	a53fffc4 	addi	r20,r20,-1
  809f7c:	1c000336 	bltu	r3,r16,809f8c <__udivdi3+0x4fc>
  809f80:	1900022e 	bgeu	r3,r4,809f8c <__udivdi3+0x4fc>
  809f84:	a53fffc4 	addi	r20,r20,-1
  809f88:	1c07883a 	add	r3,r3,r16
  809f8c:	d9400417 	ldw	r5,16(sp)
  809f90:	e5b8983a 	sll	fp,fp,r22
  809f94:	1923c83a 	sub	r17,r3,r4
  809f98:	2804943a 	slli	r2,r5,16
  809f9c:	a0a8b03a 	or	r20,r20,r2
  809fa0:	dd000315 	stw	r20,12(sp)
  809fa4:	003ee106 	br	809b2c <__udivdi3+0x9c>
  809fa8:	2004943a 	slli	r2,r4,16
  809fac:	e5c8983a 	sll	r4,fp,r23
  809fb0:	48ffffcc 	andi	r3,r9,65535
  809fb4:	10c5883a 	add	r2,r2,r3
  809fb8:	20bfc22e 	bgeu	r4,r2,809ec4 <__udivdi3+0x434>
  809fbc:	40bfffc4 	addi	r2,r8,-1
  809fc0:	0009883a 	mov	r4,zero
  809fc4:	003f1306 	br	809c14 <__udivdi3+0x184>
  809fc8:	01400204 	movi	r5,8
  809fcc:	2805883a 	mov	r2,r5
  809fd0:	003f0306 	br	809be0 <__udivdi3+0x150>
  809fd4:	01400604 	movi	r5,24
  809fd8:	2805883a 	mov	r2,r5
  809fdc:	003f0006 	br	809be0 <__udivdi3+0x150>
  809fe0:	01400204 	movi	r5,8
  809fe4:	2805883a 	mov	r2,r5
  809fe8:	003ec206 	br	809af4 <__udivdi3+0x64>
  809fec:	01400604 	movi	r5,24
  809ff0:	2805883a 	mov	r2,r5
  809ff4:	003ebf06 	br	809af4 <__udivdi3+0x64>
  809ff8:	01400204 	movi	r5,8
  809ffc:	2805883a 	mov	r2,r5
  80a000:	003f1706 	br	809c60 <__udivdi3+0x1d0>
  80a004:	01400604 	movi	r5,24
  80a008:	2805883a 	mov	r2,r5
  80a00c:	003f1406 	br	809c60 <__udivdi3+0x1d0>
  80a010:	89ff962e 	bgeu	r17,r7,809e6c <__udivdi3+0x3dc>
  80a014:	8d63883a 	add	r17,r17,r21
  80a018:	843fffc4 	addi	r16,r16,-1
  80a01c:	003f9306 	br	809e6c <__udivdi3+0x3dc>
  80a020:	147f802e 	bgeu	r2,r17,809e24 <__udivdi3+0x394>
  80a024:	a53fffc4 	addi	r20,r20,-1
  80a028:	1545883a 	add	r2,r2,r21
  80a02c:	003f7d06 	br	809e24 <__udivdi3+0x394>
  80a030:	a53fffc4 	addi	r20,r20,-1
  80a034:	003ede06 	br	809bb0 <__udivdi3+0x120>
  80a038:	b5bfffc4 	addi	r22,r22,-1
  80a03c:	1405883a 	add	r2,r2,r16
  80a040:	003f2806 	br	809ce4 <__udivdi3+0x254>
  80a044:	a53fffc4 	addi	r20,r20,-1
  80a048:	003f3706 	br	809d28 <__udivdi3+0x298>
  80a04c:	147fbb2e 	bgeu	r2,r17,809f3c <__udivdi3+0x4ac>
  80a050:	297fffc4 	addi	r5,r5,-1
  80a054:	1405883a 	add	r2,r2,r16
  80a058:	d9400415 	stw	r5,16(sp)
  80a05c:	003fb706 	br	809f3c <__udivdi3+0x4ac>
  80a060:	b5bfffc4 	addi	r22,r22,-1
  80a064:	1405883a 	add	r2,r2,r16
  80a068:	003ec006 	br	809b6c <__udivdi3+0xdc>

0080a06c <__umoddi3>:
  80a06c:	defff104 	addi	sp,sp,-60
  80a070:	dd800b15 	stw	r22,44(sp)
  80a074:	dd000915 	stw	r20,36(sp)
  80a078:	dc000515 	stw	r16,20(sp)
  80a07c:	dfc00e15 	stw	ra,56(sp)
  80a080:	df000d15 	stw	fp,52(sp)
  80a084:	ddc00c15 	stw	r23,48(sp)
  80a088:	dd400a15 	stw	r21,40(sp)
  80a08c:	dcc00815 	stw	r19,32(sp)
  80a090:	dc800715 	stw	r18,28(sp)
  80a094:	dc400615 	stw	r17,24(sp)
  80a098:	3021883a 	mov	r16,r6
  80a09c:	202d883a 	mov	r22,r4
  80a0a0:	2829883a 	mov	r20,r5
  80a0a4:	38002b1e 	bne	r7,zero,80a154 <__umoddi3+0xe8>
  80a0a8:	29805036 	bltu	r5,r6,80a1ec <__umoddi3+0x180>
  80a0ac:	30008a26 	beq	r6,zero,80a2d8 <__umoddi3+0x26c>
  80a0b0:	00bfffd4 	movui	r2,65535
  80a0b4:	14008236 	bltu	r2,r16,80a2c0 <__umoddi3+0x254>
  80a0b8:	00803fc4 	movi	r2,255
  80a0bc:	14013636 	bltu	r2,r16,80a598 <__umoddi3+0x52c>
  80a0c0:	000b883a 	mov	r5,zero
  80a0c4:	0005883a 	mov	r2,zero
  80a0c8:	8084d83a 	srl	r2,r16,r2
  80a0cc:	01002074 	movhi	r4,129
  80a0d0:	21009604 	addi	r4,r4,600
  80a0d4:	01800804 	movi	r6,32
  80a0d8:	1105883a 	add	r2,r2,r4
  80a0dc:	10c00003 	ldbu	r3,0(r2)
  80a0e0:	28c7883a 	add	r3,r5,r3
  80a0e4:	30efc83a 	sub	r23,r6,r3
  80a0e8:	b800941e 	bne	r23,zero,80a33c <__umoddi3+0x2d0>
  80a0ec:	802ad43a 	srli	r21,r16,16
  80a0f0:	a423c83a 	sub	r17,r20,r16
  80a0f4:	0039883a 	mov	fp,zero
  80a0f8:	853fffcc 	andi	r20,r16,65535
  80a0fc:	8809883a 	mov	r4,r17
  80a100:	a80b883a 	mov	r5,r21
  80a104:	080266c0 	call	80266c <__udivsi3>
  80a108:	8809883a 	mov	r4,r17
  80a10c:	a80b883a 	mov	r5,r21
  80a110:	a0a3383a 	mul	r17,r20,r2
  80a114:	08026740 	call	802674 <__umodsi3>
  80a118:	1004943a 	slli	r2,r2,16
  80a11c:	b006d43a 	srli	r3,r22,16
  80a120:	10c4b03a 	or	r2,r2,r3
  80a124:	1440032e 	bgeu	r2,r17,80a134 <__umoddi3+0xc8>
  80a128:	1405883a 	add	r2,r2,r16
  80a12c:	14000136 	bltu	r2,r16,80a134 <__umoddi3+0xc8>
  80a130:	14413536 	bltu	r2,r17,80a608 <__umoddi3+0x59c>
  80a134:	1463c83a 	sub	r17,r2,r17
  80a138:	8809883a 	mov	r4,r17
  80a13c:	a80b883a 	mov	r5,r21
  80a140:	080266c0 	call	80266c <__udivsi3>
  80a144:	8809883a 	mov	r4,r17
  80a148:	a0a3383a 	mul	r17,r20,r2
  80a14c:	a80b883a 	mov	r5,r21
  80a150:	00004d06 	br	80a288 <__umoddi3+0x21c>
  80a154:	380d883a 	mov	r6,r7
  80a158:	29c0102e 	bgeu	r5,r7,80a19c <__umoddi3+0x130>
  80a15c:	2011883a 	mov	r8,r4
  80a160:	2813883a 	mov	r9,r5
  80a164:	4005883a 	mov	r2,r8
  80a168:	4807883a 	mov	r3,r9
  80a16c:	dfc00e17 	ldw	ra,56(sp)
  80a170:	df000d17 	ldw	fp,52(sp)
  80a174:	ddc00c17 	ldw	r23,48(sp)
  80a178:	dd800b17 	ldw	r22,44(sp)
  80a17c:	dd400a17 	ldw	r21,40(sp)
  80a180:	dd000917 	ldw	r20,36(sp)
  80a184:	dcc00817 	ldw	r19,32(sp)
  80a188:	dc800717 	ldw	r18,28(sp)
  80a18c:	dc400617 	ldw	r17,24(sp)
  80a190:	dc000517 	ldw	r16,20(sp)
  80a194:	dec00f04 	addi	sp,sp,60
  80a198:	f800283a 	ret
  80a19c:	00bfffd4 	movui	r2,65535
  80a1a0:	11c05a36 	bltu	r2,r7,80a30c <__umoddi3+0x2a0>
  80a1a4:	00803fc4 	movi	r2,255
  80a1a8:	11c0fe36 	bltu	r2,r7,80a5a4 <__umoddi3+0x538>
  80a1ac:	000b883a 	mov	r5,zero
  80a1b0:	0005883a 	mov	r2,zero
  80a1b4:	3084d83a 	srl	r2,r6,r2
  80a1b8:	01002074 	movhi	r4,129
  80a1bc:	21009604 	addi	r4,r4,600
  80a1c0:	01c00804 	movi	r7,32
  80a1c4:	1105883a 	add	r2,r2,r4
  80a1c8:	10c00003 	ldbu	r3,0(r2)
  80a1cc:	28c7883a 	add	r3,r5,r3
  80a1d0:	38ebc83a 	sub	r21,r7,r3
  80a1d4:	a800851e 	bne	r21,zero,80a3ec <__umoddi3+0x380>
  80a1d8:	35005236 	bltu	r6,r20,80a324 <__umoddi3+0x2b8>
  80a1dc:	b400512e 	bgeu	r22,r16,80a324 <__umoddi3+0x2b8>
  80a1e0:	b011883a 	mov	r8,r22
  80a1e4:	a013883a 	mov	r9,r20
  80a1e8:	003fde06 	br	80a164 <__umoddi3+0xf8>
  80a1ec:	00bfffd4 	movui	r2,65535
  80a1f0:	11804036 	bltu	r2,r6,80a2f4 <__umoddi3+0x288>
  80a1f4:	00803fc4 	movi	r2,255
  80a1f8:	1180ed36 	bltu	r2,r6,80a5b0 <__umoddi3+0x544>
  80a1fc:	000b883a 	mov	r5,zero
  80a200:	0005883a 	mov	r2,zero
  80a204:	8084d83a 	srl	r2,r16,r2
  80a208:	01002074 	movhi	r4,129
  80a20c:	21009604 	addi	r4,r4,600
  80a210:	01800804 	movi	r6,32
  80a214:	1105883a 	add	r2,r2,r4
  80a218:	10c00003 	ldbu	r3,0(r2)
  80a21c:	28c7883a 	add	r3,r5,r3
  80a220:	30c7c83a 	sub	r3,r6,r3
  80a224:	1800bf1e 	bne	r3,zero,80a524 <__umoddi3+0x4b8>
  80a228:	0039883a 	mov	fp,zero
  80a22c:	802ad43a 	srli	r21,r16,16
  80a230:	a009883a 	mov	r4,r20
  80a234:	85ffffcc 	andi	r23,r16,65535
  80a238:	a80b883a 	mov	r5,r21
  80a23c:	080266c0 	call	80266c <__udivsi3>
  80a240:	a009883a 	mov	r4,r20
  80a244:	a80b883a 	mov	r5,r21
  80a248:	b8a3383a 	mul	r17,r23,r2
  80a24c:	08026740 	call	802674 <__umodsi3>
  80a250:	1004943a 	slli	r2,r2,16
  80a254:	b006d43a 	srli	r3,r22,16
  80a258:	10c4b03a 	or	r2,r2,r3
  80a25c:	1440032e 	bgeu	r2,r17,80a26c <__umoddi3+0x200>
  80a260:	1405883a 	add	r2,r2,r16
  80a264:	14000136 	bltu	r2,r16,80a26c <__umoddi3+0x200>
  80a268:	1440e536 	bltu	r2,r17,80a600 <__umoddi3+0x594>
  80a26c:	1463c83a 	sub	r17,r2,r17
  80a270:	8809883a 	mov	r4,r17
  80a274:	a80b883a 	mov	r5,r21
  80a278:	080266c0 	call	80266c <__udivsi3>
  80a27c:	8809883a 	mov	r4,r17
  80a280:	b8a3383a 	mul	r17,r23,r2
  80a284:	a80b883a 	mov	r5,r21
  80a288:	08026740 	call	802674 <__umodsi3>
  80a28c:	1004943a 	slli	r2,r2,16
  80a290:	b0ffffcc 	andi	r3,r22,65535
  80a294:	10c4b03a 	or	r2,r2,r3
  80a298:	1440042e 	bgeu	r2,r17,80a2ac <__umoddi3+0x240>
  80a29c:	1405883a 	add	r2,r2,r16
  80a2a0:	14000236 	bltu	r2,r16,80a2ac <__umoddi3+0x240>
  80a2a4:	1440012e 	bgeu	r2,r17,80a2ac <__umoddi3+0x240>
  80a2a8:	1405883a 	add	r2,r2,r16
  80a2ac:	1445c83a 	sub	r2,r2,r17
  80a2b0:	1724d83a 	srl	r18,r2,fp
  80a2b4:	0013883a 	mov	r9,zero
  80a2b8:	9011883a 	mov	r8,r18
  80a2bc:	003fa906 	br	80a164 <__umoddi3+0xf8>
  80a2c0:	00804034 	movhi	r2,256
  80a2c4:	10bfffc4 	addi	r2,r2,-1
  80a2c8:	1400b036 	bltu	r2,r16,80a58c <__umoddi3+0x520>
  80a2cc:	01400404 	movi	r5,16
  80a2d0:	2805883a 	mov	r2,r5
  80a2d4:	003f7c06 	br	80a0c8 <__umoddi3+0x5c>
  80a2d8:	01000044 	movi	r4,1
  80a2dc:	000b883a 	mov	r5,zero
  80a2e0:	080266c0 	call	80266c <__udivsi3>
  80a2e4:	1021883a 	mov	r16,r2
  80a2e8:	00bfffd4 	movui	r2,65535
  80a2ec:	143ff436 	bltu	r2,r16,80a2c0 <__umoddi3+0x254>
  80a2f0:	003f7106 	br	80a0b8 <__umoddi3+0x4c>
  80a2f4:	00804034 	movhi	r2,256
  80a2f8:	10bfffc4 	addi	r2,r2,-1
  80a2fc:	1180af36 	bltu	r2,r6,80a5bc <__umoddi3+0x550>
  80a300:	01400404 	movi	r5,16
  80a304:	2805883a 	mov	r2,r5
  80a308:	003fbe06 	br	80a204 <__umoddi3+0x198>
  80a30c:	00804034 	movhi	r2,256
  80a310:	10bfffc4 	addi	r2,r2,-1
  80a314:	11c0ac36 	bltu	r2,r7,80a5c8 <__umoddi3+0x55c>
  80a318:	01400404 	movi	r5,16
  80a31c:	2805883a 	mov	r2,r5
  80a320:	003fa406 	br	80a1b4 <__umoddi3+0x148>
  80a324:	b409c83a 	sub	r4,r22,r16
  80a328:	b105803a 	cmpltu	r2,r22,r4
  80a32c:	a187c83a 	sub	r3,r20,r6
  80a330:	18a9c83a 	sub	r20,r3,r2
  80a334:	202d883a 	mov	r22,r4
  80a338:	003fa906 	br	80a1e0 <__umoddi3+0x174>
  80a33c:	85e0983a 	sll	r16,r16,r23
  80a340:	35c5c83a 	sub	r2,r6,r23
  80a344:	a0a2d83a 	srl	r17,r20,r2
  80a348:	802ad43a 	srli	r21,r16,16
  80a34c:	b084d83a 	srl	r2,r22,r2
  80a350:	a5c6983a 	sll	r3,r20,r23
  80a354:	8809883a 	mov	r4,r17
  80a358:	a80b883a 	mov	r5,r21
  80a35c:	1886b03a 	or	r3,r3,r2
  80a360:	d8c00115 	stw	r3,4(sp)
  80a364:	853fffcc 	andi	r20,r16,65535
  80a368:	080266c0 	call	80266c <__udivsi3>
  80a36c:	8809883a 	mov	r4,r17
  80a370:	a80b883a 	mov	r5,r21
  80a374:	a0a3383a 	mul	r17,r20,r2
  80a378:	08026740 	call	802674 <__umodsi3>
  80a37c:	d9000117 	ldw	r4,4(sp)
  80a380:	1004943a 	slli	r2,r2,16
  80a384:	b839883a 	mov	fp,r23
  80a388:	2006d43a 	srli	r3,r4,16
  80a38c:	10c4b03a 	or	r2,r2,r3
  80a390:	1440022e 	bgeu	r2,r17,80a39c <__umoddi3+0x330>
  80a394:	1405883a 	add	r2,r2,r16
  80a398:	1400962e 	bgeu	r2,r16,80a5f4 <__umoddi3+0x588>
  80a39c:	1463c83a 	sub	r17,r2,r17
  80a3a0:	8809883a 	mov	r4,r17
  80a3a4:	a80b883a 	mov	r5,r21
  80a3a8:	080266c0 	call	80266c <__udivsi3>
  80a3ac:	8809883a 	mov	r4,r17
  80a3b0:	a80b883a 	mov	r5,r21
  80a3b4:	a0a3383a 	mul	r17,r20,r2
  80a3b8:	08026740 	call	802674 <__umodsi3>
  80a3bc:	d9400117 	ldw	r5,4(sp)
  80a3c0:	1004943a 	slli	r2,r2,16
  80a3c4:	28ffffcc 	andi	r3,r5,65535
  80a3c8:	10c4b03a 	or	r2,r2,r3
  80a3cc:	1440042e 	bgeu	r2,r17,80a3e0 <__umoddi3+0x374>
  80a3d0:	1405883a 	add	r2,r2,r16
  80a3d4:	14000236 	bltu	r2,r16,80a3e0 <__umoddi3+0x374>
  80a3d8:	1440012e 	bgeu	r2,r17,80a3e0 <__umoddi3+0x374>
  80a3dc:	1405883a 	add	r2,r2,r16
  80a3e0:	b5ec983a 	sll	r22,r22,r23
  80a3e4:	1463c83a 	sub	r17,r2,r17
  80a3e8:	003f4406 	br	80a0fc <__umoddi3+0x90>
  80a3ec:	3d4fc83a 	sub	r7,r7,r21
  80a3f0:	3546983a 	sll	r3,r6,r21
  80a3f4:	81c4d83a 	srl	r2,r16,r7
  80a3f8:	a1e2d83a 	srl	r17,r20,r7
  80a3fc:	a54c983a 	sll	r6,r20,r21
  80a400:	18aeb03a 	or	r23,r3,r2
  80a404:	b828d43a 	srli	r20,r23,16
  80a408:	b1c4d83a 	srl	r2,r22,r7
  80a40c:	8809883a 	mov	r4,r17
  80a410:	a00b883a 	mov	r5,r20
  80a414:	308cb03a 	or	r6,r6,r2
  80a418:	d9c00315 	stw	r7,12(sp)
  80a41c:	d9800215 	stw	r6,8(sp)
  80a420:	080266c0 	call	80266c <__udivsi3>
  80a424:	8809883a 	mov	r4,r17
  80a428:	a00b883a 	mov	r5,r20
  80a42c:	1039883a 	mov	fp,r2
  80a430:	08026740 	call	802674 <__umodsi3>
  80a434:	b8ffffcc 	andi	r3,r23,65535
  80a438:	d8c00415 	stw	r3,16(sp)
  80a43c:	d9000217 	ldw	r4,8(sp)
  80a440:	d9400417 	ldw	r5,16(sp)
  80a444:	1004943a 	slli	r2,r2,16
  80a448:	2006d43a 	srli	r3,r4,16
  80a44c:	8560983a 	sll	r16,r16,r21
  80a450:	2f23383a 	mul	r17,r5,fp
  80a454:	10c4b03a 	or	r2,r2,r3
  80a458:	dc000015 	stw	r16,0(sp)
  80a45c:	b56c983a 	sll	r22,r22,r21
  80a460:	1440032e 	bgeu	r2,r17,80a470 <__umoddi3+0x404>
  80a464:	15c5883a 	add	r2,r2,r23
  80a468:	e73fffc4 	addi	fp,fp,-1
  80a46c:	15c05d2e 	bgeu	r2,r23,80a5e4 <__umoddi3+0x578>
  80a470:	1463c83a 	sub	r17,r2,r17
  80a474:	8809883a 	mov	r4,r17
  80a478:	a00b883a 	mov	r5,r20
  80a47c:	080266c0 	call	80266c <__udivsi3>
  80a480:	8809883a 	mov	r4,r17
  80a484:	a00b883a 	mov	r5,r20
  80a488:	1021883a 	mov	r16,r2
  80a48c:	08026740 	call	802674 <__umodsi3>
  80a490:	d8c00417 	ldw	r3,16(sp)
  80a494:	d9000217 	ldw	r4,8(sp)
  80a498:	1004943a 	slli	r2,r2,16
  80a49c:	1c23383a 	mul	r17,r3,r16
  80a4a0:	20ffffcc 	andi	r3,r4,65535
  80a4a4:	10ceb03a 	or	r7,r2,r3
  80a4a8:	3c40032e 	bgeu	r7,r17,80a4b8 <__umoddi3+0x44c>
  80a4ac:	3dcf883a 	add	r7,r7,r23
  80a4b0:	843fffc4 	addi	r16,r16,-1
  80a4b4:	3dc0472e 	bgeu	r7,r23,80a5d4 <__umoddi3+0x568>
  80a4b8:	e004943a 	slli	r2,fp,16
  80a4bc:	d9400017 	ldw	r5,0(sp)
  80a4c0:	3c4fc83a 	sub	r7,r7,r17
  80a4c4:	8084b03a 	or	r2,r16,r2
  80a4c8:	28ffffcc 	andi	r3,r5,65535
  80a4cc:	280cd43a 	srli	r6,r5,16
  80a4d0:	100ad43a 	srli	r5,r2,16
  80a4d4:	10bfffcc 	andi	r2,r2,65535
  80a4d8:	10d1383a 	mul	r8,r2,r3
  80a4dc:	28c7383a 	mul	r3,r5,r3
  80a4e0:	1185383a 	mul	r2,r2,r6
  80a4e4:	4008d43a 	srli	r4,r8,16
  80a4e8:	298b383a 	mul	r5,r5,r6
  80a4ec:	10c5883a 	add	r2,r2,r3
  80a4f0:	2089883a 	add	r4,r4,r2
  80a4f4:	20c0022e 	bgeu	r4,r3,80a500 <__umoddi3+0x494>
  80a4f8:	00800074 	movhi	r2,1
  80a4fc:	288b883a 	add	r5,r5,r2
  80a500:	2004d43a 	srli	r2,r4,16
  80a504:	2008943a 	slli	r4,r4,16
  80a508:	40ffffcc 	andi	r3,r8,65535
  80a50c:	288b883a 	add	r5,r5,r2
  80a510:	20c9883a 	add	r4,r4,r3
  80a514:	39400b36 	bltu	r7,r5,80a544 <__umoddi3+0x4d8>
  80a518:	39403d26 	beq	r7,r5,80a610 <__umoddi3+0x5a4>
  80a51c:	394bc83a 	sub	r5,r7,r5
  80a520:	00000f06 	br	80a560 <__umoddi3+0x4f4>
  80a524:	30c5c83a 	sub	r2,r6,r3
  80a528:	1839883a 	mov	fp,r3
  80a52c:	b084d83a 	srl	r2,r22,r2
  80a530:	a0c6983a 	sll	r3,r20,r3
  80a534:	8720983a 	sll	r16,r16,fp
  80a538:	b72c983a 	sll	r22,r22,fp
  80a53c:	18a8b03a 	or	r20,r3,r2
  80a540:	003f3a06 	br	80a22c <__umoddi3+0x1c0>
  80a544:	d8c00017 	ldw	r3,0(sp)
  80a548:	20c5c83a 	sub	r2,r4,r3
  80a54c:	2089803a 	cmpltu	r4,r4,r2
  80a550:	2dc7c83a 	sub	r3,r5,r23
  80a554:	1907c83a 	sub	r3,r3,r4
  80a558:	38cbc83a 	sub	r5,r7,r3
  80a55c:	1009883a 	mov	r4,r2
  80a560:	b105c83a 	sub	r2,r22,r4
  80a564:	b087803a 	cmpltu	r3,r22,r2
  80a568:	28c7c83a 	sub	r3,r5,r3
  80a56c:	d9400317 	ldw	r5,12(sp)
  80a570:	1544d83a 	srl	r2,r2,r21
  80a574:	1948983a 	sll	r4,r3,r5
  80a578:	1d46d83a 	srl	r3,r3,r21
  80a57c:	20a4b03a 	or	r18,r4,r2
  80a580:	9011883a 	mov	r8,r18
  80a584:	1813883a 	mov	r9,r3
  80a588:	003ef606 	br	80a164 <__umoddi3+0xf8>
  80a58c:	01400604 	movi	r5,24
  80a590:	2805883a 	mov	r2,r5
  80a594:	003ecc06 	br	80a0c8 <__umoddi3+0x5c>
  80a598:	01400204 	movi	r5,8
  80a59c:	2805883a 	mov	r2,r5
  80a5a0:	003ec906 	br	80a0c8 <__umoddi3+0x5c>
  80a5a4:	01400204 	movi	r5,8
  80a5a8:	2805883a 	mov	r2,r5
  80a5ac:	003f0106 	br	80a1b4 <__umoddi3+0x148>
  80a5b0:	01400204 	movi	r5,8
  80a5b4:	2805883a 	mov	r2,r5
  80a5b8:	003f1206 	br	80a204 <__umoddi3+0x198>
  80a5bc:	01400604 	movi	r5,24
  80a5c0:	2805883a 	mov	r2,r5
  80a5c4:	003f0f06 	br	80a204 <__umoddi3+0x198>
  80a5c8:	01400604 	movi	r5,24
  80a5cc:	2805883a 	mov	r2,r5
  80a5d0:	003ef806 	br	80a1b4 <__umoddi3+0x148>
  80a5d4:	3c7fb82e 	bgeu	r7,r17,80a4b8 <__umoddi3+0x44c>
  80a5d8:	843fffc4 	addi	r16,r16,-1
  80a5dc:	3dcf883a 	add	r7,r7,r23
  80a5e0:	003fb506 	br	80a4b8 <__umoddi3+0x44c>
  80a5e4:	147fa22e 	bgeu	r2,r17,80a470 <__umoddi3+0x404>
  80a5e8:	e73fffc4 	addi	fp,fp,-1
  80a5ec:	15c5883a 	add	r2,r2,r23
  80a5f0:	003f9f06 	br	80a470 <__umoddi3+0x404>
  80a5f4:	147f692e 	bgeu	r2,r17,80a39c <__umoddi3+0x330>
  80a5f8:	1405883a 	add	r2,r2,r16
  80a5fc:	003f6706 	br	80a39c <__umoddi3+0x330>
  80a600:	1405883a 	add	r2,r2,r16
  80a604:	003f1906 	br	80a26c <__umoddi3+0x200>
  80a608:	1405883a 	add	r2,r2,r16
  80a60c:	003ec906 	br	80a134 <__umoddi3+0xc8>
  80a610:	b13fcc36 	bltu	r22,r4,80a544 <__umoddi3+0x4d8>
  80a614:	000b883a 	mov	r5,zero
  80a618:	003fd106 	br	80a560 <__umoddi3+0x4f4>

0080a61c <_fpadd_parts>:
  80a61c:	defff804 	addi	sp,sp,-32
  80a620:	dcc00315 	stw	r19,12(sp)
  80a624:	2027883a 	mov	r19,r4
  80a628:	21000017 	ldw	r4,0(r4)
  80a62c:	00c00044 	movi	r3,1
  80a630:	dd400515 	stw	r21,20(sp)
  80a634:	dd000415 	stw	r20,16(sp)
  80a638:	ddc00715 	stw	r23,28(sp)
  80a63c:	dd800615 	stw	r22,24(sp)
  80a640:	dc800215 	stw	r18,8(sp)
  80a644:	dc400115 	stw	r17,4(sp)
  80a648:	dc000015 	stw	r16,0(sp)
  80a64c:	282b883a 	mov	r21,r5
  80a650:	3029883a 	mov	r20,r6
  80a654:	1900632e 	bgeu	r3,r4,80a7e4 <_fpadd_parts+0x1c8>
  80a658:	28800017 	ldw	r2,0(r5)
  80a65c:	1880812e 	bgeu	r3,r2,80a864 <_fpadd_parts+0x248>
  80a660:	00c00104 	movi	r3,4
  80a664:	20c0dc26 	beq	r4,r3,80a9d8 <_fpadd_parts+0x3bc>
  80a668:	10c07e26 	beq	r2,r3,80a864 <_fpadd_parts+0x248>
  80a66c:	00c00084 	movi	r3,2
  80a670:	10c06726 	beq	r2,r3,80a810 <_fpadd_parts+0x1f4>
  80a674:	20c07b26 	beq	r4,r3,80a864 <_fpadd_parts+0x248>
  80a678:	9dc00217 	ldw	r23,8(r19)
  80a67c:	28c00217 	ldw	r3,8(r5)
  80a680:	9c400317 	ldw	r17,12(r19)
  80a684:	2bc00317 	ldw	r15,12(r5)
  80a688:	b8cdc83a 	sub	r6,r23,r3
  80a68c:	9c800417 	ldw	r18,16(r19)
  80a690:	2c000417 	ldw	r16,16(r5)
  80a694:	3009883a 	mov	r4,r6
  80a698:	30009716 	blt	r6,zero,80a8f8 <_fpadd_parts+0x2dc>
  80a69c:	00800fc4 	movi	r2,63
  80a6a0:	11806b16 	blt	r2,r6,80a850 <_fpadd_parts+0x234>
  80a6a4:	0100a40e 	bge	zero,r4,80a938 <_fpadd_parts+0x31c>
  80a6a8:	35bff804 	addi	r22,r6,-32
  80a6ac:	b000bc16 	blt	r22,zero,80a9a0 <_fpadd_parts+0x384>
  80a6b0:	8596d83a 	srl	r11,r16,r22
  80a6b4:	0019883a 	mov	r12,zero
  80a6b8:	0013883a 	mov	r9,zero
  80a6bc:	01000044 	movi	r4,1
  80a6c0:	0015883a 	mov	r10,zero
  80a6c4:	b000be16 	blt	r22,zero,80a9c0 <_fpadd_parts+0x3a4>
  80a6c8:	2590983a 	sll	r8,r4,r22
  80a6cc:	000f883a 	mov	r7,zero
  80a6d0:	00bfffc4 	movi	r2,-1
  80a6d4:	3889883a 	add	r4,r7,r2
  80a6d8:	408b883a 	add	r5,r8,r2
  80a6dc:	21cd803a 	cmpltu	r6,r4,r7
  80a6e0:	314b883a 	add	r5,r6,r5
  80a6e4:	7904703a 	and	r2,r15,r4
  80a6e8:	8146703a 	and	r3,r16,r5
  80a6ec:	10c4b03a 	or	r2,r2,r3
  80a6f0:	10000226 	beq	r2,zero,80a6fc <_fpadd_parts+0xe0>
  80a6f4:	02400044 	movi	r9,1
  80a6f8:	0015883a 	mov	r10,zero
  80a6fc:	5a5eb03a 	or	r15,r11,r9
  80a700:	62a0b03a 	or	r16,r12,r10
  80a704:	99400117 	ldw	r5,4(r19)
  80a708:	a8800117 	ldw	r2,4(r21)
  80a70c:	28806e26 	beq	r5,r2,80a8c8 <_fpadd_parts+0x2ac>
  80a710:	28006626 	beq	r5,zero,80a8ac <_fpadd_parts+0x290>
  80a714:	7c45c83a 	sub	r2,r15,r17
  80a718:	7889803a 	cmpltu	r4,r15,r2
  80a71c:	8487c83a 	sub	r3,r16,r18
  80a720:	1909c83a 	sub	r4,r3,r4
  80a724:	100d883a 	mov	r6,r2
  80a728:	200f883a 	mov	r7,r4
  80a72c:	38007716 	blt	r7,zero,80a90c <_fpadd_parts+0x2f0>
  80a730:	a5c00215 	stw	r23,8(r20)
  80a734:	a1c00415 	stw	r7,16(r20)
  80a738:	a0000115 	stw	zero,4(r20)
  80a73c:	a1800315 	stw	r6,12(r20)
  80a740:	a2000317 	ldw	r8,12(r20)
  80a744:	a2400417 	ldw	r9,16(r20)
  80a748:	00bfffc4 	movi	r2,-1
  80a74c:	408b883a 	add	r5,r8,r2
  80a750:	2a09803a 	cmpltu	r4,r5,r8
  80a754:	488d883a 	add	r6,r9,r2
  80a758:	01c40034 	movhi	r7,4096
  80a75c:	39ffffc4 	addi	r7,r7,-1
  80a760:	218d883a 	add	r6,r4,r6
  80a764:	39801736 	bltu	r7,r6,80a7c4 <_fpadd_parts+0x1a8>
  80a768:	31c06526 	beq	r6,r7,80a900 <_fpadd_parts+0x2e4>
  80a76c:	a3000217 	ldw	r12,8(r20)
  80a770:	4209883a 	add	r4,r8,r8
  80a774:	00bfffc4 	movi	r2,-1
  80a778:	220f803a 	cmpltu	r7,r4,r8
  80a77c:	4a4b883a 	add	r5,r9,r9
  80a780:	394f883a 	add	r7,r7,r5
  80a784:	2095883a 	add	r10,r4,r2
  80a788:	3897883a 	add	r11,r7,r2
  80a78c:	510d803a 	cmpltu	r6,r10,r4
  80a790:	6099883a 	add	r12,r12,r2
  80a794:	32d7883a 	add	r11,r6,r11
  80a798:	00840034 	movhi	r2,4096
  80a79c:	10bfffc4 	addi	r2,r2,-1
  80a7a0:	2011883a 	mov	r8,r4
  80a7a4:	3813883a 	mov	r9,r7
  80a7a8:	a1000315 	stw	r4,12(r20)
  80a7ac:	a1c00415 	stw	r7,16(r20)
  80a7b0:	a3000215 	stw	r12,8(r20)
  80a7b4:	12c00336 	bltu	r2,r11,80a7c4 <_fpadd_parts+0x1a8>
  80a7b8:	58bfed1e 	bne	r11,r2,80a770 <_fpadd_parts+0x154>
  80a7bc:	00bfff84 	movi	r2,-2
  80a7c0:	12bfeb2e 	bgeu	r2,r10,80a770 <_fpadd_parts+0x154>
  80a7c4:	a2800417 	ldw	r10,16(r20)
  80a7c8:	008000c4 	movi	r2,3
  80a7cc:	00c80034 	movhi	r3,8192
  80a7d0:	18ffffc4 	addi	r3,r3,-1
  80a7d4:	a2400317 	ldw	r9,12(r20)
  80a7d8:	a0800015 	stw	r2,0(r20)
  80a7dc:	1a802336 	bltu	r3,r10,80a86c <_fpadd_parts+0x250>
  80a7e0:	a027883a 	mov	r19,r20
  80a7e4:	9805883a 	mov	r2,r19
  80a7e8:	ddc00717 	ldw	r23,28(sp)
  80a7ec:	dd800617 	ldw	r22,24(sp)
  80a7f0:	dd400517 	ldw	r21,20(sp)
  80a7f4:	dd000417 	ldw	r20,16(sp)
  80a7f8:	dcc00317 	ldw	r19,12(sp)
  80a7fc:	dc800217 	ldw	r18,8(sp)
  80a800:	dc400117 	ldw	r17,4(sp)
  80a804:	dc000017 	ldw	r16,0(sp)
  80a808:	dec00804 	addi	sp,sp,32
  80a80c:	f800283a 	ret
  80a810:	20fff41e 	bne	r4,r3,80a7e4 <_fpadd_parts+0x1c8>
  80a814:	31000015 	stw	r4,0(r6)
  80a818:	98800117 	ldw	r2,4(r19)
  80a81c:	30800115 	stw	r2,4(r6)
  80a820:	98c00217 	ldw	r3,8(r19)
  80a824:	30c00215 	stw	r3,8(r6)
  80a828:	98800317 	ldw	r2,12(r19)
  80a82c:	30800315 	stw	r2,12(r6)
  80a830:	98c00417 	ldw	r3,16(r19)
  80a834:	30c00415 	stw	r3,16(r6)
  80a838:	98800117 	ldw	r2,4(r19)
  80a83c:	28c00117 	ldw	r3,4(r5)
  80a840:	3027883a 	mov	r19,r6
  80a844:	10c4703a 	and	r2,r2,r3
  80a848:	30800115 	stw	r2,4(r6)
  80a84c:	003fe506 	br	80a7e4 <_fpadd_parts+0x1c8>
  80a850:	1dc02616 	blt	r3,r23,80a8ec <_fpadd_parts+0x2d0>
  80a854:	0023883a 	mov	r17,zero
  80a858:	182f883a 	mov	r23,r3
  80a85c:	0025883a 	mov	r18,zero
  80a860:	003fa806 	br	80a704 <_fpadd_parts+0xe8>
  80a864:	a827883a 	mov	r19,r21
  80a868:	003fde06 	br	80a7e4 <_fpadd_parts+0x1c8>
  80a86c:	01800044 	movi	r6,1
  80a870:	500497fa 	slli	r2,r10,31
  80a874:	4808d07a 	srli	r4,r9,1
  80a878:	518ad83a 	srl	r5,r10,r6
  80a87c:	a2000217 	ldw	r8,8(r20)
  80a880:	1108b03a 	or	r4,r2,r4
  80a884:	0007883a 	mov	r3,zero
  80a888:	4984703a 	and	r2,r9,r6
  80a88c:	208cb03a 	or	r6,r4,r2
  80a890:	28ceb03a 	or	r7,r5,r3
  80a894:	42000044 	addi	r8,r8,1
  80a898:	a027883a 	mov	r19,r20
  80a89c:	a1c00415 	stw	r7,16(r20)
  80a8a0:	a2000215 	stw	r8,8(r20)
  80a8a4:	a1800315 	stw	r6,12(r20)
  80a8a8:	003fce06 	br	80a7e4 <_fpadd_parts+0x1c8>
  80a8ac:	8bc5c83a 	sub	r2,r17,r15
  80a8b0:	8889803a 	cmpltu	r4,r17,r2
  80a8b4:	9407c83a 	sub	r3,r18,r16
  80a8b8:	1909c83a 	sub	r4,r3,r4
  80a8bc:	100d883a 	mov	r6,r2
  80a8c0:	200f883a 	mov	r7,r4
  80a8c4:	003f9906 	br	80a72c <_fpadd_parts+0x110>
  80a8c8:	7c45883a 	add	r2,r15,r17
  80a8cc:	13c9803a 	cmpltu	r4,r2,r15
  80a8d0:	8487883a 	add	r3,r16,r18
  80a8d4:	20c9883a 	add	r4,r4,r3
  80a8d8:	a1400115 	stw	r5,4(r20)
  80a8dc:	a5c00215 	stw	r23,8(r20)
  80a8e0:	a0800315 	stw	r2,12(r20)
  80a8e4:	a1000415 	stw	r4,16(r20)
  80a8e8:	003fb606 	br	80a7c4 <_fpadd_parts+0x1a8>
  80a8ec:	001f883a 	mov	r15,zero
  80a8f0:	0021883a 	mov	r16,zero
  80a8f4:	003f8306 	br	80a704 <_fpadd_parts+0xe8>
  80a8f8:	018dc83a 	sub	r6,zero,r6
  80a8fc:	003f6706 	br	80a69c <_fpadd_parts+0x80>
  80a900:	00bfff84 	movi	r2,-2
  80a904:	117faf36 	bltu	r2,r5,80a7c4 <_fpadd_parts+0x1a8>
  80a908:	003f9806 	br	80a76c <_fpadd_parts+0x150>
  80a90c:	0005883a 	mov	r2,zero
  80a910:	1189c83a 	sub	r4,r2,r6
  80a914:	1105803a 	cmpltu	r2,r2,r4
  80a918:	01cbc83a 	sub	r5,zero,r7
  80a91c:	2885c83a 	sub	r2,r5,r2
  80a920:	01800044 	movi	r6,1
  80a924:	a1800115 	stw	r6,4(r20)
  80a928:	a5c00215 	stw	r23,8(r20)
  80a92c:	a1000315 	stw	r4,12(r20)
  80a930:	a0800415 	stw	r2,16(r20)
  80a934:	003f8206 	br	80a740 <_fpadd_parts+0x124>
  80a938:	203f7226 	beq	r4,zero,80a704 <_fpadd_parts+0xe8>
  80a93c:	35bff804 	addi	r22,r6,-32
  80a940:	b9af883a 	add	r23,r23,r6
  80a944:	b0003116 	blt	r22,zero,80aa0c <_fpadd_parts+0x3f0>
  80a948:	959ad83a 	srl	r13,r18,r22
  80a94c:	001d883a 	mov	r14,zero
  80a950:	000f883a 	mov	r7,zero
  80a954:	01000044 	movi	r4,1
  80a958:	0011883a 	mov	r8,zero
  80a95c:	b0002516 	blt	r22,zero,80a9f4 <_fpadd_parts+0x3d8>
  80a960:	2594983a 	sll	r10,r4,r22
  80a964:	0013883a 	mov	r9,zero
  80a968:	00bfffc4 	movi	r2,-1
  80a96c:	4889883a 	add	r4,r9,r2
  80a970:	508b883a 	add	r5,r10,r2
  80a974:	224d803a 	cmpltu	r6,r4,r9
  80a978:	314b883a 	add	r5,r6,r5
  80a97c:	8904703a 	and	r2,r17,r4
  80a980:	9146703a 	and	r3,r18,r5
  80a984:	10c4b03a 	or	r2,r2,r3
  80a988:	10000226 	beq	r2,zero,80a994 <_fpadd_parts+0x378>
  80a98c:	01c00044 	movi	r7,1
  80a990:	0011883a 	mov	r8,zero
  80a994:	69e2b03a 	or	r17,r13,r7
  80a998:	7224b03a 	or	r18,r14,r8
  80a99c:	003f5906 	br	80a704 <_fpadd_parts+0xe8>
  80a9a0:	8407883a 	add	r3,r16,r16
  80a9a4:	008007c4 	movi	r2,31
  80a9a8:	1185c83a 	sub	r2,r2,r6
  80a9ac:	1886983a 	sll	r3,r3,r2
  80a9b0:	7996d83a 	srl	r11,r15,r6
  80a9b4:	8198d83a 	srl	r12,r16,r6
  80a9b8:	1ad6b03a 	or	r11,r3,r11
  80a9bc:	003f3e06 	br	80a6b8 <_fpadd_parts+0x9c>
  80a9c0:	2006d07a 	srli	r3,r4,1
  80a9c4:	008007c4 	movi	r2,31
  80a9c8:	1185c83a 	sub	r2,r2,r6
  80a9cc:	1890d83a 	srl	r8,r3,r2
  80a9d0:	218e983a 	sll	r7,r4,r6
  80a9d4:	003f3e06 	br	80a6d0 <_fpadd_parts+0xb4>
  80a9d8:	113f821e 	bne	r2,r4,80a7e4 <_fpadd_parts+0x1c8>
  80a9dc:	28c00117 	ldw	r3,4(r5)
  80a9e0:	98800117 	ldw	r2,4(r19)
  80a9e4:	10ff7f26 	beq	r2,r3,80a7e4 <_fpadd_parts+0x1c8>
  80a9e8:	04c02074 	movhi	r19,129
  80a9ec:	9cc09104 	addi	r19,r19,580
  80a9f0:	003f7c06 	br	80a7e4 <_fpadd_parts+0x1c8>
  80a9f4:	2006d07a 	srli	r3,r4,1
  80a9f8:	008007c4 	movi	r2,31
  80a9fc:	1185c83a 	sub	r2,r2,r6
  80aa00:	1894d83a 	srl	r10,r3,r2
  80aa04:	2192983a 	sll	r9,r4,r6
  80aa08:	003fd706 	br	80a968 <_fpadd_parts+0x34c>
  80aa0c:	9487883a 	add	r3,r18,r18
  80aa10:	008007c4 	movi	r2,31
  80aa14:	1185c83a 	sub	r2,r2,r6
  80aa18:	1886983a 	sll	r3,r3,r2
  80aa1c:	899ad83a 	srl	r13,r17,r6
  80aa20:	919cd83a 	srl	r14,r18,r6
  80aa24:	1b5ab03a 	or	r13,r3,r13
  80aa28:	003fc906 	br	80a950 <_fpadd_parts+0x334>

0080aa2c <__subdf3>:
  80aa2c:	deffea04 	addi	sp,sp,-88
  80aa30:	dcc01415 	stw	r19,80(sp)
  80aa34:	dcc00404 	addi	r19,sp,16
  80aa38:	2011883a 	mov	r8,r4
  80aa3c:	2813883a 	mov	r9,r5
  80aa40:	dc401315 	stw	r17,76(sp)
  80aa44:	d809883a 	mov	r4,sp
  80aa48:	980b883a 	mov	r5,r19
  80aa4c:	dc400904 	addi	r17,sp,36
  80aa50:	dfc01515 	stw	ra,84(sp)
  80aa54:	da400115 	stw	r9,4(sp)
  80aa58:	d9c00315 	stw	r7,12(sp)
  80aa5c:	da000015 	stw	r8,0(sp)
  80aa60:	d9800215 	stw	r6,8(sp)
  80aa64:	080bb740 	call	80bb74 <__unpack_d>
  80aa68:	d9000204 	addi	r4,sp,8
  80aa6c:	880b883a 	mov	r5,r17
  80aa70:	080bb740 	call	80bb74 <__unpack_d>
  80aa74:	d8800a17 	ldw	r2,40(sp)
  80aa78:	880b883a 	mov	r5,r17
  80aa7c:	9809883a 	mov	r4,r19
  80aa80:	d9800e04 	addi	r6,sp,56
  80aa84:	1080005c 	xori	r2,r2,1
  80aa88:	d8800a15 	stw	r2,40(sp)
  80aa8c:	080a61c0 	call	80a61c <_fpadd_parts>
  80aa90:	1009883a 	mov	r4,r2
  80aa94:	080b8600 	call	80b860 <__pack_d>
  80aa98:	dfc01517 	ldw	ra,84(sp)
  80aa9c:	dcc01417 	ldw	r19,80(sp)
  80aaa0:	dc401317 	ldw	r17,76(sp)
  80aaa4:	dec01604 	addi	sp,sp,88
  80aaa8:	f800283a 	ret

0080aaac <__adddf3>:
  80aaac:	deffea04 	addi	sp,sp,-88
  80aab0:	dcc01415 	stw	r19,80(sp)
  80aab4:	dcc00404 	addi	r19,sp,16
  80aab8:	2011883a 	mov	r8,r4
  80aabc:	2813883a 	mov	r9,r5
  80aac0:	dc401315 	stw	r17,76(sp)
  80aac4:	d809883a 	mov	r4,sp
  80aac8:	980b883a 	mov	r5,r19
  80aacc:	dc400904 	addi	r17,sp,36
  80aad0:	dfc01515 	stw	ra,84(sp)
  80aad4:	da400115 	stw	r9,4(sp)
  80aad8:	d9c00315 	stw	r7,12(sp)
  80aadc:	da000015 	stw	r8,0(sp)
  80aae0:	d9800215 	stw	r6,8(sp)
  80aae4:	080bb740 	call	80bb74 <__unpack_d>
  80aae8:	d9000204 	addi	r4,sp,8
  80aaec:	880b883a 	mov	r5,r17
  80aaf0:	080bb740 	call	80bb74 <__unpack_d>
  80aaf4:	d9800e04 	addi	r6,sp,56
  80aaf8:	9809883a 	mov	r4,r19
  80aafc:	880b883a 	mov	r5,r17
  80ab00:	080a61c0 	call	80a61c <_fpadd_parts>
  80ab04:	1009883a 	mov	r4,r2
  80ab08:	080b8600 	call	80b860 <__pack_d>
  80ab0c:	dfc01517 	ldw	ra,84(sp)
  80ab10:	dcc01417 	ldw	r19,80(sp)
  80ab14:	dc401317 	ldw	r17,76(sp)
  80ab18:	dec01604 	addi	sp,sp,88
  80ab1c:	f800283a 	ret

0080ab20 <__muldf3>:
  80ab20:	deffe004 	addi	sp,sp,-128
  80ab24:	dc401815 	stw	r17,96(sp)
  80ab28:	dc400404 	addi	r17,sp,16
  80ab2c:	2011883a 	mov	r8,r4
  80ab30:	2813883a 	mov	r9,r5
  80ab34:	dc001715 	stw	r16,92(sp)
  80ab38:	d809883a 	mov	r4,sp
  80ab3c:	880b883a 	mov	r5,r17
  80ab40:	dc000904 	addi	r16,sp,36
  80ab44:	dfc01f15 	stw	ra,124(sp)
  80ab48:	da400115 	stw	r9,4(sp)
  80ab4c:	d9c00315 	stw	r7,12(sp)
  80ab50:	da000015 	stw	r8,0(sp)
  80ab54:	d9800215 	stw	r6,8(sp)
  80ab58:	ddc01e15 	stw	r23,120(sp)
  80ab5c:	dd801d15 	stw	r22,116(sp)
  80ab60:	dd401c15 	stw	r21,112(sp)
  80ab64:	dd001b15 	stw	r20,108(sp)
  80ab68:	dcc01a15 	stw	r19,104(sp)
  80ab6c:	dc801915 	stw	r18,100(sp)
  80ab70:	080bb740 	call	80bb74 <__unpack_d>
  80ab74:	d9000204 	addi	r4,sp,8
  80ab78:	800b883a 	mov	r5,r16
  80ab7c:	080bb740 	call	80bb74 <__unpack_d>
  80ab80:	d9000417 	ldw	r4,16(sp)
  80ab84:	00800044 	movi	r2,1
  80ab88:	1100102e 	bgeu	r2,r4,80abcc <__muldf3+0xac>
  80ab8c:	d8c00917 	ldw	r3,36(sp)
  80ab90:	10c0062e 	bgeu	r2,r3,80abac <__muldf3+0x8c>
  80ab94:	00800104 	movi	r2,4
  80ab98:	20800a26 	beq	r4,r2,80abc4 <__muldf3+0xa4>
  80ab9c:	1880cc26 	beq	r3,r2,80aed0 <__muldf3+0x3b0>
  80aba0:	00800084 	movi	r2,2
  80aba4:	20800926 	beq	r4,r2,80abcc <__muldf3+0xac>
  80aba8:	1880191e 	bne	r3,r2,80ac10 <__muldf3+0xf0>
  80abac:	d8c00a17 	ldw	r3,40(sp)
  80abb0:	d8800517 	ldw	r2,20(sp)
  80abb4:	8009883a 	mov	r4,r16
  80abb8:	10c4c03a 	cmpne	r2,r2,r3
  80abbc:	d8800a15 	stw	r2,40(sp)
  80abc0:	00000706 	br	80abe0 <__muldf3+0xc0>
  80abc4:	00800084 	movi	r2,2
  80abc8:	1880c326 	beq	r3,r2,80aed8 <__muldf3+0x3b8>
  80abcc:	d8800517 	ldw	r2,20(sp)
  80abd0:	d8c00a17 	ldw	r3,40(sp)
  80abd4:	8809883a 	mov	r4,r17
  80abd8:	10c4c03a 	cmpne	r2,r2,r3
  80abdc:	d8800515 	stw	r2,20(sp)
  80abe0:	080b8600 	call	80b860 <__pack_d>
  80abe4:	dfc01f17 	ldw	ra,124(sp)
  80abe8:	ddc01e17 	ldw	r23,120(sp)
  80abec:	dd801d17 	ldw	r22,116(sp)
  80abf0:	dd401c17 	ldw	r21,112(sp)
  80abf4:	dd001b17 	ldw	r20,108(sp)
  80abf8:	dcc01a17 	ldw	r19,104(sp)
  80abfc:	dc801917 	ldw	r18,100(sp)
  80ac00:	dc401817 	ldw	r17,96(sp)
  80ac04:	dc001717 	ldw	r16,92(sp)
  80ac08:	dec02004 	addi	sp,sp,128
  80ac0c:	f800283a 	ret
  80ac10:	dd800717 	ldw	r22,28(sp)
  80ac14:	dc800c17 	ldw	r18,48(sp)
  80ac18:	002b883a 	mov	r21,zero
  80ac1c:	0023883a 	mov	r17,zero
  80ac20:	a80b883a 	mov	r5,r21
  80ac24:	b00d883a 	mov	r6,r22
  80ac28:	880f883a 	mov	r7,r17
  80ac2c:	ddc00817 	ldw	r23,32(sp)
  80ac30:	dcc00d17 	ldw	r19,52(sp)
  80ac34:	9009883a 	mov	r4,r18
  80ac38:	080b7480 	call	80b748 <__muldi3>
  80ac3c:	001b883a 	mov	r13,zero
  80ac40:	680f883a 	mov	r7,r13
  80ac44:	b009883a 	mov	r4,r22
  80ac48:	000b883a 	mov	r5,zero
  80ac4c:	980d883a 	mov	r6,r19
  80ac50:	b82d883a 	mov	r22,r23
  80ac54:	002f883a 	mov	r23,zero
  80ac58:	db401615 	stw	r13,88(sp)
  80ac5c:	d8801315 	stw	r2,76(sp)
  80ac60:	d8c01415 	stw	r3,80(sp)
  80ac64:	dcc01515 	stw	r19,84(sp)
  80ac68:	080b7480 	call	80b748 <__muldi3>
  80ac6c:	b00d883a 	mov	r6,r22
  80ac70:	000b883a 	mov	r5,zero
  80ac74:	9009883a 	mov	r4,r18
  80ac78:	b80f883a 	mov	r7,r23
  80ac7c:	1021883a 	mov	r16,r2
  80ac80:	1823883a 	mov	r17,r3
  80ac84:	080b7480 	call	80b748 <__muldi3>
  80ac88:	8085883a 	add	r2,r16,r2
  80ac8c:	140d803a 	cmpltu	r6,r2,r16
  80ac90:	88c7883a 	add	r3,r17,r3
  80ac94:	30cd883a 	add	r6,r6,r3
  80ac98:	1029883a 	mov	r20,r2
  80ac9c:	302b883a 	mov	r21,r6
  80aca0:	da801317 	ldw	r10,76(sp)
  80aca4:	dac01417 	ldw	r11,80(sp)
  80aca8:	db001517 	ldw	r12,84(sp)
  80acac:	db401617 	ldw	r13,88(sp)
  80acb0:	3440612e 	bgeu	r6,r17,80ae38 <__muldf3+0x318>
  80acb4:	0009883a 	mov	r4,zero
  80acb8:	5105883a 	add	r2,r10,r4
  80acbc:	128d803a 	cmpltu	r6,r2,r10
  80acc0:	5d07883a 	add	r3,r11,r20
  80acc4:	30cd883a 	add	r6,r6,r3
  80acc8:	0021883a 	mov	r16,zero
  80accc:	04400044 	movi	r17,1
  80acd0:	1025883a 	mov	r18,r2
  80acd4:	3027883a 	mov	r19,r6
  80acd8:	32c06236 	bltu	r6,r11,80ae64 <__muldf3+0x344>
  80acdc:	59807a26 	beq	r11,r6,80aec8 <__muldf3+0x3a8>
  80ace0:	680b883a 	mov	r5,r13
  80ace4:	b80f883a 	mov	r7,r23
  80ace8:	6009883a 	mov	r4,r12
  80acec:	b00d883a 	mov	r6,r22
  80acf0:	080b7480 	call	80b748 <__muldi3>
  80acf4:	1009883a 	mov	r4,r2
  80acf8:	000f883a 	mov	r7,zero
  80acfc:	1545883a 	add	r2,r2,r21
  80ad00:	1111803a 	cmpltu	r8,r2,r4
  80ad04:	19c7883a 	add	r3,r3,r7
  80ad08:	40c7883a 	add	r3,r8,r3
  80ad0c:	88cb883a 	add	r5,r17,r3
  80ad10:	d8c00617 	ldw	r3,24(sp)
  80ad14:	8089883a 	add	r4,r16,r2
  80ad18:	d8800b17 	ldw	r2,44(sp)
  80ad1c:	18c00104 	addi	r3,r3,4
  80ad20:	240d803a 	cmpltu	r6,r4,r16
  80ad24:	10c7883a 	add	r3,r2,r3
  80ad28:	2013883a 	mov	r9,r4
  80ad2c:	d8800a17 	ldw	r2,40(sp)
  80ad30:	d9000517 	ldw	r4,20(sp)
  80ad34:	314d883a 	add	r6,r6,r5
  80ad38:	3015883a 	mov	r10,r6
  80ad3c:	2088c03a 	cmpne	r4,r4,r2
  80ad40:	00880034 	movhi	r2,8192
  80ad44:	10bfffc4 	addi	r2,r2,-1
  80ad48:	d9000f15 	stw	r4,60(sp)
  80ad4c:	d8c01015 	stw	r3,64(sp)
  80ad50:	1180162e 	bgeu	r2,r6,80adac <__muldf3+0x28c>
  80ad54:	1811883a 	mov	r8,r3
  80ad58:	101f883a 	mov	r15,r2
  80ad5c:	980497fa 	slli	r2,r19,31
  80ad60:	9016d07a 	srli	r11,r18,1
  80ad64:	500697fa 	slli	r3,r10,31
  80ad68:	480cd07a 	srli	r6,r9,1
  80ad6c:	500ed07a 	srli	r7,r10,1
  80ad70:	12d6b03a 	or	r11,r2,r11
  80ad74:	00800044 	movi	r2,1
  80ad78:	198cb03a 	or	r6,r3,r6
  80ad7c:	4888703a 	and	r4,r9,r2
  80ad80:	9818d07a 	srli	r12,r19,1
  80ad84:	001b883a 	mov	r13,zero
  80ad88:	03a00034 	movhi	r14,32768
  80ad8c:	3013883a 	mov	r9,r6
  80ad90:	3815883a 	mov	r10,r7
  80ad94:	4091883a 	add	r8,r8,r2
  80ad98:	20000226 	beq	r4,zero,80ada4 <__muldf3+0x284>
  80ad9c:	5b64b03a 	or	r18,r11,r13
  80ada0:	63a6b03a 	or	r19,r12,r14
  80ada4:	7abfed36 	bltu	r15,r10,80ad5c <__muldf3+0x23c>
  80ada8:	da001015 	stw	r8,64(sp)
  80adac:	00840034 	movhi	r2,4096
  80adb0:	10bfffc4 	addi	r2,r2,-1
  80adb4:	12801436 	bltu	r2,r10,80ae08 <__muldf3+0x2e8>
  80adb8:	da001017 	ldw	r8,64(sp)
  80adbc:	101f883a 	mov	r15,r2
  80adc0:	4a45883a 	add	r2,r9,r9
  80adc4:	124d803a 	cmpltu	r6,r2,r9
  80adc8:	5287883a 	add	r3,r10,r10
  80adcc:	9497883a 	add	r11,r18,r18
  80add0:	5c8f803a 	cmpltu	r7,r11,r18
  80add4:	9cd9883a 	add	r12,r19,r19
  80add8:	01000044 	movi	r4,1
  80addc:	30cd883a 	add	r6,r6,r3
  80ade0:	3b0f883a 	add	r7,r7,r12
  80ade4:	423fffc4 	addi	r8,r8,-1
  80ade8:	1013883a 	mov	r9,r2
  80adec:	3015883a 	mov	r10,r6
  80adf0:	111ab03a 	or	r13,r2,r4
  80adf4:	98003016 	blt	r19,zero,80aeb8 <__muldf3+0x398>
  80adf8:	5825883a 	mov	r18,r11
  80adfc:	3827883a 	mov	r19,r7
  80ae00:	7abfef2e 	bgeu	r15,r10,80adc0 <__muldf3+0x2a0>
  80ae04:	da001015 	stw	r8,64(sp)
  80ae08:	00803fc4 	movi	r2,255
  80ae0c:	488e703a 	and	r7,r9,r2
  80ae10:	00802004 	movi	r2,128
  80ae14:	0007883a 	mov	r3,zero
  80ae18:	0011883a 	mov	r8,zero
  80ae1c:	38801826 	beq	r7,r2,80ae80 <__muldf3+0x360>
  80ae20:	008000c4 	movi	r2,3
  80ae24:	d9000e04 	addi	r4,sp,56
  80ae28:	da801215 	stw	r10,72(sp)
  80ae2c:	d8800e15 	stw	r2,56(sp)
  80ae30:	da401115 	stw	r9,68(sp)
  80ae34:	003f6a06 	br	80abe0 <__muldf3+0xc0>
  80ae38:	89802126 	beq	r17,r6,80aec0 <__muldf3+0x3a0>
  80ae3c:	0009883a 	mov	r4,zero
  80ae40:	5105883a 	add	r2,r10,r4
  80ae44:	128d803a 	cmpltu	r6,r2,r10
  80ae48:	5d07883a 	add	r3,r11,r20
  80ae4c:	30cd883a 	add	r6,r6,r3
  80ae50:	0021883a 	mov	r16,zero
  80ae54:	0023883a 	mov	r17,zero
  80ae58:	1025883a 	mov	r18,r2
  80ae5c:	3027883a 	mov	r19,r6
  80ae60:	32ff9e2e 	bgeu	r6,r11,80acdc <__muldf3+0x1bc>
  80ae64:	00800044 	movi	r2,1
  80ae68:	8089883a 	add	r4,r16,r2
  80ae6c:	240d803a 	cmpltu	r6,r4,r16
  80ae70:	344d883a 	add	r6,r6,r17
  80ae74:	2021883a 	mov	r16,r4
  80ae78:	3023883a 	mov	r17,r6
  80ae7c:	003f9806 	br	80ace0 <__muldf3+0x1c0>
  80ae80:	403fe71e 	bne	r8,zero,80ae20 <__muldf3+0x300>
  80ae84:	01004004 	movi	r4,256
  80ae88:	4904703a 	and	r2,r9,r4
  80ae8c:	10c4b03a 	or	r2,r2,r3
  80ae90:	103fe31e 	bne	r2,zero,80ae20 <__muldf3+0x300>
  80ae94:	94c4b03a 	or	r2,r18,r19
  80ae98:	103fe126 	beq	r2,zero,80ae20 <__muldf3+0x300>
  80ae9c:	49c5883a 	add	r2,r9,r7
  80aea0:	1251803a 	cmpltu	r8,r2,r9
  80aea4:	4291883a 	add	r8,r8,r10
  80aea8:	013fc004 	movi	r4,-256
  80aeac:	1112703a 	and	r9,r2,r4
  80aeb0:	4015883a 	mov	r10,r8
  80aeb4:	003fda06 	br	80ae20 <__muldf3+0x300>
  80aeb8:	6813883a 	mov	r9,r13
  80aebc:	003fce06 	br	80adf8 <__muldf3+0x2d8>
  80aec0:	143f7c36 	bltu	r2,r16,80acb4 <__muldf3+0x194>
  80aec4:	003fdd06 	br	80ae3c <__muldf3+0x31c>
  80aec8:	12bf852e 	bgeu	r2,r10,80ace0 <__muldf3+0x1c0>
  80aecc:	003fe506 	br	80ae64 <__muldf3+0x344>
  80aed0:	00800084 	movi	r2,2
  80aed4:	20bf351e 	bne	r4,r2,80abac <__muldf3+0x8c>
  80aed8:	01002074 	movhi	r4,129
  80aedc:	21009104 	addi	r4,r4,580
  80aee0:	003f3f06 	br	80abe0 <__muldf3+0xc0>

0080aee4 <__divdf3>:
  80aee4:	deffed04 	addi	sp,sp,-76
  80aee8:	dcc01115 	stw	r19,68(sp)
  80aeec:	dcc00404 	addi	r19,sp,16
  80aef0:	2011883a 	mov	r8,r4
  80aef4:	2813883a 	mov	r9,r5
  80aef8:	dc000e15 	stw	r16,56(sp)
  80aefc:	d809883a 	mov	r4,sp
  80af00:	980b883a 	mov	r5,r19
  80af04:	dc000904 	addi	r16,sp,36
  80af08:	dfc01215 	stw	ra,72(sp)
  80af0c:	da400115 	stw	r9,4(sp)
  80af10:	d9c00315 	stw	r7,12(sp)
  80af14:	da000015 	stw	r8,0(sp)
  80af18:	d9800215 	stw	r6,8(sp)
  80af1c:	dc801015 	stw	r18,64(sp)
  80af20:	dc400f15 	stw	r17,60(sp)
  80af24:	080bb740 	call	80bb74 <__unpack_d>
  80af28:	d9000204 	addi	r4,sp,8
  80af2c:	800b883a 	mov	r5,r16
  80af30:	080bb740 	call	80bb74 <__unpack_d>
  80af34:	d9000417 	ldw	r4,16(sp)
  80af38:	00800044 	movi	r2,1
  80af3c:	11000b2e 	bgeu	r2,r4,80af6c <__divdf3+0x88>
  80af40:	d9400917 	ldw	r5,36(sp)
  80af44:	1140762e 	bgeu	r2,r5,80b120 <__divdf3+0x23c>
  80af48:	d8800517 	ldw	r2,20(sp)
  80af4c:	d8c00a17 	ldw	r3,40(sp)
  80af50:	01800104 	movi	r6,4
  80af54:	10c4f03a 	xor	r2,r2,r3
  80af58:	d8800515 	stw	r2,20(sp)
  80af5c:	21800226 	beq	r4,r6,80af68 <__divdf3+0x84>
  80af60:	00800084 	movi	r2,2
  80af64:	2080141e 	bne	r4,r2,80afb8 <__divdf3+0xd4>
  80af68:	29000926 	beq	r5,r4,80af90 <__divdf3+0xac>
  80af6c:	9809883a 	mov	r4,r19
  80af70:	080b8600 	call	80b860 <__pack_d>
  80af74:	dfc01217 	ldw	ra,72(sp)
  80af78:	dcc01117 	ldw	r19,68(sp)
  80af7c:	dc801017 	ldw	r18,64(sp)
  80af80:	dc400f17 	ldw	r17,60(sp)
  80af84:	dc000e17 	ldw	r16,56(sp)
  80af88:	dec01304 	addi	sp,sp,76
  80af8c:	f800283a 	ret
  80af90:	01002074 	movhi	r4,129
  80af94:	21009104 	addi	r4,r4,580
  80af98:	080b8600 	call	80b860 <__pack_d>
  80af9c:	dfc01217 	ldw	ra,72(sp)
  80afa0:	dcc01117 	ldw	r19,68(sp)
  80afa4:	dc801017 	ldw	r18,64(sp)
  80afa8:	dc400f17 	ldw	r17,60(sp)
  80afac:	dc000e17 	ldw	r16,56(sp)
  80afb0:	dec01304 	addi	sp,sp,76
  80afb4:	f800283a 	ret
  80afb8:	29805b26 	beq	r5,r6,80b128 <__divdf3+0x244>
  80afbc:	28802d26 	beq	r5,r2,80b074 <__divdf3+0x190>
  80afc0:	d8c00617 	ldw	r3,24(sp)
  80afc4:	d8800b17 	ldw	r2,44(sp)
  80afc8:	d9c00817 	ldw	r7,32(sp)
  80afcc:	dc400d17 	ldw	r17,52(sp)
  80afd0:	188bc83a 	sub	r5,r3,r2
  80afd4:	d9800717 	ldw	r6,28(sp)
  80afd8:	dc000c17 	ldw	r16,48(sp)
  80afdc:	d9400615 	stw	r5,24(sp)
  80afe0:	3c403836 	bltu	r7,r17,80b0c4 <__divdf3+0x1e0>
  80afe4:	89c03626 	beq	r17,r7,80b0c0 <__divdf3+0x1dc>
  80afe8:	0015883a 	mov	r10,zero
  80afec:	001d883a 	mov	r14,zero
  80aff0:	02c40034 	movhi	r11,4096
  80aff4:	001f883a 	mov	r15,zero
  80aff8:	003f883a 	mov	ra,zero
  80affc:	04800f44 	movi	r18,61
  80b000:	00000f06 	br	80b040 <__divdf3+0x15c>
  80b004:	601d883a 	mov	r14,r12
  80b008:	681f883a 	mov	r15,r13
  80b00c:	400d883a 	mov	r6,r8
  80b010:	100f883a 	mov	r7,r2
  80b014:	3191883a 	add	r8,r6,r6
  80b018:	5808d07a 	srli	r4,r11,1
  80b01c:	4185803a 	cmpltu	r2,r8,r6
  80b020:	39d3883a 	add	r9,r7,r7
  80b024:	28c6b03a 	or	r3,r5,r3
  80b028:	1245883a 	add	r2,r2,r9
  80b02c:	1815883a 	mov	r10,r3
  80b030:	2017883a 	mov	r11,r4
  80b034:	400d883a 	mov	r6,r8
  80b038:	100f883a 	mov	r7,r2
  80b03c:	fc801726 	beq	ra,r18,80b09c <__divdf3+0x1b8>
  80b040:	580a97fa 	slli	r5,r11,31
  80b044:	5006d07a 	srli	r3,r10,1
  80b048:	ffc00044 	addi	ra,ra,1
  80b04c:	3c7ff136 	bltu	r7,r17,80b014 <__divdf3+0x130>
  80b050:	3411c83a 	sub	r8,r6,r16
  80b054:	3205803a 	cmpltu	r2,r6,r8
  80b058:	3c53c83a 	sub	r9,r7,r17
  80b05c:	7298b03a 	or	r12,r14,r10
  80b060:	7adab03a 	or	r13,r15,r11
  80b064:	4885c83a 	sub	r2,r9,r2
  80b068:	89ffe61e 	bne	r17,r7,80b004 <__divdf3+0x120>
  80b06c:	343fe936 	bltu	r6,r16,80b014 <__divdf3+0x130>
  80b070:	003fe406 	br	80b004 <__divdf3+0x120>
  80b074:	9809883a 	mov	r4,r19
  80b078:	d9800415 	stw	r6,16(sp)
  80b07c:	080b8600 	call	80b860 <__pack_d>
  80b080:	dfc01217 	ldw	ra,72(sp)
  80b084:	dcc01117 	ldw	r19,68(sp)
  80b088:	dc801017 	ldw	r18,64(sp)
  80b08c:	dc400f17 	ldw	r17,60(sp)
  80b090:	dc000e17 	ldw	r16,56(sp)
  80b094:	dec01304 	addi	sp,sp,76
  80b098:	f800283a 	ret
  80b09c:	00803fc4 	movi	r2,255
  80b0a0:	7090703a 	and	r8,r14,r2
  80b0a4:	00802004 	movi	r2,128
  80b0a8:	0007883a 	mov	r3,zero
  80b0ac:	0013883a 	mov	r9,zero
  80b0b0:	40800d26 	beq	r8,r2,80b0e8 <__divdf3+0x204>
  80b0b4:	dbc00815 	stw	r15,32(sp)
  80b0b8:	db800715 	stw	r14,28(sp)
  80b0bc:	003fab06 	br	80af6c <__divdf3+0x88>
  80b0c0:	343fc92e 	bgeu	r6,r16,80afe8 <__divdf3+0x104>
  80b0c4:	3185883a 	add	r2,r6,r6
  80b0c8:	1189803a 	cmpltu	r4,r2,r6
  80b0cc:	39c7883a 	add	r3,r7,r7
  80b0d0:	20c9883a 	add	r4,r4,r3
  80b0d4:	297fffc4 	addi	r5,r5,-1
  80b0d8:	100d883a 	mov	r6,r2
  80b0dc:	200f883a 	mov	r7,r4
  80b0e0:	d9400615 	stw	r5,24(sp)
  80b0e4:	003fc006 	br	80afe8 <__divdf3+0x104>
  80b0e8:	483ff21e 	bne	r9,zero,80b0b4 <__divdf3+0x1d0>
  80b0ec:	01004004 	movi	r4,256
  80b0f0:	7104703a 	and	r2,r14,r4
  80b0f4:	10c4b03a 	or	r2,r2,r3
  80b0f8:	103fee1e 	bne	r2,zero,80b0b4 <__divdf3+0x1d0>
  80b0fc:	31c4b03a 	or	r2,r6,r7
  80b100:	103fec26 	beq	r2,zero,80b0b4 <__divdf3+0x1d0>
  80b104:	7205883a 	add	r2,r14,r8
  80b108:	1391803a 	cmpltu	r8,r2,r14
  80b10c:	43d1883a 	add	r8,r8,r15
  80b110:	013fc004 	movi	r4,-256
  80b114:	111c703a 	and	r14,r2,r4
  80b118:	401f883a 	mov	r15,r8
  80b11c:	003fe506 	br	80b0b4 <__divdf3+0x1d0>
  80b120:	8009883a 	mov	r4,r16
  80b124:	003f9206 	br	80af70 <__divdf3+0x8c>
  80b128:	9809883a 	mov	r4,r19
  80b12c:	d8000715 	stw	zero,28(sp)
  80b130:	d8000815 	stw	zero,32(sp)
  80b134:	d8000615 	stw	zero,24(sp)
  80b138:	003f8d06 	br	80af70 <__divdf3+0x8c>

0080b13c <__eqdf2>:
  80b13c:	deffef04 	addi	sp,sp,-68
  80b140:	dc400f15 	stw	r17,60(sp)
  80b144:	dc400404 	addi	r17,sp,16
  80b148:	2005883a 	mov	r2,r4
  80b14c:	2807883a 	mov	r3,r5
  80b150:	dc000e15 	stw	r16,56(sp)
  80b154:	d809883a 	mov	r4,sp
  80b158:	880b883a 	mov	r5,r17
  80b15c:	dc000904 	addi	r16,sp,36
  80b160:	d8c00115 	stw	r3,4(sp)
  80b164:	d8800015 	stw	r2,0(sp)
  80b168:	d9800215 	stw	r6,8(sp)
  80b16c:	dfc01015 	stw	ra,64(sp)
  80b170:	d9c00315 	stw	r7,12(sp)
  80b174:	080bb740 	call	80bb74 <__unpack_d>
  80b178:	d9000204 	addi	r4,sp,8
  80b17c:	800b883a 	mov	r5,r16
  80b180:	080bb740 	call	80bb74 <__unpack_d>
  80b184:	d8800417 	ldw	r2,16(sp)
  80b188:	00c00044 	movi	r3,1
  80b18c:	180d883a 	mov	r6,r3
  80b190:	1880062e 	bgeu	r3,r2,80b1ac <__eqdf2+0x70>
  80b194:	d8800917 	ldw	r2,36(sp)
  80b198:	8809883a 	mov	r4,r17
  80b19c:	800b883a 	mov	r5,r16
  80b1a0:	1880022e 	bgeu	r3,r2,80b1ac <__eqdf2+0x70>
  80b1a4:	080bcac0 	call	80bcac <__fpcmp_parts_d>
  80b1a8:	100d883a 	mov	r6,r2
  80b1ac:	3005883a 	mov	r2,r6
  80b1b0:	dfc01017 	ldw	ra,64(sp)
  80b1b4:	dc400f17 	ldw	r17,60(sp)
  80b1b8:	dc000e17 	ldw	r16,56(sp)
  80b1bc:	dec01104 	addi	sp,sp,68
  80b1c0:	f800283a 	ret

0080b1c4 <__nedf2>:
  80b1c4:	deffef04 	addi	sp,sp,-68
  80b1c8:	dc400f15 	stw	r17,60(sp)
  80b1cc:	dc400404 	addi	r17,sp,16
  80b1d0:	2005883a 	mov	r2,r4
  80b1d4:	2807883a 	mov	r3,r5
  80b1d8:	dc000e15 	stw	r16,56(sp)
  80b1dc:	d809883a 	mov	r4,sp
  80b1e0:	880b883a 	mov	r5,r17
  80b1e4:	dc000904 	addi	r16,sp,36
  80b1e8:	d8c00115 	stw	r3,4(sp)
  80b1ec:	d8800015 	stw	r2,0(sp)
  80b1f0:	d9800215 	stw	r6,8(sp)
  80b1f4:	dfc01015 	stw	ra,64(sp)
  80b1f8:	d9c00315 	stw	r7,12(sp)
  80b1fc:	080bb740 	call	80bb74 <__unpack_d>
  80b200:	d9000204 	addi	r4,sp,8
  80b204:	800b883a 	mov	r5,r16
  80b208:	080bb740 	call	80bb74 <__unpack_d>
  80b20c:	d8800417 	ldw	r2,16(sp)
  80b210:	00c00044 	movi	r3,1
  80b214:	180d883a 	mov	r6,r3
  80b218:	1880062e 	bgeu	r3,r2,80b234 <__nedf2+0x70>
  80b21c:	d8800917 	ldw	r2,36(sp)
  80b220:	8809883a 	mov	r4,r17
  80b224:	800b883a 	mov	r5,r16
  80b228:	1880022e 	bgeu	r3,r2,80b234 <__nedf2+0x70>
  80b22c:	080bcac0 	call	80bcac <__fpcmp_parts_d>
  80b230:	100d883a 	mov	r6,r2
  80b234:	3005883a 	mov	r2,r6
  80b238:	dfc01017 	ldw	ra,64(sp)
  80b23c:	dc400f17 	ldw	r17,60(sp)
  80b240:	dc000e17 	ldw	r16,56(sp)
  80b244:	dec01104 	addi	sp,sp,68
  80b248:	f800283a 	ret

0080b24c <__gtdf2>:
  80b24c:	deffef04 	addi	sp,sp,-68
  80b250:	dc400f15 	stw	r17,60(sp)
  80b254:	dc400404 	addi	r17,sp,16
  80b258:	2005883a 	mov	r2,r4
  80b25c:	2807883a 	mov	r3,r5
  80b260:	dc000e15 	stw	r16,56(sp)
  80b264:	d809883a 	mov	r4,sp
  80b268:	880b883a 	mov	r5,r17
  80b26c:	dc000904 	addi	r16,sp,36
  80b270:	d8c00115 	stw	r3,4(sp)
  80b274:	d8800015 	stw	r2,0(sp)
  80b278:	d9800215 	stw	r6,8(sp)
  80b27c:	dfc01015 	stw	ra,64(sp)
  80b280:	d9c00315 	stw	r7,12(sp)
  80b284:	080bb740 	call	80bb74 <__unpack_d>
  80b288:	d9000204 	addi	r4,sp,8
  80b28c:	800b883a 	mov	r5,r16
  80b290:	080bb740 	call	80bb74 <__unpack_d>
  80b294:	d8800417 	ldw	r2,16(sp)
  80b298:	00c00044 	movi	r3,1
  80b29c:	01bfffc4 	movi	r6,-1
  80b2a0:	1880062e 	bgeu	r3,r2,80b2bc <__gtdf2+0x70>
  80b2a4:	d8800917 	ldw	r2,36(sp)
  80b2a8:	8809883a 	mov	r4,r17
  80b2ac:	800b883a 	mov	r5,r16
  80b2b0:	1880022e 	bgeu	r3,r2,80b2bc <__gtdf2+0x70>
  80b2b4:	080bcac0 	call	80bcac <__fpcmp_parts_d>
  80b2b8:	100d883a 	mov	r6,r2
  80b2bc:	3005883a 	mov	r2,r6
  80b2c0:	dfc01017 	ldw	ra,64(sp)
  80b2c4:	dc400f17 	ldw	r17,60(sp)
  80b2c8:	dc000e17 	ldw	r16,56(sp)
  80b2cc:	dec01104 	addi	sp,sp,68
  80b2d0:	f800283a 	ret

0080b2d4 <__gedf2>:
  80b2d4:	deffef04 	addi	sp,sp,-68
  80b2d8:	dc400f15 	stw	r17,60(sp)
  80b2dc:	dc400404 	addi	r17,sp,16
  80b2e0:	2005883a 	mov	r2,r4
  80b2e4:	2807883a 	mov	r3,r5
  80b2e8:	dc000e15 	stw	r16,56(sp)
  80b2ec:	d809883a 	mov	r4,sp
  80b2f0:	880b883a 	mov	r5,r17
  80b2f4:	dc000904 	addi	r16,sp,36
  80b2f8:	d8c00115 	stw	r3,4(sp)
  80b2fc:	d8800015 	stw	r2,0(sp)
  80b300:	d9800215 	stw	r6,8(sp)
  80b304:	dfc01015 	stw	ra,64(sp)
  80b308:	d9c00315 	stw	r7,12(sp)
  80b30c:	080bb740 	call	80bb74 <__unpack_d>
  80b310:	d9000204 	addi	r4,sp,8
  80b314:	800b883a 	mov	r5,r16
  80b318:	080bb740 	call	80bb74 <__unpack_d>
  80b31c:	d8800417 	ldw	r2,16(sp)
  80b320:	00c00044 	movi	r3,1
  80b324:	01bfffc4 	movi	r6,-1
  80b328:	1880062e 	bgeu	r3,r2,80b344 <__gedf2+0x70>
  80b32c:	d8800917 	ldw	r2,36(sp)
  80b330:	8809883a 	mov	r4,r17
  80b334:	800b883a 	mov	r5,r16
  80b338:	1880022e 	bgeu	r3,r2,80b344 <__gedf2+0x70>
  80b33c:	080bcac0 	call	80bcac <__fpcmp_parts_d>
  80b340:	100d883a 	mov	r6,r2
  80b344:	3005883a 	mov	r2,r6
  80b348:	dfc01017 	ldw	ra,64(sp)
  80b34c:	dc400f17 	ldw	r17,60(sp)
  80b350:	dc000e17 	ldw	r16,56(sp)
  80b354:	dec01104 	addi	sp,sp,68
  80b358:	f800283a 	ret

0080b35c <__ltdf2>:
  80b35c:	deffef04 	addi	sp,sp,-68
  80b360:	dc400f15 	stw	r17,60(sp)
  80b364:	dc400404 	addi	r17,sp,16
  80b368:	2005883a 	mov	r2,r4
  80b36c:	2807883a 	mov	r3,r5
  80b370:	dc000e15 	stw	r16,56(sp)
  80b374:	d809883a 	mov	r4,sp
  80b378:	880b883a 	mov	r5,r17
  80b37c:	dc000904 	addi	r16,sp,36
  80b380:	d8c00115 	stw	r3,4(sp)
  80b384:	d8800015 	stw	r2,0(sp)
  80b388:	d9800215 	stw	r6,8(sp)
  80b38c:	dfc01015 	stw	ra,64(sp)
  80b390:	d9c00315 	stw	r7,12(sp)
  80b394:	080bb740 	call	80bb74 <__unpack_d>
  80b398:	d9000204 	addi	r4,sp,8
  80b39c:	800b883a 	mov	r5,r16
  80b3a0:	080bb740 	call	80bb74 <__unpack_d>
  80b3a4:	d8800417 	ldw	r2,16(sp)
  80b3a8:	00c00044 	movi	r3,1
  80b3ac:	180d883a 	mov	r6,r3
  80b3b0:	1880062e 	bgeu	r3,r2,80b3cc <__ltdf2+0x70>
  80b3b4:	d8800917 	ldw	r2,36(sp)
  80b3b8:	8809883a 	mov	r4,r17
  80b3bc:	800b883a 	mov	r5,r16
  80b3c0:	1880022e 	bgeu	r3,r2,80b3cc <__ltdf2+0x70>
  80b3c4:	080bcac0 	call	80bcac <__fpcmp_parts_d>
  80b3c8:	100d883a 	mov	r6,r2
  80b3cc:	3005883a 	mov	r2,r6
  80b3d0:	dfc01017 	ldw	ra,64(sp)
  80b3d4:	dc400f17 	ldw	r17,60(sp)
  80b3d8:	dc000e17 	ldw	r16,56(sp)
  80b3dc:	dec01104 	addi	sp,sp,68
  80b3e0:	f800283a 	ret

0080b3e4 <__floatsidf>:
  80b3e4:	2006d7fa 	srli	r3,r4,31
  80b3e8:	defff604 	addi	sp,sp,-40
  80b3ec:	008000c4 	movi	r2,3
  80b3f0:	dfc00915 	stw	ra,36(sp)
  80b3f4:	dcc00815 	stw	r19,32(sp)
  80b3f8:	dc800715 	stw	r18,28(sp)
  80b3fc:	dc400615 	stw	r17,24(sp)
  80b400:	dc000515 	stw	r16,20(sp)
  80b404:	d8800015 	stw	r2,0(sp)
  80b408:	d8c00115 	stw	r3,4(sp)
  80b40c:	20000f1e 	bne	r4,zero,80b44c <__floatsidf+0x68>
  80b410:	00800084 	movi	r2,2
  80b414:	d8800015 	stw	r2,0(sp)
  80b418:	d809883a 	mov	r4,sp
  80b41c:	080b8600 	call	80b860 <__pack_d>
  80b420:	1009883a 	mov	r4,r2
  80b424:	180b883a 	mov	r5,r3
  80b428:	2005883a 	mov	r2,r4
  80b42c:	2807883a 	mov	r3,r5
  80b430:	dfc00917 	ldw	ra,36(sp)
  80b434:	dcc00817 	ldw	r19,32(sp)
  80b438:	dc800717 	ldw	r18,28(sp)
  80b43c:	dc400617 	ldw	r17,24(sp)
  80b440:	dc000517 	ldw	r16,20(sp)
  80b444:	dec00a04 	addi	sp,sp,40
  80b448:	f800283a 	ret
  80b44c:	00800f04 	movi	r2,60
  80b450:	1807003a 	cmpeq	r3,r3,zero
  80b454:	d8800215 	stw	r2,8(sp)
  80b458:	18001126 	beq	r3,zero,80b4a0 <__floatsidf+0xbc>
  80b45c:	0027883a 	mov	r19,zero
  80b460:	2025883a 	mov	r18,r4
  80b464:	d9000315 	stw	r4,12(sp)
  80b468:	dcc00415 	stw	r19,16(sp)
  80b46c:	080b7e00 	call	80b7e0 <__clzsi2>
  80b470:	11000744 	addi	r4,r2,29
  80b474:	013fe80e 	bge	zero,r4,80b418 <__floatsidf+0x34>
  80b478:	10bfff44 	addi	r2,r2,-3
  80b47c:	10000c16 	blt	r2,zero,80b4b0 <__floatsidf+0xcc>
  80b480:	90a2983a 	sll	r17,r18,r2
  80b484:	0021883a 	mov	r16,zero
  80b488:	d8800217 	ldw	r2,8(sp)
  80b48c:	dc400415 	stw	r17,16(sp)
  80b490:	dc000315 	stw	r16,12(sp)
  80b494:	1105c83a 	sub	r2,r2,r4
  80b498:	d8800215 	stw	r2,8(sp)
  80b49c:	003fde06 	br	80b418 <__floatsidf+0x34>
  80b4a0:	00a00034 	movhi	r2,32768
  80b4a4:	20800a26 	beq	r4,r2,80b4d0 <__floatsidf+0xec>
  80b4a8:	0109c83a 	sub	r4,zero,r4
  80b4ac:	003feb06 	br	80b45c <__floatsidf+0x78>
  80b4b0:	9006d07a 	srli	r3,r18,1
  80b4b4:	008007c4 	movi	r2,31
  80b4b8:	1105c83a 	sub	r2,r2,r4
  80b4bc:	1886d83a 	srl	r3,r3,r2
  80b4c0:	9922983a 	sll	r17,r19,r4
  80b4c4:	9120983a 	sll	r16,r18,r4
  80b4c8:	1c62b03a 	or	r17,r3,r17
  80b4cc:	003fee06 	br	80b488 <__floatsidf+0xa4>
  80b4d0:	0009883a 	mov	r4,zero
  80b4d4:	01707834 	movhi	r5,49632
  80b4d8:	003fd306 	br	80b428 <__floatsidf+0x44>

0080b4dc <__fixdfsi>:
  80b4dc:	defff804 	addi	sp,sp,-32
  80b4e0:	2005883a 	mov	r2,r4
  80b4e4:	2807883a 	mov	r3,r5
  80b4e8:	d809883a 	mov	r4,sp
  80b4ec:	d9400204 	addi	r5,sp,8
  80b4f0:	d8c00115 	stw	r3,4(sp)
  80b4f4:	d8800015 	stw	r2,0(sp)
  80b4f8:	dfc00715 	stw	ra,28(sp)
  80b4fc:	080bb740 	call	80bb74 <__unpack_d>
  80b500:	d8c00217 	ldw	r3,8(sp)
  80b504:	00800084 	movi	r2,2
  80b508:	1880051e 	bne	r3,r2,80b520 <__fixdfsi+0x44>
  80b50c:	0007883a 	mov	r3,zero
  80b510:	1805883a 	mov	r2,r3
  80b514:	dfc00717 	ldw	ra,28(sp)
  80b518:	dec00804 	addi	sp,sp,32
  80b51c:	f800283a 	ret
  80b520:	00800044 	movi	r2,1
  80b524:	10fff92e 	bgeu	r2,r3,80b50c <__fixdfsi+0x30>
  80b528:	00800104 	movi	r2,4
  80b52c:	18800426 	beq	r3,r2,80b540 <__fixdfsi+0x64>
  80b530:	d8c00417 	ldw	r3,16(sp)
  80b534:	183ff516 	blt	r3,zero,80b50c <__fixdfsi+0x30>
  80b538:	00800784 	movi	r2,30
  80b53c:	10c0080e 	bge	r2,r3,80b560 <__fixdfsi+0x84>
  80b540:	d8800317 	ldw	r2,12(sp)
  80b544:	1000121e 	bne	r2,zero,80b590 <__fixdfsi+0xb4>
  80b548:	00e00034 	movhi	r3,32768
  80b54c:	18ffffc4 	addi	r3,r3,-1
  80b550:	1805883a 	mov	r2,r3
  80b554:	dfc00717 	ldw	ra,28(sp)
  80b558:	dec00804 	addi	sp,sp,32
  80b55c:	f800283a 	ret
  80b560:	00800f04 	movi	r2,60
  80b564:	10d1c83a 	sub	r8,r2,r3
  80b568:	40bff804 	addi	r2,r8,-32
  80b56c:	d9800517 	ldw	r6,20(sp)
  80b570:	d9c00617 	ldw	r7,24(sp)
  80b574:	10000816 	blt	r2,zero,80b598 <__fixdfsi+0xbc>
  80b578:	3888d83a 	srl	r4,r7,r2
  80b57c:	d8800317 	ldw	r2,12(sp)
  80b580:	2007883a 	mov	r3,r4
  80b584:	103fe226 	beq	r2,zero,80b510 <__fixdfsi+0x34>
  80b588:	0107c83a 	sub	r3,zero,r4
  80b58c:	003fe006 	br	80b510 <__fixdfsi+0x34>
  80b590:	00e00034 	movhi	r3,32768
  80b594:	003fde06 	br	80b510 <__fixdfsi+0x34>
  80b598:	39c7883a 	add	r3,r7,r7
  80b59c:	008007c4 	movi	r2,31
  80b5a0:	1205c83a 	sub	r2,r2,r8
  80b5a4:	1886983a 	sll	r3,r3,r2
  80b5a8:	3208d83a 	srl	r4,r6,r8
  80b5ac:	1908b03a 	or	r4,r3,r4
  80b5b0:	003ff206 	br	80b57c <__fixdfsi+0xa0>

0080b5b4 <__floatunsidf>:
  80b5b4:	defff204 	addi	sp,sp,-56
  80b5b8:	dfc00d15 	stw	ra,52(sp)
  80b5bc:	ddc00c15 	stw	r23,48(sp)
  80b5c0:	dd800b15 	stw	r22,44(sp)
  80b5c4:	dd400a15 	stw	r21,40(sp)
  80b5c8:	dd000915 	stw	r20,36(sp)
  80b5cc:	dcc00815 	stw	r19,32(sp)
  80b5d0:	dc800715 	stw	r18,28(sp)
  80b5d4:	dc400615 	stw	r17,24(sp)
  80b5d8:	dc000515 	stw	r16,20(sp)
  80b5dc:	d8000115 	stw	zero,4(sp)
  80b5e0:	20000f1e 	bne	r4,zero,80b620 <__floatunsidf+0x6c>
  80b5e4:	00800084 	movi	r2,2
  80b5e8:	d8800015 	stw	r2,0(sp)
  80b5ec:	d809883a 	mov	r4,sp
  80b5f0:	080b8600 	call	80b860 <__pack_d>
  80b5f4:	dfc00d17 	ldw	ra,52(sp)
  80b5f8:	ddc00c17 	ldw	r23,48(sp)
  80b5fc:	dd800b17 	ldw	r22,44(sp)
  80b600:	dd400a17 	ldw	r21,40(sp)
  80b604:	dd000917 	ldw	r20,36(sp)
  80b608:	dcc00817 	ldw	r19,32(sp)
  80b60c:	dc800717 	ldw	r18,28(sp)
  80b610:	dc400617 	ldw	r17,24(sp)
  80b614:	dc000517 	ldw	r16,20(sp)
  80b618:	dec00e04 	addi	sp,sp,56
  80b61c:	f800283a 	ret
  80b620:	008000c4 	movi	r2,3
  80b624:	00c00f04 	movi	r3,60
  80b628:	002f883a 	mov	r23,zero
  80b62c:	202d883a 	mov	r22,r4
  80b630:	d8800015 	stw	r2,0(sp)
  80b634:	d8c00215 	stw	r3,8(sp)
  80b638:	d9000315 	stw	r4,12(sp)
  80b63c:	ddc00415 	stw	r23,16(sp)
  80b640:	080b7e00 	call	80b7e0 <__clzsi2>
  80b644:	12400744 	addi	r9,r2,29
  80b648:	48000b16 	blt	r9,zero,80b678 <__floatunsidf+0xc4>
  80b64c:	483fe726 	beq	r9,zero,80b5ec <__floatunsidf+0x38>
  80b650:	10bfff44 	addi	r2,r2,-3
  80b654:	10002e16 	blt	r2,zero,80b710 <__floatunsidf+0x15c>
  80b658:	b0a2983a 	sll	r17,r22,r2
  80b65c:	0021883a 	mov	r16,zero
  80b660:	d8800217 	ldw	r2,8(sp)
  80b664:	dc400415 	stw	r17,16(sp)
  80b668:	dc000315 	stw	r16,12(sp)
  80b66c:	1245c83a 	sub	r2,r2,r9
  80b670:	d8800215 	stw	r2,8(sp)
  80b674:	003fdd06 	br	80b5ec <__floatunsidf+0x38>
  80b678:	0255c83a 	sub	r10,zero,r9
  80b67c:	51bff804 	addi	r6,r10,-32
  80b680:	30001b16 	blt	r6,zero,80b6f0 <__floatunsidf+0x13c>
  80b684:	b9a8d83a 	srl	r20,r23,r6
  80b688:	002b883a 	mov	r21,zero
  80b68c:	000f883a 	mov	r7,zero
  80b690:	01000044 	movi	r4,1
  80b694:	0011883a 	mov	r8,zero
  80b698:	30002516 	blt	r6,zero,80b730 <__floatunsidf+0x17c>
  80b69c:	21a6983a 	sll	r19,r4,r6
  80b6a0:	0025883a 	mov	r18,zero
  80b6a4:	00bfffc4 	movi	r2,-1
  80b6a8:	9089883a 	add	r4,r18,r2
  80b6ac:	988b883a 	add	r5,r19,r2
  80b6b0:	248d803a 	cmpltu	r6,r4,r18
  80b6b4:	314b883a 	add	r5,r6,r5
  80b6b8:	b104703a 	and	r2,r22,r4
  80b6bc:	b946703a 	and	r3,r23,r5
  80b6c0:	10c4b03a 	or	r2,r2,r3
  80b6c4:	10000226 	beq	r2,zero,80b6d0 <__floatunsidf+0x11c>
  80b6c8:	01c00044 	movi	r7,1
  80b6cc:	0011883a 	mov	r8,zero
  80b6d0:	d9000217 	ldw	r4,8(sp)
  80b6d4:	a1c4b03a 	or	r2,r20,r7
  80b6d8:	aa06b03a 	or	r3,r21,r8
  80b6dc:	2249c83a 	sub	r4,r4,r9
  80b6e0:	d8c00415 	stw	r3,16(sp)
  80b6e4:	d9000215 	stw	r4,8(sp)
  80b6e8:	d8800315 	stw	r2,12(sp)
  80b6ec:	003fbf06 	br	80b5ec <__floatunsidf+0x38>
  80b6f0:	bdc7883a 	add	r3,r23,r23
  80b6f4:	008007c4 	movi	r2,31
  80b6f8:	1285c83a 	sub	r2,r2,r10
  80b6fc:	1886983a 	sll	r3,r3,r2
  80b700:	b2a8d83a 	srl	r20,r22,r10
  80b704:	baaad83a 	srl	r21,r23,r10
  80b708:	1d28b03a 	or	r20,r3,r20
  80b70c:	003fdf06 	br	80b68c <__floatunsidf+0xd8>
  80b710:	b006d07a 	srli	r3,r22,1
  80b714:	008007c4 	movi	r2,31
  80b718:	1245c83a 	sub	r2,r2,r9
  80b71c:	1886d83a 	srl	r3,r3,r2
  80b720:	ba62983a 	sll	r17,r23,r9
  80b724:	b260983a 	sll	r16,r22,r9
  80b728:	1c62b03a 	or	r17,r3,r17
  80b72c:	003fcc06 	br	80b660 <__floatunsidf+0xac>
  80b730:	2006d07a 	srli	r3,r4,1
  80b734:	008007c4 	movi	r2,31
  80b738:	1285c83a 	sub	r2,r2,r10
  80b73c:	18a6d83a 	srl	r19,r3,r2
  80b740:	22a4983a 	sll	r18,r4,r10
  80b744:	003fd706 	br	80b6a4 <__floatunsidf+0xf0>

0080b748 <__muldi3>:
  80b748:	2011883a 	mov	r8,r4
  80b74c:	427fffcc 	andi	r9,r8,65535
  80b750:	4018d43a 	srli	r12,r8,16
  80b754:	32bfffcc 	andi	r10,r6,65535
  80b758:	3016d43a 	srli	r11,r6,16
  80b75c:	4a85383a 	mul	r2,r9,r10
  80b760:	6295383a 	mul	r10,r12,r10
  80b764:	4ad3383a 	mul	r9,r9,r11
  80b768:	113fffcc 	andi	r4,r2,65535
  80b76c:	1004d43a 	srli	r2,r2,16
  80b770:	4a93883a 	add	r9,r9,r10
  80b774:	3807883a 	mov	r3,r7
  80b778:	1245883a 	add	r2,r2,r9
  80b77c:	280f883a 	mov	r7,r5
  80b780:	180b883a 	mov	r5,r3
  80b784:	1006943a 	slli	r3,r2,16
  80b788:	defffd04 	addi	sp,sp,-12
  80b78c:	dc800215 	stw	r18,8(sp)
  80b790:	1907883a 	add	r3,r3,r4
  80b794:	dc400115 	stw	r17,4(sp)
  80b798:	dc000015 	stw	r16,0(sp)
  80b79c:	4165383a 	mul	r18,r8,r5
  80b7a0:	31e3383a 	mul	r17,r6,r7
  80b7a4:	1012d43a 	srli	r9,r2,16
  80b7a8:	62d9383a 	mul	r12,r12,r11
  80b7ac:	181f883a 	mov	r15,r3
  80b7b0:	1280022e 	bgeu	r2,r10,80b7bc <__muldi3+0x74>
  80b7b4:	00800074 	movhi	r2,1
  80b7b8:	6099883a 	add	r12,r12,r2
  80b7bc:	624d883a 	add	r6,r12,r9
  80b7c0:	9187883a 	add	r3,r18,r6
  80b7c4:	88c7883a 	add	r3,r17,r3
  80b7c8:	7805883a 	mov	r2,r15
  80b7cc:	dc800217 	ldw	r18,8(sp)
  80b7d0:	dc400117 	ldw	r17,4(sp)
  80b7d4:	dc000017 	ldw	r16,0(sp)
  80b7d8:	dec00304 	addi	sp,sp,12
  80b7dc:	f800283a 	ret

0080b7e0 <__clzsi2>:
  80b7e0:	00bfffd4 	movui	r2,65535
  80b7e4:	11000e36 	bltu	r2,r4,80b820 <__clzsi2+0x40>
  80b7e8:	00803fc4 	movi	r2,255
  80b7ec:	01400204 	movi	r5,8
  80b7f0:	0007883a 	mov	r3,zero
  80b7f4:	11001036 	bltu	r2,r4,80b838 <__clzsi2+0x58>
  80b7f8:	000b883a 	mov	r5,zero
  80b7fc:	20c6d83a 	srl	r3,r4,r3
  80b800:	00802074 	movhi	r2,129
  80b804:	10809604 	addi	r2,r2,600
  80b808:	1887883a 	add	r3,r3,r2
  80b80c:	18800003 	ldbu	r2,0(r3)
  80b810:	00c00804 	movi	r3,32
  80b814:	2885883a 	add	r2,r5,r2
  80b818:	1885c83a 	sub	r2,r3,r2
  80b81c:	f800283a 	ret
  80b820:	01400404 	movi	r5,16
  80b824:	00804034 	movhi	r2,256
  80b828:	10bfffc4 	addi	r2,r2,-1
  80b82c:	2807883a 	mov	r3,r5
  80b830:	113ff22e 	bgeu	r2,r4,80b7fc <__clzsi2+0x1c>
  80b834:	01400604 	movi	r5,24
  80b838:	2807883a 	mov	r3,r5
  80b83c:	20c6d83a 	srl	r3,r4,r3
  80b840:	00802074 	movhi	r2,129
  80b844:	10809604 	addi	r2,r2,600
  80b848:	1887883a 	add	r3,r3,r2
  80b84c:	18800003 	ldbu	r2,0(r3)
  80b850:	00c00804 	movi	r3,32
  80b854:	2885883a 	add	r2,r5,r2
  80b858:	1885c83a 	sub	r2,r3,r2
  80b85c:	f800283a 	ret

0080b860 <__pack_d>:
  80b860:	20c00017 	ldw	r3,0(r4)
  80b864:	defffd04 	addi	sp,sp,-12
  80b868:	dc000015 	stw	r16,0(sp)
  80b86c:	dc800215 	stw	r18,8(sp)
  80b870:	dc400115 	stw	r17,4(sp)
  80b874:	00800044 	movi	r2,1
  80b878:	22000317 	ldw	r8,12(r4)
  80b87c:	001f883a 	mov	r15,zero
  80b880:	22400417 	ldw	r9,16(r4)
  80b884:	24000117 	ldw	r16,4(r4)
  80b888:	10c0552e 	bgeu	r2,r3,80b9e0 <__pack_d+0x180>
  80b88c:	00800104 	movi	r2,4
  80b890:	18804f26 	beq	r3,r2,80b9d0 <__pack_d+0x170>
  80b894:	00800084 	movi	r2,2
  80b898:	18800226 	beq	r3,r2,80b8a4 <__pack_d+0x44>
  80b89c:	4244b03a 	or	r2,r8,r9
  80b8a0:	10001a1e 	bne	r2,zero,80b90c <__pack_d+0xac>
  80b8a4:	000d883a 	mov	r6,zero
  80b8a8:	000f883a 	mov	r7,zero
  80b8ac:	0011883a 	mov	r8,zero
  80b8b0:	00800434 	movhi	r2,16
  80b8b4:	10bfffc4 	addi	r2,r2,-1
  80b8b8:	301d883a 	mov	r14,r6
  80b8bc:	3884703a 	and	r2,r7,r2
  80b8c0:	400a953a 	slli	r5,r8,20
  80b8c4:	79bffc2c 	andhi	r6,r15,65520
  80b8c8:	308cb03a 	or	r6,r6,r2
  80b8cc:	00e00434 	movhi	r3,32784
  80b8d0:	18ffffc4 	addi	r3,r3,-1
  80b8d4:	800497fa 	slli	r2,r16,31
  80b8d8:	30c6703a 	and	r3,r6,r3
  80b8dc:	1946b03a 	or	r3,r3,r5
  80b8e0:	01600034 	movhi	r5,32768
  80b8e4:	297fffc4 	addi	r5,r5,-1
  80b8e8:	194a703a 	and	r5,r3,r5
  80b8ec:	288ab03a 	or	r5,r5,r2
  80b8f0:	2807883a 	mov	r3,r5
  80b8f4:	7005883a 	mov	r2,r14
  80b8f8:	dc800217 	ldw	r18,8(sp)
  80b8fc:	dc400117 	ldw	r17,4(sp)
  80b900:	dc000017 	ldw	r16,0(sp)
  80b904:	dec00304 	addi	sp,sp,12
  80b908:	f800283a 	ret
  80b90c:	21000217 	ldw	r4,8(r4)
  80b910:	00bf0084 	movi	r2,-1022
  80b914:	20803f16 	blt	r4,r2,80ba14 <__pack_d+0x1b4>
  80b918:	0080ffc4 	movi	r2,1023
  80b91c:	11002c16 	blt	r2,r4,80b9d0 <__pack_d+0x170>
  80b920:	00803fc4 	movi	r2,255
  80b924:	408c703a 	and	r6,r8,r2
  80b928:	00802004 	movi	r2,128
  80b92c:	0007883a 	mov	r3,zero
  80b930:	000f883a 	mov	r7,zero
  80b934:	2280ffc4 	addi	r10,r4,1023
  80b938:	30801e26 	beq	r6,r2,80b9b4 <__pack_d+0x154>
  80b93c:	00801fc4 	movi	r2,127
  80b940:	4089883a 	add	r4,r8,r2
  80b944:	220d803a 	cmpltu	r6,r4,r8
  80b948:	324d883a 	add	r6,r6,r9
  80b94c:	2011883a 	mov	r8,r4
  80b950:	3013883a 	mov	r9,r6
  80b954:	00880034 	movhi	r2,8192
  80b958:	10bfffc4 	addi	r2,r2,-1
  80b95c:	12400d36 	bltu	r2,r9,80b994 <__pack_d+0x134>
  80b960:	4804963a 	slli	r2,r9,24
  80b964:	400cd23a 	srli	r6,r8,8
  80b968:	480ed23a 	srli	r7,r9,8
  80b96c:	013fffc4 	movi	r4,-1
  80b970:	118cb03a 	or	r6,r2,r6
  80b974:	01400434 	movhi	r5,16
  80b978:	297fffc4 	addi	r5,r5,-1
  80b97c:	3104703a 	and	r2,r6,r4
  80b980:	3946703a 	and	r3,r7,r5
  80b984:	5201ffcc 	andi	r8,r10,2047
  80b988:	100d883a 	mov	r6,r2
  80b98c:	180f883a 	mov	r7,r3
  80b990:	003fc706 	br	80b8b0 <__pack_d+0x50>
  80b994:	480897fa 	slli	r4,r9,31
  80b998:	4004d07a 	srli	r2,r8,1
  80b99c:	4806d07a 	srli	r3,r9,1
  80b9a0:	52800044 	addi	r10,r10,1
  80b9a4:	2084b03a 	or	r2,r4,r2
  80b9a8:	1011883a 	mov	r8,r2
  80b9ac:	1813883a 	mov	r9,r3
  80b9b0:	003feb06 	br	80b960 <__pack_d+0x100>
  80b9b4:	383fe11e 	bne	r7,zero,80b93c <__pack_d+0xdc>
  80b9b8:	01004004 	movi	r4,256
  80b9bc:	4104703a 	and	r2,r8,r4
  80b9c0:	10c4b03a 	or	r2,r2,r3
  80b9c4:	103fe326 	beq	r2,zero,80b954 <__pack_d+0xf4>
  80b9c8:	3005883a 	mov	r2,r6
  80b9cc:	003fdc06 	br	80b940 <__pack_d+0xe0>
  80b9d0:	000d883a 	mov	r6,zero
  80b9d4:	000f883a 	mov	r7,zero
  80b9d8:	0201ffc4 	movi	r8,2047
  80b9dc:	003fb406 	br	80b8b0 <__pack_d+0x50>
  80b9e0:	0005883a 	mov	r2,zero
  80b9e4:	00c00234 	movhi	r3,8
  80b9e8:	408cb03a 	or	r6,r8,r2
  80b9ec:	48ceb03a 	or	r7,r9,r3
  80b9f0:	013fffc4 	movi	r4,-1
  80b9f4:	01400434 	movhi	r5,16
  80b9f8:	297fffc4 	addi	r5,r5,-1
  80b9fc:	3104703a 	and	r2,r6,r4
  80ba00:	3946703a 	and	r3,r7,r5
  80ba04:	100d883a 	mov	r6,r2
  80ba08:	180f883a 	mov	r7,r3
  80ba0c:	0201ffc4 	movi	r8,2047
  80ba10:	003fa706 	br	80b8b0 <__pack_d+0x50>
  80ba14:	1109c83a 	sub	r4,r2,r4
  80ba18:	00800e04 	movi	r2,56
  80ba1c:	11004316 	blt	r2,r4,80bb2c <__pack_d+0x2cc>
  80ba20:	21fff804 	addi	r7,r4,-32
  80ba24:	38004516 	blt	r7,zero,80bb3c <__pack_d+0x2dc>
  80ba28:	49d8d83a 	srl	r12,r9,r7
  80ba2c:	001b883a 	mov	r13,zero
  80ba30:	0023883a 	mov	r17,zero
  80ba34:	01400044 	movi	r5,1
  80ba38:	0025883a 	mov	r18,zero
  80ba3c:	38004716 	blt	r7,zero,80bb5c <__pack_d+0x2fc>
  80ba40:	29d6983a 	sll	r11,r5,r7
  80ba44:	0015883a 	mov	r10,zero
  80ba48:	00bfffc4 	movi	r2,-1
  80ba4c:	5089883a 	add	r4,r10,r2
  80ba50:	588b883a 	add	r5,r11,r2
  80ba54:	228d803a 	cmpltu	r6,r4,r10
  80ba58:	314b883a 	add	r5,r6,r5
  80ba5c:	4104703a 	and	r2,r8,r4
  80ba60:	4946703a 	and	r3,r9,r5
  80ba64:	10c4b03a 	or	r2,r2,r3
  80ba68:	10000226 	beq	r2,zero,80ba74 <__pack_d+0x214>
  80ba6c:	04400044 	movi	r17,1
  80ba70:	0025883a 	mov	r18,zero
  80ba74:	00803fc4 	movi	r2,255
  80ba78:	644eb03a 	or	r7,r12,r17
  80ba7c:	3892703a 	and	r9,r7,r2
  80ba80:	00802004 	movi	r2,128
  80ba84:	6c90b03a 	or	r8,r13,r18
  80ba88:	0015883a 	mov	r10,zero
  80ba8c:	48801626 	beq	r9,r2,80bae8 <__pack_d+0x288>
  80ba90:	01001fc4 	movi	r4,127
  80ba94:	3905883a 	add	r2,r7,r4
  80ba98:	11cd803a 	cmpltu	r6,r2,r7
  80ba9c:	320d883a 	add	r6,r6,r8
  80baa0:	100f883a 	mov	r7,r2
  80baa4:	00840034 	movhi	r2,4096
  80baa8:	10bfffc4 	addi	r2,r2,-1
  80baac:	3011883a 	mov	r8,r6
  80bab0:	0007883a 	mov	r3,zero
  80bab4:	11801b36 	bltu	r2,r6,80bb24 <__pack_d+0x2c4>
  80bab8:	4004963a 	slli	r2,r8,24
  80babc:	3808d23a 	srli	r4,r7,8
  80bac0:	400ad23a 	srli	r5,r8,8
  80bac4:	1813883a 	mov	r9,r3
  80bac8:	1108b03a 	or	r4,r2,r4
  80bacc:	00bfffc4 	movi	r2,-1
  80bad0:	00c00434 	movhi	r3,16
  80bad4:	18ffffc4 	addi	r3,r3,-1
  80bad8:	208c703a 	and	r6,r4,r2
  80badc:	28ce703a 	and	r7,r5,r3
  80bae0:	4a01ffcc 	andi	r8,r9,2047
  80bae4:	003f7206 	br	80b8b0 <__pack_d+0x50>
  80bae8:	503fe91e 	bne	r10,zero,80ba90 <__pack_d+0x230>
  80baec:	01004004 	movi	r4,256
  80baf0:	3904703a 	and	r2,r7,r4
  80baf4:	0007883a 	mov	r3,zero
  80baf8:	10c4b03a 	or	r2,r2,r3
  80bafc:	10000626 	beq	r2,zero,80bb18 <__pack_d+0x2b8>
  80bb00:	3a45883a 	add	r2,r7,r9
  80bb04:	11cd803a 	cmpltu	r6,r2,r7
  80bb08:	320d883a 	add	r6,r6,r8
  80bb0c:	100f883a 	mov	r7,r2
  80bb10:	3011883a 	mov	r8,r6
  80bb14:	0007883a 	mov	r3,zero
  80bb18:	00840034 	movhi	r2,4096
  80bb1c:	10bfffc4 	addi	r2,r2,-1
  80bb20:	123fe52e 	bgeu	r2,r8,80bab8 <__pack_d+0x258>
  80bb24:	00c00044 	movi	r3,1
  80bb28:	003fe306 	br	80bab8 <__pack_d+0x258>
  80bb2c:	0009883a 	mov	r4,zero
  80bb30:	0013883a 	mov	r9,zero
  80bb34:	000b883a 	mov	r5,zero
  80bb38:	003fe406 	br	80bacc <__pack_d+0x26c>
  80bb3c:	4a47883a 	add	r3,r9,r9
  80bb40:	008007c4 	movi	r2,31
  80bb44:	1105c83a 	sub	r2,r2,r4
  80bb48:	1886983a 	sll	r3,r3,r2
  80bb4c:	4118d83a 	srl	r12,r8,r4
  80bb50:	491ad83a 	srl	r13,r9,r4
  80bb54:	1b18b03a 	or	r12,r3,r12
  80bb58:	003fb506 	br	80ba30 <__pack_d+0x1d0>
  80bb5c:	2806d07a 	srli	r3,r5,1
  80bb60:	008007c4 	movi	r2,31
  80bb64:	1105c83a 	sub	r2,r2,r4
  80bb68:	1896d83a 	srl	r11,r3,r2
  80bb6c:	2914983a 	sll	r10,r5,r4
  80bb70:	003fb506 	br	80ba48 <__pack_d+0x1e8>

0080bb74 <__unpack_d>:
  80bb74:	20c00117 	ldw	r3,4(r4)
  80bb78:	22400017 	ldw	r9,0(r4)
  80bb7c:	00800434 	movhi	r2,16
  80bb80:	10bfffc4 	addi	r2,r2,-1
  80bb84:	1808d53a 	srli	r4,r3,20
  80bb88:	180cd7fa 	srli	r6,r3,31
  80bb8c:	1894703a 	and	r10,r3,r2
  80bb90:	2201ffcc 	andi	r8,r4,2047
  80bb94:	281b883a 	mov	r13,r5
  80bb98:	4817883a 	mov	r11,r9
  80bb9c:	29800115 	stw	r6,4(r5)
  80bba0:	5019883a 	mov	r12,r10
  80bba4:	40001e1e 	bne	r8,zero,80bc20 <__unpack_d+0xac>
  80bba8:	4a84b03a 	or	r2,r9,r10
  80bbac:	10001926 	beq	r2,zero,80bc14 <__unpack_d+0xa0>
  80bbb0:	4804d63a 	srli	r2,r9,24
  80bbb4:	500c923a 	slli	r6,r10,8
  80bbb8:	013f0084 	movi	r4,-1022
  80bbbc:	00c40034 	movhi	r3,4096
  80bbc0:	18ffffc4 	addi	r3,r3,-1
  80bbc4:	118cb03a 	or	r6,r2,r6
  80bbc8:	008000c4 	movi	r2,3
  80bbcc:	480a923a 	slli	r5,r9,8
  80bbd0:	68800015 	stw	r2,0(r13)
  80bbd4:	69000215 	stw	r4,8(r13)
  80bbd8:	19800b36 	bltu	r3,r6,80bc08 <__unpack_d+0x94>
  80bbdc:	200f883a 	mov	r7,r4
  80bbe0:	1811883a 	mov	r8,r3
  80bbe4:	2945883a 	add	r2,r5,r5
  80bbe8:	1149803a 	cmpltu	r4,r2,r5
  80bbec:	3187883a 	add	r3,r6,r6
  80bbf0:	20c9883a 	add	r4,r4,r3
  80bbf4:	100b883a 	mov	r5,r2
  80bbf8:	200d883a 	mov	r6,r4
  80bbfc:	39ffffc4 	addi	r7,r7,-1
  80bc00:	413ff82e 	bgeu	r8,r4,80bbe4 <__unpack_d+0x70>
  80bc04:	69c00215 	stw	r7,8(r13)
  80bc08:	69800415 	stw	r6,16(r13)
  80bc0c:	69400315 	stw	r5,12(r13)
  80bc10:	f800283a 	ret
  80bc14:	00800084 	movi	r2,2
  80bc18:	28800015 	stw	r2,0(r5)
  80bc1c:	f800283a 	ret
  80bc20:	0081ffc4 	movi	r2,2047
  80bc24:	40800f26 	beq	r8,r2,80bc64 <__unpack_d+0xf0>
  80bc28:	480cd63a 	srli	r6,r9,24
  80bc2c:	5006923a 	slli	r3,r10,8
  80bc30:	4804923a 	slli	r2,r9,8
  80bc34:	0009883a 	mov	r4,zero
  80bc38:	30c6b03a 	or	r3,r6,r3
  80bc3c:	01440034 	movhi	r5,4096
  80bc40:	110cb03a 	or	r6,r2,r4
  80bc44:	423f0044 	addi	r8,r8,-1023
  80bc48:	194eb03a 	or	r7,r3,r5
  80bc4c:	008000c4 	movi	r2,3
  80bc50:	69c00415 	stw	r7,16(r13)
  80bc54:	6a000215 	stw	r8,8(r13)
  80bc58:	68800015 	stw	r2,0(r13)
  80bc5c:	69800315 	stw	r6,12(r13)
  80bc60:	f800283a 	ret
  80bc64:	4a84b03a 	or	r2,r9,r10
  80bc68:	1000031e 	bne	r2,zero,80bc78 <__unpack_d+0x104>
  80bc6c:	00800104 	movi	r2,4
  80bc70:	28800015 	stw	r2,0(r5)
  80bc74:	f800283a 	ret
  80bc78:	0009883a 	mov	r4,zero
  80bc7c:	01400234 	movhi	r5,8
  80bc80:	4904703a 	and	r2,r9,r4
  80bc84:	5146703a 	and	r3,r10,r5
  80bc88:	10c4b03a 	or	r2,r2,r3
  80bc8c:	10000526 	beq	r2,zero,80bca4 <__unpack_d+0x130>
  80bc90:	00800044 	movi	r2,1
  80bc94:	68800015 	stw	r2,0(r13)
  80bc98:	6b000415 	stw	r12,16(r13)
  80bc9c:	6ac00315 	stw	r11,12(r13)
  80bca0:	f800283a 	ret
  80bca4:	68000015 	stw	zero,0(r13)
  80bca8:	003ffb06 	br	80bc98 <__unpack_d+0x124>

0080bcac <__fpcmp_parts_d>:
  80bcac:	21800017 	ldw	r6,0(r4)
  80bcb0:	00c00044 	movi	r3,1
  80bcb4:	19800a2e 	bgeu	r3,r6,80bce0 <__fpcmp_parts_d+0x34>
  80bcb8:	28800017 	ldw	r2,0(r5)
  80bcbc:	1880082e 	bgeu	r3,r2,80bce0 <__fpcmp_parts_d+0x34>
  80bcc0:	00c00104 	movi	r3,4
  80bcc4:	30c02626 	beq	r6,r3,80bd60 <__fpcmp_parts_d+0xb4>
  80bcc8:	10c02226 	beq	r2,r3,80bd54 <__fpcmp_parts_d+0xa8>
  80bccc:	00c00084 	movi	r3,2
  80bcd0:	30c00526 	beq	r6,r3,80bce8 <__fpcmp_parts_d+0x3c>
  80bcd4:	10c0071e 	bne	r2,r3,80bcf4 <__fpcmp_parts_d+0x48>
  80bcd8:	20800117 	ldw	r2,4(r4)
  80bcdc:	1000091e 	bne	r2,zero,80bd04 <__fpcmp_parts_d+0x58>
  80bce0:	00800044 	movi	r2,1
  80bce4:	f800283a 	ret
  80bce8:	10c01a1e 	bne	r2,r3,80bd54 <__fpcmp_parts_d+0xa8>
  80bcec:	0005883a 	mov	r2,zero
  80bcf0:	f800283a 	ret
  80bcf4:	22000117 	ldw	r8,4(r4)
  80bcf8:	28800117 	ldw	r2,4(r5)
  80bcfc:	40800326 	beq	r8,r2,80bd0c <__fpcmp_parts_d+0x60>
  80bd00:	403ff726 	beq	r8,zero,80bce0 <__fpcmp_parts_d+0x34>
  80bd04:	00bfffc4 	movi	r2,-1
  80bd08:	f800283a 	ret
  80bd0c:	20c00217 	ldw	r3,8(r4)
  80bd10:	28800217 	ldw	r2,8(r5)
  80bd14:	10fffa16 	blt	r2,r3,80bd00 <__fpcmp_parts_d+0x54>
  80bd18:	18800916 	blt	r3,r2,80bd40 <__fpcmp_parts_d+0x94>
  80bd1c:	21c00417 	ldw	r7,16(r4)
  80bd20:	28c00417 	ldw	r3,16(r5)
  80bd24:	21800317 	ldw	r6,12(r4)
  80bd28:	28800317 	ldw	r2,12(r5)
  80bd2c:	19fff436 	bltu	r3,r7,80bd00 <__fpcmp_parts_d+0x54>
  80bd30:	38c00526 	beq	r7,r3,80bd48 <__fpcmp_parts_d+0x9c>
  80bd34:	38c00236 	bltu	r7,r3,80bd40 <__fpcmp_parts_d+0x94>
  80bd38:	19ffec1e 	bne	r3,r7,80bcec <__fpcmp_parts_d+0x40>
  80bd3c:	30bfeb2e 	bgeu	r6,r2,80bcec <__fpcmp_parts_d+0x40>
  80bd40:	403fe71e 	bne	r8,zero,80bce0 <__fpcmp_parts_d+0x34>
  80bd44:	003fef06 	br	80bd04 <__fpcmp_parts_d+0x58>
  80bd48:	11bffa2e 	bgeu	r2,r6,80bd34 <__fpcmp_parts_d+0x88>
  80bd4c:	403fe426 	beq	r8,zero,80bce0 <__fpcmp_parts_d+0x34>
  80bd50:	003fec06 	br	80bd04 <__fpcmp_parts_d+0x58>
  80bd54:	28800117 	ldw	r2,4(r5)
  80bd58:	103fe11e 	bne	r2,zero,80bce0 <__fpcmp_parts_d+0x34>
  80bd5c:	003fe906 	br	80bd04 <__fpcmp_parts_d+0x58>
  80bd60:	11bfdd1e 	bne	r2,r6,80bcd8 <__fpcmp_parts_d+0x2c>
  80bd64:	28c00117 	ldw	r3,4(r5)
  80bd68:	20800117 	ldw	r2,4(r4)
  80bd6c:	1885c83a 	sub	r2,r3,r2
  80bd70:	f800283a 	ret

0080bd74 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80bd74:	defff404 	addi	sp,sp,-48
  80bd78:	df000b15 	stw	fp,44(sp)
  80bd7c:	df000b04 	addi	fp,sp,44
  80bd80:	e13ffb15 	stw	r4,-20(fp)
  80bd84:	e17ffc15 	stw	r5,-16(fp)
  80bd88:	e1bffd15 	stw	r6,-12(fp)
  80bd8c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80bd90:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80bd94:	00802074 	movhi	r2,129
  80bd98:	108f2c04 	addi	r2,r2,15536
  80bd9c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80bda0:	1005003a 	cmpeq	r2,r2,zero
  80bda4:	1000411e 	bne	r2,zero,80beac <alt_alarm_start+0x138>
  {
    if (alarm)
  80bda8:	e0bffb17 	ldw	r2,-20(fp)
  80bdac:	1005003a 	cmpeq	r2,r2,zero
  80bdb0:	10003b1e 	bne	r2,zero,80bea0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80bdb4:	e0fffb17 	ldw	r3,-20(fp)
  80bdb8:	e0bffd17 	ldw	r2,-12(fp)
  80bdbc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80bdc0:	e0fffb17 	ldw	r3,-20(fp)
  80bdc4:	e0bffe17 	ldw	r2,-8(fp)
  80bdc8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bdcc:	0005303a 	rdctl	r2,status
  80bdd0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bdd4:	e0fff817 	ldw	r3,-32(fp)
  80bdd8:	00bfff84 	movi	r2,-2
  80bddc:	1884703a 	and	r2,r3,r2
  80bde0:	1001703a 	wrctl	status,r2
  
  return context;
  80bde4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80bde8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80bdec:	00802074 	movhi	r2,129
  80bdf0:	108f2d04 	addi	r2,r2,15540
  80bdf4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80bdf8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80bdfc:	e0fffc17 	ldw	r3,-16(fp)
  80be00:	e0bff917 	ldw	r2,-28(fp)
  80be04:	1885883a 	add	r2,r3,r2
  80be08:	10c00044 	addi	r3,r2,1
  80be0c:	e0bffb17 	ldw	r2,-20(fp)
  80be10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80be14:	e0bffb17 	ldw	r2,-20(fp)
  80be18:	10c00217 	ldw	r3,8(r2)
  80be1c:	e0bff917 	ldw	r2,-28(fp)
  80be20:	1880042e 	bgeu	r3,r2,80be34 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80be24:	e0fffb17 	ldw	r3,-20(fp)
  80be28:	00800044 	movi	r2,1
  80be2c:	18800405 	stb	r2,16(r3)
  80be30:	00000206 	br	80be3c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80be34:	e0bffb17 	ldw	r2,-20(fp)
  80be38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80be3c:	e0fffb17 	ldw	r3,-20(fp)
  80be40:	00802074 	movhi	r2,129
  80be44:	10881704 	addi	r2,r2,8284
  80be48:	e0bff615 	stw	r2,-40(fp)
  80be4c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80be50:	e0fff717 	ldw	r3,-36(fp)
  80be54:	e0bff617 	ldw	r2,-40(fp)
  80be58:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80be5c:	e0bff617 	ldw	r2,-40(fp)
  80be60:	10c00017 	ldw	r3,0(r2)
  80be64:	e0bff717 	ldw	r2,-36(fp)
  80be68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80be6c:	e0bff617 	ldw	r2,-40(fp)
  80be70:	10c00017 	ldw	r3,0(r2)
  80be74:	e0bff717 	ldw	r2,-36(fp)
  80be78:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80be7c:	e0fff617 	ldw	r3,-40(fp)
  80be80:	e0bff717 	ldw	r2,-36(fp)
  80be84:	18800015 	stw	r2,0(r3)
  80be88:	e0bffa17 	ldw	r2,-24(fp)
  80be8c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80be90:	e0bff517 	ldw	r2,-44(fp)
  80be94:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80be98:	e03fff15 	stw	zero,-4(fp)
  80be9c:	00000506 	br	80beb4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80bea0:	00bffa84 	movi	r2,-22
  80bea4:	e0bfff15 	stw	r2,-4(fp)
  80bea8:	00000206 	br	80beb4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80beac:	00bfde84 	movi	r2,-134
  80beb0:	e0bfff15 	stw	r2,-4(fp)
  80beb4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80beb8:	e037883a 	mov	sp,fp
  80bebc:	df000017 	ldw	fp,0(sp)
  80bec0:	dec00104 	addi	sp,sp,4
  80bec4:	f800283a 	ret

0080bec8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80bec8:	defff804 	addi	sp,sp,-32
  80becc:	dfc00715 	stw	ra,28(sp)
  80bed0:	df000615 	stw	fp,24(sp)
  80bed4:	df000604 	addi	fp,sp,24
  80bed8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80bedc:	e0bffc17 	ldw	r2,-16(fp)
  80bee0:	1004803a 	cmplt	r2,r2,zero
  80bee4:	1000081e 	bne	r2,zero,80bf08 <close+0x40>
  80bee8:	e0bffc17 	ldw	r2,-16(fp)
  80beec:	10800324 	muli	r2,r2,12
  80bef0:	1007883a 	mov	r3,r2
  80bef4:	00802074 	movhi	r2,129
  80bef8:	10832404 	addi	r2,r2,3216
  80befc:	1887883a 	add	r3,r3,r2
  80bf00:	e0ffff15 	stw	r3,-4(fp)
  80bf04:	00000106 	br	80bf0c <close+0x44>
  80bf08:	e03fff15 	stw	zero,-4(fp)
  80bf0c:	e0bfff17 	ldw	r2,-4(fp)
  80bf10:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80bf14:	e0bffb17 	ldw	r2,-20(fp)
  80bf18:	1005003a 	cmpeq	r2,r2,zero
  80bf1c:	10001d1e 	bne	r2,zero,80bf94 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80bf20:	e0bffb17 	ldw	r2,-20(fp)
  80bf24:	10800017 	ldw	r2,0(r2)
  80bf28:	10800417 	ldw	r2,16(r2)
  80bf2c:	1005003a 	cmpeq	r2,r2,zero
  80bf30:	1000071e 	bne	r2,zero,80bf50 <close+0x88>
  80bf34:	e0bffb17 	ldw	r2,-20(fp)
  80bf38:	10800017 	ldw	r2,0(r2)
  80bf3c:	10800417 	ldw	r2,16(r2)
  80bf40:	e13ffb17 	ldw	r4,-20(fp)
  80bf44:	103ee83a 	callr	r2
  80bf48:	e0bffe15 	stw	r2,-8(fp)
  80bf4c:	00000106 	br	80bf54 <close+0x8c>
  80bf50:	e03ffe15 	stw	zero,-8(fp)
  80bf54:	e0bffe17 	ldw	r2,-8(fp)
  80bf58:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80bf5c:	e13ffc17 	ldw	r4,-16(fp)
  80bf60:	080c70c0 	call	80c70c <alt_release_fd>
    if (rval < 0)
  80bf64:	e0bffa17 	ldw	r2,-24(fp)
  80bf68:	1004403a 	cmpge	r2,r2,zero
  80bf6c:	1000071e 	bne	r2,zero,80bf8c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80bf70:	080bfc40 	call	80bfc4 <alt_get_errno>
  80bf74:	e0fffa17 	ldw	r3,-24(fp)
  80bf78:	00c7c83a 	sub	r3,zero,r3
  80bf7c:	10c00015 	stw	r3,0(r2)
      return -1;
  80bf80:	00bfffc4 	movi	r2,-1
  80bf84:	e0bffd15 	stw	r2,-12(fp)
  80bf88:	00000806 	br	80bfac <close+0xe4>
    }
    return 0;
  80bf8c:	e03ffd15 	stw	zero,-12(fp)
  80bf90:	00000606 	br	80bfac <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80bf94:	080bfc40 	call	80bfc4 <alt_get_errno>
  80bf98:	1007883a 	mov	r3,r2
  80bf9c:	00801444 	movi	r2,81
  80bfa0:	18800015 	stw	r2,0(r3)
    return -1;
  80bfa4:	00bfffc4 	movi	r2,-1
  80bfa8:	e0bffd15 	stw	r2,-12(fp)
  80bfac:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80bfb0:	e037883a 	mov	sp,fp
  80bfb4:	dfc00117 	ldw	ra,4(sp)
  80bfb8:	df000017 	ldw	fp,0(sp)
  80bfbc:	dec00204 	addi	sp,sp,8
  80bfc0:	f800283a 	ret

0080bfc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bfc4:	defffd04 	addi	sp,sp,-12
  80bfc8:	dfc00215 	stw	ra,8(sp)
  80bfcc:	df000115 	stw	fp,4(sp)
  80bfd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bfd4:	00802074 	movhi	r2,129
  80bfd8:	10881504 	addi	r2,r2,8276
  80bfdc:	10800017 	ldw	r2,0(r2)
  80bfe0:	1005003a 	cmpeq	r2,r2,zero
  80bfe4:	1000061e 	bne	r2,zero,80c000 <alt_get_errno+0x3c>
  80bfe8:	00802074 	movhi	r2,129
  80bfec:	10881504 	addi	r2,r2,8276
  80bff0:	10800017 	ldw	r2,0(r2)
  80bff4:	103ee83a 	callr	r2
  80bff8:	e0bfff15 	stw	r2,-4(fp)
  80bffc:	00000306 	br	80c00c <alt_get_errno+0x48>
  80c000:	00802074 	movhi	r2,129
  80c004:	108f2504 	addi	r2,r2,15508
  80c008:	e0bfff15 	stw	r2,-4(fp)
  80c00c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c010:	e037883a 	mov	sp,fp
  80c014:	dfc00117 	ldw	ra,4(sp)
  80c018:	df000017 	ldw	fp,0(sp)
  80c01c:	dec00204 	addi	sp,sp,8
  80c020:	f800283a 	ret

0080c024 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c024:	defffc04 	addi	sp,sp,-16
  80c028:	df000315 	stw	fp,12(sp)
  80c02c:	df000304 	addi	fp,sp,12
  80c030:	e13ffd15 	stw	r4,-12(fp)
  80c034:	e17ffe15 	stw	r5,-8(fp)
  80c038:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c03c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c040:	e037883a 	mov	sp,fp
  80c044:	df000017 	ldw	fp,0(sp)
  80c048:	dec00104 	addi	sp,sp,4
  80c04c:	f800283a 	ret

0080c050 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c050:	defff904 	addi	sp,sp,-28
  80c054:	dfc00615 	stw	ra,24(sp)
  80c058:	df000515 	stw	fp,20(sp)
  80c05c:	df000504 	addi	fp,sp,20
  80c060:	e13ffc15 	stw	r4,-16(fp)
  80c064:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c068:	e0bffc17 	ldw	r2,-16(fp)
  80c06c:	1004803a 	cmplt	r2,r2,zero
  80c070:	1000081e 	bne	r2,zero,80c094 <fstat+0x44>
  80c074:	e0bffc17 	ldw	r2,-16(fp)
  80c078:	10800324 	muli	r2,r2,12
  80c07c:	1007883a 	mov	r3,r2
  80c080:	00802074 	movhi	r2,129
  80c084:	10832404 	addi	r2,r2,3216
  80c088:	1887883a 	add	r3,r3,r2
  80c08c:	e0ffff15 	stw	r3,-4(fp)
  80c090:	00000106 	br	80c098 <fstat+0x48>
  80c094:	e03fff15 	stw	zero,-4(fp)
  80c098:	e0bfff17 	ldw	r2,-4(fp)
  80c09c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c0a0:	e0bffb17 	ldw	r2,-20(fp)
  80c0a4:	1005003a 	cmpeq	r2,r2,zero
  80c0a8:	1000121e 	bne	r2,zero,80c0f4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c0ac:	e0bffb17 	ldw	r2,-20(fp)
  80c0b0:	10800017 	ldw	r2,0(r2)
  80c0b4:	10800817 	ldw	r2,32(r2)
  80c0b8:	1005003a 	cmpeq	r2,r2,zero
  80c0bc:	1000081e 	bne	r2,zero,80c0e0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80c0c0:	e0bffb17 	ldw	r2,-20(fp)
  80c0c4:	10800017 	ldw	r2,0(r2)
  80c0c8:	10800817 	ldw	r2,32(r2)
  80c0cc:	e13ffb17 	ldw	r4,-20(fp)
  80c0d0:	e17ffd17 	ldw	r5,-12(fp)
  80c0d4:	103ee83a 	callr	r2
  80c0d8:	e0bffe15 	stw	r2,-8(fp)
  80c0dc:	00000b06 	br	80c10c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c0e0:	e0fffd17 	ldw	r3,-12(fp)
  80c0e4:	00880004 	movi	r2,8192
  80c0e8:	18800115 	stw	r2,4(r3)
      return 0;
  80c0ec:	e03ffe15 	stw	zero,-8(fp)
  80c0f0:	00000606 	br	80c10c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c0f4:	080c1240 	call	80c124 <alt_get_errno>
  80c0f8:	1007883a 	mov	r3,r2
  80c0fc:	00801444 	movi	r2,81
  80c100:	18800015 	stw	r2,0(r3)
    return -1;
  80c104:	00bfffc4 	movi	r2,-1
  80c108:	e0bffe15 	stw	r2,-8(fp)
  80c10c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c110:	e037883a 	mov	sp,fp
  80c114:	dfc00117 	ldw	ra,4(sp)
  80c118:	df000017 	ldw	fp,0(sp)
  80c11c:	dec00204 	addi	sp,sp,8
  80c120:	f800283a 	ret

0080c124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c124:	defffd04 	addi	sp,sp,-12
  80c128:	dfc00215 	stw	ra,8(sp)
  80c12c:	df000115 	stw	fp,4(sp)
  80c130:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c134:	00802074 	movhi	r2,129
  80c138:	10881504 	addi	r2,r2,8276
  80c13c:	10800017 	ldw	r2,0(r2)
  80c140:	1005003a 	cmpeq	r2,r2,zero
  80c144:	1000061e 	bne	r2,zero,80c160 <alt_get_errno+0x3c>
  80c148:	00802074 	movhi	r2,129
  80c14c:	10881504 	addi	r2,r2,8276
  80c150:	10800017 	ldw	r2,0(r2)
  80c154:	103ee83a 	callr	r2
  80c158:	e0bfff15 	stw	r2,-4(fp)
  80c15c:	00000306 	br	80c16c <alt_get_errno+0x48>
  80c160:	00802074 	movhi	r2,129
  80c164:	108f2504 	addi	r2,r2,15508
  80c168:	e0bfff15 	stw	r2,-4(fp)
  80c16c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c170:	e037883a 	mov	sp,fp
  80c174:	dfc00117 	ldw	ra,4(sp)
  80c178:	df000017 	ldw	fp,0(sp)
  80c17c:	dec00204 	addi	sp,sp,8
  80c180:	f800283a 	ret

0080c184 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c184:	deffeb04 	addi	sp,sp,-84
  80c188:	dfc01415 	stw	ra,80(sp)
  80c18c:	df001315 	stw	fp,76(sp)
  80c190:	df001304 	addi	fp,sp,76
  80c194:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c198:	e0bffd17 	ldw	r2,-12(fp)
  80c19c:	1004803a 	cmplt	r2,r2,zero
  80c1a0:	1000081e 	bne	r2,zero,80c1c4 <isatty+0x40>
  80c1a4:	e0bffd17 	ldw	r2,-12(fp)
  80c1a8:	10800324 	muli	r2,r2,12
  80c1ac:	1007883a 	mov	r3,r2
  80c1b0:	00802074 	movhi	r2,129
  80c1b4:	10832404 	addi	r2,r2,3216
  80c1b8:	1887883a 	add	r3,r3,r2
  80c1bc:	e0ffff15 	stw	r3,-4(fp)
  80c1c0:	00000106 	br	80c1c8 <isatty+0x44>
  80c1c4:	e03fff15 	stw	zero,-4(fp)
  80c1c8:	e0bfff17 	ldw	r2,-4(fp)
  80c1cc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80c1d0:	e0bfed17 	ldw	r2,-76(fp)
  80c1d4:	1005003a 	cmpeq	r2,r2,zero
  80c1d8:	10000f1e 	bne	r2,zero,80c218 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c1dc:	e0bfed17 	ldw	r2,-76(fp)
  80c1e0:	10800017 	ldw	r2,0(r2)
  80c1e4:	10800817 	ldw	r2,32(r2)
  80c1e8:	1004c03a 	cmpne	r2,r2,zero
  80c1ec:	1000031e 	bne	r2,zero,80c1fc <isatty+0x78>
    {
      return 1;
  80c1f0:	00800044 	movi	r2,1
  80c1f4:	e0bffe15 	stw	r2,-8(fp)
  80c1f8:	00000c06 	br	80c22c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c1fc:	e17fee04 	addi	r5,fp,-72
  80c200:	e13ffd17 	ldw	r4,-12(fp)
  80c204:	080c0500 	call	80c050 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c208:	e0bfef17 	ldw	r2,-68(fp)
  80c20c:	10880020 	cmpeqi	r2,r2,8192
  80c210:	e0bffe15 	stw	r2,-8(fp)
  80c214:	00000506 	br	80c22c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c218:	080c2440 	call	80c244 <alt_get_errno>
  80c21c:	1007883a 	mov	r3,r2
  80c220:	00801444 	movi	r2,81
  80c224:	18800015 	stw	r2,0(r3)
    return 0;
  80c228:	e03ffe15 	stw	zero,-8(fp)
  80c22c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c230:	e037883a 	mov	sp,fp
  80c234:	dfc00117 	ldw	ra,4(sp)
  80c238:	df000017 	ldw	fp,0(sp)
  80c23c:	dec00204 	addi	sp,sp,8
  80c240:	f800283a 	ret

0080c244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c244:	defffd04 	addi	sp,sp,-12
  80c248:	dfc00215 	stw	ra,8(sp)
  80c24c:	df000115 	stw	fp,4(sp)
  80c250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c254:	00802074 	movhi	r2,129
  80c258:	10881504 	addi	r2,r2,8276
  80c25c:	10800017 	ldw	r2,0(r2)
  80c260:	1005003a 	cmpeq	r2,r2,zero
  80c264:	1000061e 	bne	r2,zero,80c280 <alt_get_errno+0x3c>
  80c268:	00802074 	movhi	r2,129
  80c26c:	10881504 	addi	r2,r2,8276
  80c270:	10800017 	ldw	r2,0(r2)
  80c274:	103ee83a 	callr	r2
  80c278:	e0bfff15 	stw	r2,-4(fp)
  80c27c:	00000306 	br	80c28c <alt_get_errno+0x48>
  80c280:	00802074 	movhi	r2,129
  80c284:	108f2504 	addi	r2,r2,15508
  80c288:	e0bfff15 	stw	r2,-4(fp)
  80c28c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c290:	e037883a 	mov	sp,fp
  80c294:	dfc00117 	ldw	ra,4(sp)
  80c298:	df000017 	ldw	fp,0(sp)
  80c29c:	dec00204 	addi	sp,sp,8
  80c2a0:	f800283a 	ret

0080c2a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80c2a4:	defffe04 	addi	sp,sp,-8
  80c2a8:	dfc00115 	stw	ra,4(sp)
  80c2ac:	df000015 	stw	fp,0(sp)
  80c2b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80c2b4:	01002074 	movhi	r4,129
  80c2b8:	21081a04 	addi	r4,r4,8296
  80c2bc:	01402074 	movhi	r5,129
  80c2c0:	29411504 	addi	r5,r5,1108
  80c2c4:	01802074 	movhi	r6,129
  80c2c8:	31881a04 	addi	r6,r6,8296
  80c2cc:	080c3240 	call	80c324 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80c2d0:	01002034 	movhi	r4,128
  80c2d4:	21000804 	addi	r4,r4,32
  80c2d8:	01402034 	movhi	r5,128
  80c2dc:	29400804 	addi	r5,r5,32
  80c2e0:	01802034 	movhi	r6,128
  80c2e4:	31806e04 	addi	r6,r6,440
  80c2e8:	080c3240 	call	80c324 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80c2ec:	01002074 	movhi	r4,129
  80c2f0:	213f5904 	addi	r4,r4,-668
  80c2f4:	01402074 	movhi	r5,129
  80c2f8:	297f5904 	addi	r5,r5,-668
  80c2fc:	01802074 	movhi	r6,129
  80c300:	31811504 	addi	r6,r6,1108
  80c304:	080c3240 	call	80c324 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80c308:	080edc00 	call	80edc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80c30c:	080f0740 	call	80f074 <alt_icache_flush_all>
}
  80c310:	e037883a 	mov	sp,fp
  80c314:	dfc00117 	ldw	ra,4(sp)
  80c318:	df000017 	ldw	fp,0(sp)
  80c31c:	dec00204 	addi	sp,sp,8
  80c320:	f800283a 	ret

0080c324 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80c324:	defffc04 	addi	sp,sp,-16
  80c328:	df000315 	stw	fp,12(sp)
  80c32c:	df000304 	addi	fp,sp,12
  80c330:	e13ffd15 	stw	r4,-12(fp)
  80c334:	e17ffe15 	stw	r5,-8(fp)
  80c338:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80c33c:	e0fffe17 	ldw	r3,-8(fp)
  80c340:	e0bffd17 	ldw	r2,-12(fp)
  80c344:	18800e26 	beq	r3,r2,80c380 <alt_load_section+0x5c>
  {
    while( to != end )
  80c348:	00000a06 	br	80c374 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80c34c:	e0bffd17 	ldw	r2,-12(fp)
  80c350:	10c00017 	ldw	r3,0(r2)
  80c354:	e0bffe17 	ldw	r2,-8(fp)
  80c358:	10c00015 	stw	r3,0(r2)
  80c35c:	e0bffe17 	ldw	r2,-8(fp)
  80c360:	10800104 	addi	r2,r2,4
  80c364:	e0bffe15 	stw	r2,-8(fp)
  80c368:	e0bffd17 	ldw	r2,-12(fp)
  80c36c:	10800104 	addi	r2,r2,4
  80c370:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80c374:	e0fffe17 	ldw	r3,-8(fp)
  80c378:	e0bfff17 	ldw	r2,-4(fp)
  80c37c:	18bff31e 	bne	r3,r2,80c34c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80c380:	e037883a 	mov	sp,fp
  80c384:	df000017 	ldw	fp,0(sp)
  80c388:	dec00104 	addi	sp,sp,4
  80c38c:	f800283a 	ret

0080c390 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80c390:	defff804 	addi	sp,sp,-32
  80c394:	dfc00715 	stw	ra,28(sp)
  80c398:	df000615 	stw	fp,24(sp)
  80c39c:	df000604 	addi	fp,sp,24
  80c3a0:	e13ffc15 	stw	r4,-16(fp)
  80c3a4:	e17ffd15 	stw	r5,-12(fp)
  80c3a8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80c3ac:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c3b0:	e0bffc17 	ldw	r2,-16(fp)
  80c3b4:	1004803a 	cmplt	r2,r2,zero
  80c3b8:	1000081e 	bne	r2,zero,80c3dc <lseek+0x4c>
  80c3bc:	e0bffc17 	ldw	r2,-16(fp)
  80c3c0:	10800324 	muli	r2,r2,12
  80c3c4:	1007883a 	mov	r3,r2
  80c3c8:	00802074 	movhi	r2,129
  80c3cc:	10832404 	addi	r2,r2,3216
  80c3d0:	1887883a 	add	r3,r3,r2
  80c3d4:	e0ffff15 	stw	r3,-4(fp)
  80c3d8:	00000106 	br	80c3e0 <lseek+0x50>
  80c3dc:	e03fff15 	stw	zero,-4(fp)
  80c3e0:	e0bfff17 	ldw	r2,-4(fp)
  80c3e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80c3e8:	e0bffb17 	ldw	r2,-20(fp)
  80c3ec:	1005003a 	cmpeq	r2,r2,zero
  80c3f0:	1000111e 	bne	r2,zero,80c438 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c3f4:	e0bffb17 	ldw	r2,-20(fp)
  80c3f8:	10800017 	ldw	r2,0(r2)
  80c3fc:	10800717 	ldw	r2,28(r2)
  80c400:	1005003a 	cmpeq	r2,r2,zero
  80c404:	1000091e 	bne	r2,zero,80c42c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80c408:	e0bffb17 	ldw	r2,-20(fp)
  80c40c:	10800017 	ldw	r2,0(r2)
  80c410:	10800717 	ldw	r2,28(r2)
  80c414:	e13ffb17 	ldw	r4,-20(fp)
  80c418:	e17ffd17 	ldw	r5,-12(fp)
  80c41c:	e1bffe17 	ldw	r6,-8(fp)
  80c420:	103ee83a 	callr	r2
  80c424:	e0bffa15 	stw	r2,-24(fp)
  80c428:	00000506 	br	80c440 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80c42c:	00bfde84 	movi	r2,-134
  80c430:	e0bffa15 	stw	r2,-24(fp)
  80c434:	00000206 	br	80c440 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80c438:	00bfebc4 	movi	r2,-81
  80c43c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80c440:	e0bffa17 	ldw	r2,-24(fp)
  80c444:	1004403a 	cmpge	r2,r2,zero
  80c448:	1000071e 	bne	r2,zero,80c468 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80c44c:	080c4800 	call	80c480 <alt_get_errno>
  80c450:	1007883a 	mov	r3,r2
  80c454:	e0bffa17 	ldw	r2,-24(fp)
  80c458:	0085c83a 	sub	r2,zero,r2
  80c45c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80c460:	00bfffc4 	movi	r2,-1
  80c464:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80c468:	e0bffa17 	ldw	r2,-24(fp)
}
  80c46c:	e037883a 	mov	sp,fp
  80c470:	dfc00117 	ldw	ra,4(sp)
  80c474:	df000017 	ldw	fp,0(sp)
  80c478:	dec00204 	addi	sp,sp,8
  80c47c:	f800283a 	ret

0080c480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c480:	defffd04 	addi	sp,sp,-12
  80c484:	dfc00215 	stw	ra,8(sp)
  80c488:	df000115 	stw	fp,4(sp)
  80c48c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c490:	00802074 	movhi	r2,129
  80c494:	10881504 	addi	r2,r2,8276
  80c498:	10800017 	ldw	r2,0(r2)
  80c49c:	1005003a 	cmpeq	r2,r2,zero
  80c4a0:	1000061e 	bne	r2,zero,80c4bc <alt_get_errno+0x3c>
  80c4a4:	00802074 	movhi	r2,129
  80c4a8:	10881504 	addi	r2,r2,8276
  80c4ac:	10800017 	ldw	r2,0(r2)
  80c4b0:	103ee83a 	callr	r2
  80c4b4:	e0bfff15 	stw	r2,-4(fp)
  80c4b8:	00000306 	br	80c4c8 <alt_get_errno+0x48>
  80c4bc:	00802074 	movhi	r2,129
  80c4c0:	108f2504 	addi	r2,r2,15508
  80c4c4:	e0bfff15 	stw	r2,-4(fp)
  80c4c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80c4cc:	e037883a 	mov	sp,fp
  80c4d0:	dfc00117 	ldw	ra,4(sp)
  80c4d4:	df000017 	ldw	fp,0(sp)
  80c4d8:	dec00204 	addi	sp,sp,8
  80c4dc:	f800283a 	ret

0080c4e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c4e0:	defffd04 	addi	sp,sp,-12
  80c4e4:	dfc00215 	stw	ra,8(sp)
  80c4e8:	df000115 	stw	fp,4(sp)
  80c4ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c4f0:	0009883a 	mov	r4,zero
  80c4f4:	080cb4c0 	call	80cb4c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80c4f8:	080cb800 	call	80cb80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80c4fc:	01002074 	movhi	r4,129
  80c500:	2100d904 	addi	r4,r4,868
  80c504:	01402074 	movhi	r5,129
  80c508:	2940d904 	addi	r5,r5,868
  80c50c:	01802074 	movhi	r6,129
  80c510:	3180d904 	addi	r6,r6,868
  80c514:	080f1680 	call	80f168 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80c518:	080ef180 	call	80ef18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80c51c:	01002074 	movhi	r4,129
  80c520:	213bdf04 	addi	r4,r4,-4228
  80c524:	080f8ec0 	call	80f8ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80c528:	d1271f17 	ldw	r4,-25476(gp)
  80c52c:	d1672017 	ldw	r5,-25472(gp)
  80c530:	d1a72117 	ldw	r6,-25468(gp)
  80c534:	08024140 	call	802414 <main>
  80c538:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80c53c:	01000044 	movi	r4,1
  80c540:	080bec80 	call	80bec8 <close>
  exit (result);
  80c544:	e13fff17 	ldw	r4,-4(fp)
  80c548:	080f9000 	call	80f900 <exit>

0080c54c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80c54c:	defffe04 	addi	sp,sp,-8
  80c550:	df000115 	stw	fp,4(sp)
  80c554:	df000104 	addi	fp,sp,4
  80c558:	e13fff15 	stw	r4,-4(fp)
}
  80c55c:	e037883a 	mov	sp,fp
  80c560:	df000017 	ldw	fp,0(sp)
  80c564:	dec00104 	addi	sp,sp,4
  80c568:	f800283a 	ret

0080c56c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80c56c:	defffe04 	addi	sp,sp,-8
  80c570:	df000115 	stw	fp,4(sp)
  80c574:	df000104 	addi	fp,sp,4
  80c578:	e13fff15 	stw	r4,-4(fp)
}
  80c57c:	e037883a 	mov	sp,fp
  80c580:	df000017 	ldw	fp,0(sp)
  80c584:	dec00104 	addi	sp,sp,4
  80c588:	f800283a 	ret

0080c58c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80c58c:	defff704 	addi	sp,sp,-36
  80c590:	dfc00815 	stw	ra,32(sp)
  80c594:	df000715 	stw	fp,28(sp)
  80c598:	df000704 	addi	fp,sp,28
  80c59c:	e13ffb15 	stw	r4,-20(fp)
  80c5a0:	e17ffc15 	stw	r5,-16(fp)
  80c5a4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c5a8:	e0bffb17 	ldw	r2,-20(fp)
  80c5ac:	1004803a 	cmplt	r2,r2,zero
  80c5b0:	1000081e 	bne	r2,zero,80c5d4 <read+0x48>
  80c5b4:	e0bffb17 	ldw	r2,-20(fp)
  80c5b8:	10800324 	muli	r2,r2,12
  80c5bc:	1007883a 	mov	r3,r2
  80c5c0:	00802074 	movhi	r2,129
  80c5c4:	10832404 	addi	r2,r2,3216
  80c5c8:	1887883a 	add	r3,r3,r2
  80c5cc:	e0ffff15 	stw	r3,-4(fp)
  80c5d0:	00000106 	br	80c5d8 <read+0x4c>
  80c5d4:	e03fff15 	stw	zero,-4(fp)
  80c5d8:	e0bfff17 	ldw	r2,-4(fp)
  80c5dc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80c5e0:	e0bffa17 	ldw	r2,-24(fp)
  80c5e4:	1005003a 	cmpeq	r2,r2,zero
  80c5e8:	1000241e 	bne	r2,zero,80c67c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c5ec:	e0bffa17 	ldw	r2,-24(fp)
  80c5f0:	10800217 	ldw	r2,8(r2)
  80c5f4:	108000cc 	andi	r2,r2,3
  80c5f8:	10800060 	cmpeqi	r2,r2,1
  80c5fc:	10001a1e 	bne	r2,zero,80c668 <read+0xdc>
  80c600:	e0bffa17 	ldw	r2,-24(fp)
  80c604:	10800017 	ldw	r2,0(r2)
  80c608:	10800517 	ldw	r2,20(r2)
  80c60c:	1005003a 	cmpeq	r2,r2,zero
  80c610:	1000151e 	bne	r2,zero,80c668 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80c614:	e0bffa17 	ldw	r2,-24(fp)
  80c618:	10800017 	ldw	r2,0(r2)
  80c61c:	10800517 	ldw	r2,20(r2)
  80c620:	e17ffc17 	ldw	r5,-16(fp)
  80c624:	e1bffd17 	ldw	r6,-12(fp)
  80c628:	e13ffa17 	ldw	r4,-24(fp)
  80c62c:	103ee83a 	callr	r2
  80c630:	e0bff915 	stw	r2,-28(fp)
  80c634:	e0bff917 	ldw	r2,-28(fp)
  80c638:	1004403a 	cmpge	r2,r2,zero
  80c63c:	1000071e 	bne	r2,zero,80c65c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80c640:	080c6ac0 	call	80c6ac <alt_get_errno>
  80c644:	e0fff917 	ldw	r3,-28(fp)
  80c648:	00c7c83a 	sub	r3,zero,r3
  80c64c:	10c00015 	stw	r3,0(r2)
          return -1;
  80c650:	00bfffc4 	movi	r2,-1
  80c654:	e0bffe15 	stw	r2,-8(fp)
  80c658:	00000e06 	br	80c694 <read+0x108>
        }
        return rval;
  80c65c:	e0bff917 	ldw	r2,-28(fp)
  80c660:	e0bffe15 	stw	r2,-8(fp)
  80c664:	00000b06 	br	80c694 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80c668:	080c6ac0 	call	80c6ac <alt_get_errno>
  80c66c:	1007883a 	mov	r3,r2
  80c670:	00800344 	movi	r2,13
  80c674:	18800015 	stw	r2,0(r3)
  80c678:	00000406 	br	80c68c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80c67c:	080c6ac0 	call	80c6ac <alt_get_errno>
  80c680:	1007883a 	mov	r3,r2
  80c684:	00801444 	movi	r2,81
  80c688:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80c68c:	00bfffc4 	movi	r2,-1
  80c690:	e0bffe15 	stw	r2,-8(fp)
  80c694:	e0bffe17 	ldw	r2,-8(fp)
}
  80c698:	e037883a 	mov	sp,fp
  80c69c:	dfc00117 	ldw	ra,4(sp)
  80c6a0:	df000017 	ldw	fp,0(sp)
  80c6a4:	dec00204 	addi	sp,sp,8
  80c6a8:	f800283a 	ret

0080c6ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c6ac:	defffd04 	addi	sp,sp,-12
  80c6b0:	dfc00215 	stw	ra,8(sp)
  80c6b4:	df000115 	stw	fp,4(sp)
  80c6b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c6bc:	00802074 	movhi	r2,129
  80c6c0:	10881504 	addi	r2,r2,8276
  80c6c4:	10800017 	ldw	r2,0(r2)
  80c6c8:	1005003a 	cmpeq	r2,r2,zero
  80c6cc:	1000061e 	bne	r2,zero,80c6e8 <alt_get_errno+0x3c>
  80c6d0:	00802074 	movhi	r2,129
  80c6d4:	10881504 	addi	r2,r2,8276
  80c6d8:	10800017 	ldw	r2,0(r2)
  80c6dc:	103ee83a 	callr	r2
  80c6e0:	e0bfff15 	stw	r2,-4(fp)
  80c6e4:	00000306 	br	80c6f4 <alt_get_errno+0x48>
  80c6e8:	00802074 	movhi	r2,129
  80c6ec:	108f2504 	addi	r2,r2,15508
  80c6f0:	e0bfff15 	stw	r2,-4(fp)
  80c6f4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c6f8:	e037883a 	mov	sp,fp
  80c6fc:	dfc00117 	ldw	ra,4(sp)
  80c700:	df000017 	ldw	fp,0(sp)
  80c704:	dec00204 	addi	sp,sp,8
  80c708:	f800283a 	ret

0080c70c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80c70c:	defffe04 	addi	sp,sp,-8
  80c710:	df000115 	stw	fp,4(sp)
  80c714:	df000104 	addi	fp,sp,4
  80c718:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80c71c:	e0bfff17 	ldw	r2,-4(fp)
  80c720:	108000d0 	cmplti	r2,r2,3
  80c724:	10000d1e 	bne	r2,zero,80c75c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c728:	e0bfff17 	ldw	r2,-4(fp)
  80c72c:	00c02074 	movhi	r3,129
  80c730:	18c32404 	addi	r3,r3,3216
  80c734:	10800324 	muli	r2,r2,12
  80c738:	10c5883a 	add	r2,r2,r3
  80c73c:	10800204 	addi	r2,r2,8
  80c740:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80c744:	e0bfff17 	ldw	r2,-4(fp)
  80c748:	00c02074 	movhi	r3,129
  80c74c:	18c32404 	addi	r3,r3,3216
  80c750:	10800324 	muli	r2,r2,12
  80c754:	10c5883a 	add	r2,r2,r3
  80c758:	10000015 	stw	zero,0(r2)
  }
}
  80c75c:	e037883a 	mov	sp,fp
  80c760:	df000017 	ldw	fp,0(sp)
  80c764:	dec00104 	addi	sp,sp,4
  80c768:	f800283a 	ret

0080c76c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80c76c:	defff804 	addi	sp,sp,-32
  80c770:	df000715 	stw	fp,28(sp)
  80c774:	df000704 	addi	fp,sp,28
  80c778:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c77c:	0005303a 	rdctl	r2,status
  80c780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c784:	e0fffb17 	ldw	r3,-20(fp)
  80c788:	00bfff84 	movi	r2,-2
  80c78c:	1884703a 	and	r2,r3,r2
  80c790:	1001703a 	wrctl	status,r2
  
  return context;
  80c794:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80c798:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c79c:	d0a00c17 	ldw	r2,-32720(gp)
  80c7a0:	10c000c4 	addi	r3,r2,3
  80c7a4:	00bfff04 	movi	r2,-4
  80c7a8:	1884703a 	and	r2,r3,r2
  80c7ac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c7b0:	d0e00c17 	ldw	r3,-32720(gp)
  80c7b4:	e0bffe17 	ldw	r2,-8(fp)
  80c7b8:	1887883a 	add	r3,r3,r2
  80c7bc:	00804034 	movhi	r2,256
  80c7c0:	10800004 	addi	r2,r2,0
  80c7c4:	10c0072e 	bgeu	r2,r3,80c7e4 <sbrk+0x78>
  80c7c8:	e0bffd17 	ldw	r2,-12(fp)
  80c7cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c7d0:	e0bffa17 	ldw	r2,-24(fp)
  80c7d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80c7d8:	00bfffc4 	movi	r2,-1
  80c7dc:	e0bfff15 	stw	r2,-4(fp)
  80c7e0:	00000c06 	br	80c814 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80c7e4:	d0a00c17 	ldw	r2,-32720(gp)
  80c7e8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80c7ec:	d0e00c17 	ldw	r3,-32720(gp)
  80c7f0:	e0bffe17 	ldw	r2,-8(fp)
  80c7f4:	1885883a 	add	r2,r3,r2
  80c7f8:	d0a00c15 	stw	r2,-32720(gp)
  80c7fc:	e0bffd17 	ldw	r2,-12(fp)
  80c800:	e0bff915 	stw	r2,-28(fp)
  80c804:	e0bff917 	ldw	r2,-28(fp)
  80c808:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80c80c:	e0bffc17 	ldw	r2,-16(fp)
  80c810:	e0bfff15 	stw	r2,-4(fp)
  80c814:	e0bfff17 	ldw	r2,-4(fp)
} 
  80c818:	e037883a 	mov	sp,fp
  80c81c:	df000017 	ldw	fp,0(sp)
  80c820:	dec00104 	addi	sp,sp,4
  80c824:	f800283a 	ret

0080c828 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80c828:	defffa04 	addi	sp,sp,-24
  80c82c:	df000515 	stw	fp,20(sp)
  80c830:	df000504 	addi	fp,sp,20
  80c834:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c838:	0005303a 	rdctl	r2,status
  80c83c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c840:	e0fffd17 	ldw	r3,-12(fp)
  80c844:	00bfff84 	movi	r2,-2
  80c848:	1884703a 	and	r2,r3,r2
  80c84c:	1001703a 	wrctl	status,r2
  
  return context;
  80c850:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80c854:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80c858:	e0bfff17 	ldw	r2,-4(fp)
  80c85c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c860:	e0bffc17 	ldw	r2,-16(fp)
  80c864:	10c00017 	ldw	r3,0(r2)
  80c868:	e0bffc17 	ldw	r2,-16(fp)
  80c86c:	10800117 	ldw	r2,4(r2)
  80c870:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80c874:	e0bffc17 	ldw	r2,-16(fp)
  80c878:	10c00117 	ldw	r3,4(r2)
  80c87c:	e0bffc17 	ldw	r2,-16(fp)
  80c880:	10800017 	ldw	r2,0(r2)
  80c884:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c888:	e0fffc17 	ldw	r3,-16(fp)
  80c88c:	e0bffc17 	ldw	r2,-16(fp)
  80c890:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80c894:	e0fffc17 	ldw	r3,-16(fp)
  80c898:	e0bffc17 	ldw	r2,-16(fp)
  80c89c:	18800015 	stw	r2,0(r3)
  80c8a0:	e0bffe17 	ldw	r2,-8(fp)
  80c8a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c8a8:	e0bffb17 	ldw	r2,-20(fp)
  80c8ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80c8b0:	e037883a 	mov	sp,fp
  80c8b4:	df000017 	ldw	fp,0(sp)
  80c8b8:	dec00104 	addi	sp,sp,4
  80c8bc:	f800283a 	ret

0080c8c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c8c0:	defffb04 	addi	sp,sp,-20
  80c8c4:	dfc00415 	stw	ra,16(sp)
  80c8c8:	df000315 	stw	fp,12(sp)
  80c8cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80c8d0:	d0a00d17 	ldw	r2,-32716(gp)
  80c8d4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c8d8:	d0a72317 	ldw	r2,-25460(gp)
  80c8dc:	10800044 	addi	r2,r2,1
  80c8e0:	d0a72315 	stw	r2,-25460(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c8e4:	00003106 	br	80c9ac <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80c8e8:	e0bffe17 	ldw	r2,-8(fp)
  80c8ec:	10800017 	ldw	r2,0(r2)
  80c8f0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c8f4:	e0bffe17 	ldw	r2,-8(fp)
  80c8f8:	10800403 	ldbu	r2,16(r2)
  80c8fc:	10803fcc 	andi	r2,r2,255
  80c900:	1005003a 	cmpeq	r2,r2,zero
  80c904:	1000051e 	bne	r2,zero,80c91c <alt_tick+0x5c>
  80c908:	d0a72317 	ldw	r2,-25460(gp)
  80c90c:	1004c03a 	cmpne	r2,r2,zero
  80c910:	1000021e 	bne	r2,zero,80c91c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80c914:	e0bffe17 	ldw	r2,-8(fp)
  80c918:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80c91c:	e0bffe17 	ldw	r2,-8(fp)
  80c920:	10c00217 	ldw	r3,8(r2)
  80c924:	d0a72317 	ldw	r2,-25460(gp)
  80c928:	10c01e36 	bltu	r2,r3,80c9a4 <alt_tick+0xe4>
  80c92c:	e0bffe17 	ldw	r2,-8(fp)
  80c930:	10800403 	ldbu	r2,16(r2)
  80c934:	10803fcc 	andi	r2,r2,255
  80c938:	1004c03a 	cmpne	r2,r2,zero
  80c93c:	1000191e 	bne	r2,zero,80c9a4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80c940:	e0bffe17 	ldw	r2,-8(fp)
  80c944:	10c00317 	ldw	r3,12(r2)
  80c948:	e0bffe17 	ldw	r2,-8(fp)
  80c94c:	11000517 	ldw	r4,20(r2)
  80c950:	183ee83a 	callr	r3
  80c954:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80c958:	e0bffd17 	ldw	r2,-12(fp)
  80c95c:	1004c03a 	cmpne	r2,r2,zero
  80c960:	1000031e 	bne	r2,zero,80c970 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80c964:	e13ffe17 	ldw	r4,-8(fp)
  80c968:	080c8280 	call	80c828 <alt_alarm_stop>
  80c96c:	00000d06 	br	80c9a4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80c970:	e0bffe17 	ldw	r2,-8(fp)
  80c974:	10c00217 	ldw	r3,8(r2)
  80c978:	e0bffd17 	ldw	r2,-12(fp)
  80c97c:	1887883a 	add	r3,r3,r2
  80c980:	e0bffe17 	ldw	r2,-8(fp)
  80c984:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c988:	e0bffe17 	ldw	r2,-8(fp)
  80c98c:	10c00217 	ldw	r3,8(r2)
  80c990:	d0a72317 	ldw	r2,-25460(gp)
  80c994:	1880032e 	bgeu	r3,r2,80c9a4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80c998:	e0fffe17 	ldw	r3,-8(fp)
  80c99c:	00800044 	movi	r2,1
  80c9a0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80c9a4:	e0bfff17 	ldw	r2,-4(fp)
  80c9a8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c9ac:	d0e00d04 	addi	r3,gp,-32716
  80c9b0:	e0bffe17 	ldw	r2,-8(fp)
  80c9b4:	10ffcc1e 	bne	r2,r3,80c8e8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80c9b8:	e037883a 	mov	sp,fp
  80c9bc:	dfc00117 	ldw	ra,4(sp)
  80c9c0:	df000017 	ldw	fp,0(sp)
  80c9c4:	dec00204 	addi	sp,sp,8
  80c9c8:	f800283a 	ret

0080c9cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80c9cc:	defff704 	addi	sp,sp,-36
  80c9d0:	dfc00815 	stw	ra,32(sp)
  80c9d4:	df000715 	stw	fp,28(sp)
  80c9d8:	df000704 	addi	fp,sp,28
  80c9dc:	e13ffb15 	stw	r4,-20(fp)
  80c9e0:	e17ffc15 	stw	r5,-16(fp)
  80c9e4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c9e8:	e0bffb17 	ldw	r2,-20(fp)
  80c9ec:	1004803a 	cmplt	r2,r2,zero
  80c9f0:	1000081e 	bne	r2,zero,80ca14 <write+0x48>
  80c9f4:	e0bffb17 	ldw	r2,-20(fp)
  80c9f8:	10800324 	muli	r2,r2,12
  80c9fc:	1007883a 	mov	r3,r2
  80ca00:	00802074 	movhi	r2,129
  80ca04:	10832404 	addi	r2,r2,3216
  80ca08:	1887883a 	add	r3,r3,r2
  80ca0c:	e0ffff15 	stw	r3,-4(fp)
  80ca10:	00000106 	br	80ca18 <write+0x4c>
  80ca14:	e03fff15 	stw	zero,-4(fp)
  80ca18:	e0bfff17 	ldw	r2,-4(fp)
  80ca1c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80ca20:	e0bffa17 	ldw	r2,-24(fp)
  80ca24:	1005003a 	cmpeq	r2,r2,zero
  80ca28:	1000241e 	bne	r2,zero,80cabc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80ca2c:	e0bffa17 	ldw	r2,-24(fp)
  80ca30:	10800217 	ldw	r2,8(r2)
  80ca34:	108000cc 	andi	r2,r2,3
  80ca38:	1005003a 	cmpeq	r2,r2,zero
  80ca3c:	10001a1e 	bne	r2,zero,80caa8 <write+0xdc>
  80ca40:	e0bffa17 	ldw	r2,-24(fp)
  80ca44:	10800017 	ldw	r2,0(r2)
  80ca48:	10800617 	ldw	r2,24(r2)
  80ca4c:	1005003a 	cmpeq	r2,r2,zero
  80ca50:	1000151e 	bne	r2,zero,80caa8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80ca54:	e0bffa17 	ldw	r2,-24(fp)
  80ca58:	10800017 	ldw	r2,0(r2)
  80ca5c:	10800617 	ldw	r2,24(r2)
  80ca60:	e17ffc17 	ldw	r5,-16(fp)
  80ca64:	e1bffd17 	ldw	r6,-12(fp)
  80ca68:	e13ffa17 	ldw	r4,-24(fp)
  80ca6c:	103ee83a 	callr	r2
  80ca70:	e0bff915 	stw	r2,-28(fp)
  80ca74:	e0bff917 	ldw	r2,-28(fp)
  80ca78:	1004403a 	cmpge	r2,r2,zero
  80ca7c:	1000071e 	bne	r2,zero,80ca9c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80ca80:	080caec0 	call	80caec <alt_get_errno>
  80ca84:	e0fff917 	ldw	r3,-28(fp)
  80ca88:	00c7c83a 	sub	r3,zero,r3
  80ca8c:	10c00015 	stw	r3,0(r2)
        return -1;
  80ca90:	00bfffc4 	movi	r2,-1
  80ca94:	e0bffe15 	stw	r2,-8(fp)
  80ca98:	00000e06 	br	80cad4 <write+0x108>
      }
      return rval;
  80ca9c:	e0bff917 	ldw	r2,-28(fp)
  80caa0:	e0bffe15 	stw	r2,-8(fp)
  80caa4:	00000b06 	br	80cad4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80caa8:	080caec0 	call	80caec <alt_get_errno>
  80caac:	1007883a 	mov	r3,r2
  80cab0:	00800344 	movi	r2,13
  80cab4:	18800015 	stw	r2,0(r3)
  80cab8:	00000406 	br	80cacc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80cabc:	080caec0 	call	80caec <alt_get_errno>
  80cac0:	1007883a 	mov	r3,r2
  80cac4:	00801444 	movi	r2,81
  80cac8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80cacc:	00bfffc4 	movi	r2,-1
  80cad0:	e0bffe15 	stw	r2,-8(fp)
  80cad4:	e0bffe17 	ldw	r2,-8(fp)
}
  80cad8:	e037883a 	mov	sp,fp
  80cadc:	dfc00117 	ldw	ra,4(sp)
  80cae0:	df000017 	ldw	fp,0(sp)
  80cae4:	dec00204 	addi	sp,sp,8
  80cae8:	f800283a 	ret

0080caec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80caec:	defffd04 	addi	sp,sp,-12
  80caf0:	dfc00215 	stw	ra,8(sp)
  80caf4:	df000115 	stw	fp,4(sp)
  80caf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cafc:	00802074 	movhi	r2,129
  80cb00:	10881504 	addi	r2,r2,8276
  80cb04:	10800017 	ldw	r2,0(r2)
  80cb08:	1005003a 	cmpeq	r2,r2,zero
  80cb0c:	1000061e 	bne	r2,zero,80cb28 <alt_get_errno+0x3c>
  80cb10:	00802074 	movhi	r2,129
  80cb14:	10881504 	addi	r2,r2,8276
  80cb18:	10800017 	ldw	r2,0(r2)
  80cb1c:	103ee83a 	callr	r2
  80cb20:	e0bfff15 	stw	r2,-4(fp)
  80cb24:	00000306 	br	80cb34 <alt_get_errno+0x48>
  80cb28:	00802074 	movhi	r2,129
  80cb2c:	108f2504 	addi	r2,r2,15508
  80cb30:	e0bfff15 	stw	r2,-4(fp)
  80cb34:	e0bfff17 	ldw	r2,-4(fp)
}
  80cb38:	e037883a 	mov	sp,fp
  80cb3c:	dfc00117 	ldw	ra,4(sp)
  80cb40:	df000017 	ldw	fp,0(sp)
  80cb44:	dec00204 	addi	sp,sp,8
  80cb48:	f800283a 	ret

0080cb4c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80cb4c:	defffd04 	addi	sp,sp,-12
  80cb50:	dfc00215 	stw	ra,8(sp)
  80cb54:	df000115 	stw	fp,4(sp)
  80cb58:	df000104 	addi	fp,sp,4
  80cb5c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
  80cb60:	080f6640 	call	80f664 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80cb64:	00800044 	movi	r2,1
  80cb68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80cb6c:	e037883a 	mov	sp,fp
  80cb70:	dfc00117 	ldw	ra,4(sp)
  80cb74:	df000017 	ldw	fp,0(sp)
  80cb78:	dec00204 	addi	sp,sp,8
  80cb7c:	f800283a 	ret

0080cb80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80cb80:	defffd04 	addi	sp,sp,-12
  80cb84:	dfc00215 	stw	ra,8(sp)
  80cb88:	df000115 	stw	fp,4(sp)
  80cb8c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  80cb90:	01004234 	movhi	r4,264
  80cb94:	210d0004 	addi	r4,r4,13312
  80cb98:	000b883a 	mov	r5,zero
  80cb9c:	000d883a 	mov	r6,zero
  80cba0:	01c0fa04 	movi	r7,1000
  80cba4:	080da6c0 	call	80da6c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
  80cba8:	00c02074 	movhi	r3,129
  80cbac:	18cf2e04 	addi	r3,r3,15544
  80cbb0:	00804234 	movhi	r2,264
  80cbb4:	108d0804 	addi	r2,r2,13344
  80cbb8:	18800015 	stw	r2,0(r3)
  80cbbc:	00c02074 	movhi	r3,129
  80cbc0:	18cf2f04 	addi	r3,r3,15548
  80cbc4:	0080bef4 	movhi	r2,763
  80cbc8:	10bc2004 	addi	r2,r2,-3968
  80cbcc:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80cbd0:	01002074 	movhi	r4,129
  80cbd4:	21038e04 	addi	r4,r4,3640
  80cbd8:	000b883a 	mov	r5,zero
  80cbdc:	01800104 	movi	r6,4
  80cbe0:	080d0980 	call	80d098 <altera_avalon_jtag_uart_init>
  80cbe4:	01002074 	movhi	r4,129
  80cbe8:	21038404 	addi	r4,r4,3600
  80cbec:	080cf180 	call	80cf18 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  80cbf0:	01002074 	movhi	r4,129
  80cbf4:	21079c04 	addi	r4,r4,7792
  80cbf8:	080cf180 	call	80cf18 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
  80cbfc:	01002074 	movhi	r4,129
  80cc00:	2107a804 	addi	r4,r4,7840
  80cc04:	080cf180 	call	80cf18 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  80cc08:	01002074 	movhi	r4,129
  80cc0c:	2107b404 	addi	r4,r4,7888
  80cc10:	080dba40 	call	80dba4 <alt_up_character_lcd_init>
  80cc14:	01002074 	movhi	r4,129
  80cc18:	2107b404 	addi	r4,r4,7888
  80cc1c:	080cf180 	call	80cf18 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
  80cc20:	01002074 	movhi	r4,129
  80cc24:	2107bf04 	addi	r4,r4,7932
  80cc28:	080e1500 	call	80e150 <alt_up_ps2_init>
  80cc2c:	01002074 	movhi	r4,129
  80cc30:	2107bf04 	addi	r4,r4,7932
  80cc34:	080cf180 	call	80cf18 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  80cc38:	01002074 	movhi	r4,129
  80cc3c:	2107cd04 	addi	r4,r4,7988
  80cc40:	080cf180 	call	80cf18 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  80cc44:	00802074 	movhi	r2,129
  80cc48:	1087d804 	addi	r2,r2,8032
  80cc4c:	10800a17 	ldw	r2,40(r2)
  80cc50:	10800104 	addi	r2,r2,4
  80cc54:	10800017 	ldw	r2,0(r2)
  80cc58:	10ffffcc 	andi	r3,r2,65535
  80cc5c:	00802074 	movhi	r2,129
  80cc60:	1087d804 	addi	r2,r2,8032
  80cc64:	10c00c15 	stw	r3,48(r2)
  80cc68:	00802074 	movhi	r2,129
  80cc6c:	1087d804 	addi	r2,r2,8032
  80cc70:	10800a17 	ldw	r2,40(r2)
  80cc74:	10800104 	addi	r2,r2,4
  80cc78:	10800017 	ldw	r2,0(r2)
  80cc7c:	1005d43a 	srai	r2,r2,16
  80cc80:	10ffffcc 	andi	r3,r2,65535
  80cc84:	00802074 	movhi	r2,129
  80cc88:	1087d804 	addi	r2,r2,8032
  80cc8c:	10c00d15 	stw	r3,52(r2)
  80cc90:	00802074 	movhi	r2,129
  80cc94:	1087d804 	addi	r2,r2,8032
  80cc98:	10800c17 	ldw	r2,48(r2)
  80cc9c:	10801068 	cmpgeui	r2,r2,65
  80cca0:	1000081e 	bne	r2,zero,80ccc4 <alt_sys_init+0x144>
  80cca4:	00c02074 	movhi	r3,129
  80cca8:	18c7d804 	addi	r3,r3,8032
  80ccac:	00800fc4 	movi	r2,63
  80ccb0:	18800f15 	stw	r2,60(r3)
  80ccb4:	00c02074 	movhi	r3,129
  80ccb8:	18c7d804 	addi	r3,r3,8032
  80ccbc:	00800184 	movi	r2,6
  80ccc0:	18801015 	stw	r2,64(r3)
  80ccc4:	00802074 	movhi	r2,129
  80ccc8:	1087d804 	addi	r2,r2,8032
  80cccc:	10800d17 	ldw	r2,52(r2)
  80ccd0:	10800868 	cmpgeui	r2,r2,33
  80ccd4:	1000041e 	bne	r2,zero,80cce8 <alt_sys_init+0x168>
  80ccd8:	00c02074 	movhi	r3,129
  80ccdc:	18c7d804 	addi	r3,r3,8032
  80cce0:	008007c4 	movi	r2,31
  80cce4:	18801115 	stw	r2,68(r3)
  80cce8:	01002074 	movhi	r4,129
  80ccec:	2107d804 	addi	r4,r4,8032
  80ccf0:	080eabc0 	call	80eabc <alt_up_char_buffer_init>
  80ccf4:	01002074 	movhi	r4,129
  80ccf8:	2107d804 	addi	r4,r4,8032
  80ccfc:	080cf180 	call	80cf18 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA_0, pixel_buffer_dma_0);
  80cd00:	00802074 	movhi	r2,129
  80cd04:	1087ea04 	addi	r2,r2,8104
  80cd08:	10800a17 	ldw	r2,40(r2)
  80cd0c:	10800017 	ldw	r2,0(r2)
  80cd10:	1007883a 	mov	r3,r2
  80cd14:	00802074 	movhi	r2,129
  80cd18:	1087ea04 	addi	r2,r2,8104
  80cd1c:	10c00b15 	stw	r3,44(r2)
  80cd20:	00802074 	movhi	r2,129
  80cd24:	1087ea04 	addi	r2,r2,8104
  80cd28:	10800a17 	ldw	r2,40(r2)
  80cd2c:	10800104 	addi	r2,r2,4
  80cd30:	10800017 	ldw	r2,0(r2)
  80cd34:	1007883a 	mov	r3,r2
  80cd38:	00802074 	movhi	r2,129
  80cd3c:	1087ea04 	addi	r2,r2,8104
  80cd40:	10c00c15 	stw	r3,48(r2)
  80cd44:	00802074 	movhi	r2,129
  80cd48:	1087ea04 	addi	r2,r2,8104
  80cd4c:	10800a17 	ldw	r2,40(r2)
  80cd50:	10800204 	addi	r2,r2,8
  80cd54:	10800017 	ldw	r2,0(r2)
  80cd58:	10ffffcc 	andi	r3,r2,65535
  80cd5c:	00802074 	movhi	r2,129
  80cd60:	1087ea04 	addi	r2,r2,8104
  80cd64:	10c00f15 	stw	r3,60(r2)
  80cd68:	00802074 	movhi	r2,129
  80cd6c:	1087ea04 	addi	r2,r2,8104
  80cd70:	10800a17 	ldw	r2,40(r2)
  80cd74:	10800204 	addi	r2,r2,8
  80cd78:	10800017 	ldw	r2,0(r2)
  80cd7c:	1005d43a 	srai	r2,r2,16
  80cd80:	10ffffcc 	andi	r3,r2,65535
  80cd84:	00802074 	movhi	r2,129
  80cd88:	1087ea04 	addi	r2,r2,8104
  80cd8c:	10c01015 	stw	r3,64(r2)
  80cd90:	00802074 	movhi	r2,129
  80cd94:	1087ea04 	addi	r2,r2,8104
  80cd98:	10800a17 	ldw	r2,40(r2)
  80cd9c:	10800304 	addi	r2,r2,12
  80cda0:	10800017 	ldw	r2,0(r2)
  80cda4:	1005d07a 	srai	r2,r2,1
  80cda8:	10c0004c 	andi	r3,r2,1
  80cdac:	00802074 	movhi	r2,129
  80cdb0:	1087ea04 	addi	r2,r2,8104
  80cdb4:	10c00d15 	stw	r3,52(r2)
  80cdb8:	00802074 	movhi	r2,129
  80cdbc:	1087ea04 	addi	r2,r2,8104
  80cdc0:	10800a17 	ldw	r2,40(r2)
  80cdc4:	10800304 	addi	r2,r2,12
  80cdc8:	10800017 	ldw	r2,0(r2)
  80cdcc:	1005d13a 	srai	r2,r2,4
  80cdd0:	10c003cc 	andi	r3,r2,15
  80cdd4:	00802074 	movhi	r2,129
  80cdd8:	1087ea04 	addi	r2,r2,8104
  80cddc:	10c00e15 	stw	r3,56(r2)
  80cde0:	00802074 	movhi	r2,129
  80cde4:	1087ea04 	addi	r2,r2,8104
  80cde8:	10800a17 	ldw	r2,40(r2)
  80cdec:	10800304 	addi	r2,r2,12
  80cdf0:	10800017 	ldw	r2,0(r2)
  80cdf4:	1005d43a 	srai	r2,r2,16
  80cdf8:	1007883a 	mov	r3,r2
  80cdfc:	00bfffc4 	movi	r2,-1
  80ce00:	1884703a 	and	r2,r3,r2
  80ce04:	e0bfff45 	stb	r2,-3(fp)
  80ce08:	00802074 	movhi	r2,129
  80ce0c:	1087ea04 	addi	r2,r2,8104
  80ce10:	10800a17 	ldw	r2,40(r2)
  80ce14:	10800304 	addi	r2,r2,12
  80ce18:	10800017 	ldw	r2,0(r2)
  80ce1c:	1005d63a 	srai	r2,r2,24
  80ce20:	1007883a 	mov	r3,r2
  80ce24:	00bfffc4 	movi	r2,-1
  80ce28:	1884703a 	and	r2,r3,r2
  80ce2c:	e0bfff05 	stb	r2,-4(fp)
  80ce30:	00802074 	movhi	r2,129
  80ce34:	1087ea04 	addi	r2,r2,8104
  80ce38:	10800e17 	ldw	r2,56(r2)
  80ce3c:	10800058 	cmpnei	r2,r2,1
  80ce40:	1000041e 	bne	r2,zero,80ce54 <alt_sys_init+0x2d4>
  80ce44:	00802074 	movhi	r2,129
  80ce48:	1087ea04 	addi	r2,r2,8104
  80ce4c:	10001115 	stw	zero,68(r2)
  80ce50:	00000e06 	br	80ce8c <alt_sys_init+0x30c>
  80ce54:	00802074 	movhi	r2,129
  80ce58:	1087ea04 	addi	r2,r2,8104
  80ce5c:	10800e17 	ldw	r2,56(r2)
  80ce60:	10800098 	cmpnei	r2,r2,2
  80ce64:	1000051e 	bne	r2,zero,80ce7c <alt_sys_init+0x2fc>
  80ce68:	00c02074 	movhi	r3,129
  80ce6c:	18c7ea04 	addi	r3,r3,8104
  80ce70:	00800044 	movi	r2,1
  80ce74:	18801115 	stw	r2,68(r3)
  80ce78:	00000406 	br	80ce8c <alt_sys_init+0x30c>
  80ce7c:	00c02074 	movhi	r3,129
  80ce80:	18c7ea04 	addi	r3,r3,8104
  80ce84:	00800084 	movi	r2,2
  80ce88:	18801115 	stw	r2,68(r3)
  80ce8c:	e0ffff43 	ldbu	r3,-3(fp)
  80ce90:	00800804 	movi	r2,32
  80ce94:	10c7c83a 	sub	r3,r2,r3
  80ce98:	00bfffc4 	movi	r2,-1
  80ce9c:	10c6d83a 	srl	r3,r2,r3
  80cea0:	00802074 	movhi	r2,129
  80cea4:	1087ea04 	addi	r2,r2,8104
  80cea8:	10c01215 	stw	r3,72(r2)
  80ceac:	e0ffff43 	ldbu	r3,-3(fp)
  80ceb0:	00802074 	movhi	r2,129
  80ceb4:	1087ea04 	addi	r2,r2,8104
  80ceb8:	10801117 	ldw	r2,68(r2)
  80cebc:	1887883a 	add	r3,r3,r2
  80cec0:	00802074 	movhi	r2,129
  80cec4:	1087ea04 	addi	r2,r2,8104
  80cec8:	10c01315 	stw	r3,76(r2)
  80cecc:	e0ffff03 	ldbu	r3,-4(fp)
  80ced0:	00800804 	movi	r2,32
  80ced4:	10c7c83a 	sub	r3,r2,r3
  80ced8:	00bfffc4 	movi	r2,-1
  80cedc:	10c6d83a 	srl	r3,r2,r3
  80cee0:	00802074 	movhi	r2,129
  80cee4:	1087ea04 	addi	r2,r2,8104
  80cee8:	10c01415 	stw	r3,80(r2)
  80ceec:	01002074 	movhi	r4,129
  80cef0:	2107ea04 	addi	r4,r4,8104
  80cef4:	080cf180 	call	80cf18 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
  80cef8:	01002074 	movhi	r4,129
  80cefc:	2107ff04 	addi	r4,r4,8188
  80cf00:	080cf180 	call	80cf18 <alt_dev_reg>
}
  80cf04:	e037883a 	mov	sp,fp
  80cf08:	dfc00117 	ldw	ra,4(sp)
  80cf0c:	df000017 	ldw	fp,0(sp)
  80cf10:	dec00204 	addi	sp,sp,8
  80cf14:	f800283a 	ret

0080cf18 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80cf18:	defffd04 	addi	sp,sp,-12
  80cf1c:	dfc00215 	stw	ra,8(sp)
  80cf20:	df000115 	stw	fp,4(sp)
  80cf24:	df000104 	addi	fp,sp,4
  80cf28:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80cf2c:	e13fff17 	ldw	r4,-4(fp)
  80cf30:	01402074 	movhi	r5,129
  80cf34:	29481204 	addi	r5,r5,8264
  80cf38:	080ee040 	call	80ee04 <alt_dev_llist_insert>
}
  80cf3c:	e037883a 	mov	sp,fp
  80cf40:	dfc00117 	ldw	ra,4(sp)
  80cf44:	df000017 	ldw	fp,0(sp)
  80cf48:	dec00204 	addi	sp,sp,8
  80cf4c:	f800283a 	ret

0080cf50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80cf50:	defffa04 	addi	sp,sp,-24
  80cf54:	dfc00515 	stw	ra,20(sp)
  80cf58:	df000415 	stw	fp,16(sp)
  80cf5c:	df000404 	addi	fp,sp,16
  80cf60:	e13ffd15 	stw	r4,-12(fp)
  80cf64:	e17ffe15 	stw	r5,-8(fp)
  80cf68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80cf6c:	e0bffd17 	ldw	r2,-12(fp)
  80cf70:	10800017 	ldw	r2,0(r2)
  80cf74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80cf78:	e0bffc17 	ldw	r2,-16(fp)
  80cf7c:	11000a04 	addi	r4,r2,40
  80cf80:	e0bffd17 	ldw	r2,-12(fp)
  80cf84:	11c00217 	ldw	r7,8(r2)
  80cf88:	e17ffe17 	ldw	r5,-8(fp)
  80cf8c:	e1bfff17 	ldw	r6,-4(fp)
  80cf90:	080d5940 	call	80d594 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80cf94:	e037883a 	mov	sp,fp
  80cf98:	dfc00117 	ldw	ra,4(sp)
  80cf9c:	df000017 	ldw	fp,0(sp)
  80cfa0:	dec00204 	addi	sp,sp,8
  80cfa4:	f800283a 	ret

0080cfa8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80cfa8:	defffa04 	addi	sp,sp,-24
  80cfac:	dfc00515 	stw	ra,20(sp)
  80cfb0:	df000415 	stw	fp,16(sp)
  80cfb4:	df000404 	addi	fp,sp,16
  80cfb8:	e13ffd15 	stw	r4,-12(fp)
  80cfbc:	e17ffe15 	stw	r5,-8(fp)
  80cfc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80cfc4:	e0bffd17 	ldw	r2,-12(fp)
  80cfc8:	10800017 	ldw	r2,0(r2)
  80cfcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80cfd0:	e0bffc17 	ldw	r2,-16(fp)
  80cfd4:	11000a04 	addi	r4,r2,40
  80cfd8:	e0bffd17 	ldw	r2,-12(fp)
  80cfdc:	11c00217 	ldw	r7,8(r2)
  80cfe0:	e17ffe17 	ldw	r5,-8(fp)
  80cfe4:	e1bfff17 	ldw	r6,-4(fp)
  80cfe8:	080d7b80 	call	80d7b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80cfec:	e037883a 	mov	sp,fp
  80cff0:	dfc00117 	ldw	ra,4(sp)
  80cff4:	df000017 	ldw	fp,0(sp)
  80cff8:	dec00204 	addi	sp,sp,8
  80cffc:	f800283a 	ret

0080d000 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80d000:	defffc04 	addi	sp,sp,-16
  80d004:	dfc00315 	stw	ra,12(sp)
  80d008:	df000215 	stw	fp,8(sp)
  80d00c:	df000204 	addi	fp,sp,8
  80d010:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d014:	e0bfff17 	ldw	r2,-4(fp)
  80d018:	10800017 	ldw	r2,0(r2)
  80d01c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80d020:	e0bffe17 	ldw	r2,-8(fp)
  80d024:	11000a04 	addi	r4,r2,40
  80d028:	e0bfff17 	ldw	r2,-4(fp)
  80d02c:	11400217 	ldw	r5,8(r2)
  80d030:	080d42c0 	call	80d42c <altera_avalon_jtag_uart_close>
}
  80d034:	e037883a 	mov	sp,fp
  80d038:	dfc00117 	ldw	ra,4(sp)
  80d03c:	df000017 	ldw	fp,0(sp)
  80d040:	dec00204 	addi	sp,sp,8
  80d044:	f800283a 	ret

0080d048 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80d048:	defffa04 	addi	sp,sp,-24
  80d04c:	dfc00515 	stw	ra,20(sp)
  80d050:	df000415 	stw	fp,16(sp)
  80d054:	df000404 	addi	fp,sp,16
  80d058:	e13ffd15 	stw	r4,-12(fp)
  80d05c:	e17ffe15 	stw	r5,-8(fp)
  80d060:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80d064:	e0bffd17 	ldw	r2,-12(fp)
  80d068:	10800017 	ldw	r2,0(r2)
  80d06c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80d070:	e0bffc17 	ldw	r2,-16(fp)
  80d074:	11000a04 	addi	r4,r2,40
  80d078:	e17ffe17 	ldw	r5,-8(fp)
  80d07c:	e1bfff17 	ldw	r6,-4(fp)
  80d080:	080d4a00 	call	80d4a0 <altera_avalon_jtag_uart_ioctl>
}
  80d084:	e037883a 	mov	sp,fp
  80d088:	dfc00117 	ldw	ra,4(sp)
  80d08c:	df000017 	ldw	fp,0(sp)
  80d090:	dec00204 	addi	sp,sp,8
  80d094:	f800283a 	ret

0080d098 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80d098:	defffb04 	addi	sp,sp,-20
  80d09c:	dfc00415 	stw	ra,16(sp)
  80d0a0:	df000315 	stw	fp,12(sp)
  80d0a4:	df000304 	addi	fp,sp,12
  80d0a8:	e13ffd15 	stw	r4,-12(fp)
  80d0ac:	e17ffe15 	stw	r5,-8(fp)
  80d0b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d0b4:	e0fffd17 	ldw	r3,-12(fp)
  80d0b8:	00800044 	movi	r2,1
  80d0bc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80d0c0:	e0bffd17 	ldw	r2,-12(fp)
  80d0c4:	10800017 	ldw	r2,0(r2)
  80d0c8:	11000104 	addi	r4,r2,4
  80d0cc:	e0bffd17 	ldw	r2,-12(fp)
  80d0d0:	10800817 	ldw	r2,32(r2)
  80d0d4:	1007883a 	mov	r3,r2
  80d0d8:	2005883a 	mov	r2,r4
  80d0dc:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80d0e0:	e13fff17 	ldw	r4,-4(fp)
  80d0e4:	e17ffd17 	ldw	r5,-12(fp)
  80d0e8:	01802074 	movhi	r6,129
  80d0ec:	31b45404 	addi	r6,r6,-11952
  80d0f0:	080f1e00 	call	80f1e0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80d0f4:	e0bffd17 	ldw	r2,-12(fp)
  80d0f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80d0fc:	e0bffd17 	ldw	r2,-12(fp)
  80d100:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d104:	00802074 	movhi	r2,129
  80d108:	108f2c04 	addi	r2,r2,15536
  80d10c:	10800017 	ldw	r2,0(r2)
  80d110:	100b883a 	mov	r5,r2
  80d114:	01802074 	movhi	r6,129
  80d118:	31b4df04 	addi	r6,r6,-11396
  80d11c:	e1fffd17 	ldw	r7,-12(fp)
  80d120:	080bd740 	call	80bd74 <alt_alarm_start>
  80d124:	1004403a 	cmpge	r2,r2,zero
  80d128:	1000041e 	bne	r2,zero,80d13c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80d12c:	e0fffd17 	ldw	r3,-12(fp)
  80d130:	00a00034 	movhi	r2,32768
  80d134:	10bfffc4 	addi	r2,r2,-1
  80d138:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80d13c:	e037883a 	mov	sp,fp
  80d140:	dfc00117 	ldw	ra,4(sp)
  80d144:	df000017 	ldw	fp,0(sp)
  80d148:	dec00204 	addi	sp,sp,8
  80d14c:	f800283a 	ret

0080d150 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80d150:	defff704 	addi	sp,sp,-36
  80d154:	df000815 	stw	fp,32(sp)
  80d158:	df000804 	addi	fp,sp,32
  80d15c:	e13ffe15 	stw	r4,-8(fp)
  80d160:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80d164:	e0bffe17 	ldw	r2,-8(fp)
  80d168:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  80d16c:	e0bffd17 	ldw	r2,-12(fp)
  80d170:	10800017 	ldw	r2,0(r2)
  80d174:	e0bffc15 	stw	r2,-16(fp)
  80d178:	00000006 	br	80d17c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d17c:	e0bffc17 	ldw	r2,-16(fp)
  80d180:	10800104 	addi	r2,r2,4
  80d184:	10800037 	ldwio	r2,0(r2)
  80d188:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80d18c:	e0bffb17 	ldw	r2,-20(fp)
  80d190:	1080c00c 	andi	r2,r2,768
  80d194:	1005003a 	cmpeq	r2,r2,zero
  80d198:	1000741e 	bne	r2,zero,80d36c <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80d19c:	e0bffb17 	ldw	r2,-20(fp)
  80d1a0:	1080400c 	andi	r2,r2,256
  80d1a4:	1005003a 	cmpeq	r2,r2,zero
  80d1a8:	1000351e 	bne	r2,zero,80d280 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80d1ac:	00800074 	movhi	r2,1
  80d1b0:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d1b4:	e0bffd17 	ldw	r2,-12(fp)
  80d1b8:	10800a17 	ldw	r2,40(r2)
  80d1bc:	10800044 	addi	r2,r2,1
  80d1c0:	1081ffcc 	andi	r2,r2,2047
  80d1c4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  80d1c8:	e0bffd17 	ldw	r2,-12(fp)
  80d1cc:	10c00b17 	ldw	r3,44(r2)
  80d1d0:	e0bff917 	ldw	r2,-28(fp)
  80d1d4:	18801626 	beq	r3,r2,80d230 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80d1d8:	e0bffc17 	ldw	r2,-16(fp)
  80d1dc:	10800037 	ldwio	r2,0(r2)
  80d1e0:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80d1e4:	e0bffa17 	ldw	r2,-24(fp)
  80d1e8:	10a0000c 	andi	r2,r2,32768
  80d1ec:	1005003a 	cmpeq	r2,r2,zero
  80d1f0:	10000f1e 	bne	r2,zero,80d230 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80d1f4:	e0bffd17 	ldw	r2,-12(fp)
  80d1f8:	10c00a17 	ldw	r3,40(r2)
  80d1fc:	e0bffa17 	ldw	r2,-24(fp)
  80d200:	1009883a 	mov	r4,r2
  80d204:	e0bffd17 	ldw	r2,-12(fp)
  80d208:	1885883a 	add	r2,r3,r2
  80d20c:	10800e04 	addi	r2,r2,56
  80d210:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d214:	e0bffd17 	ldw	r2,-12(fp)
  80d218:	10800a17 	ldw	r2,40(r2)
  80d21c:	10800044 	addi	r2,r2,1
  80d220:	10c1ffcc 	andi	r3,r2,2047
  80d224:	e0bffd17 	ldw	r2,-12(fp)
  80d228:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80d22c:	003fe106 	br	80d1b4 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80d230:	e0bffa17 	ldw	r2,-24(fp)
  80d234:	10bfffec 	andhi	r2,r2,65535
  80d238:	1005003a 	cmpeq	r2,r2,zero
  80d23c:	1000101e 	bne	r2,zero,80d280 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d240:	e0bffd17 	ldw	r2,-12(fp)
  80d244:	10c00817 	ldw	r3,32(r2)
  80d248:	00bfff84 	movi	r2,-2
  80d24c:	1886703a 	and	r3,r3,r2
  80d250:	e0bffd17 	ldw	r2,-12(fp)
  80d254:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80d258:	e0bffc17 	ldw	r2,-16(fp)
  80d25c:	11000104 	addi	r4,r2,4
  80d260:	e0bffd17 	ldw	r2,-12(fp)
  80d264:	10800817 	ldw	r2,32(r2)
  80d268:	1007883a 	mov	r3,r2
  80d26c:	2005883a 	mov	r2,r4
  80d270:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d274:	e0bffc17 	ldw	r2,-16(fp)
  80d278:	10800104 	addi	r2,r2,4
  80d27c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80d280:	e0bffb17 	ldw	r2,-20(fp)
  80d284:	1080800c 	andi	r2,r2,512
  80d288:	1005003a 	cmpeq	r2,r2,zero
  80d28c:	103fbb1e 	bne	r2,zero,80d17c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80d290:	e0bffb17 	ldw	r2,-20(fp)
  80d294:	10bfffec 	andhi	r2,r2,65535
  80d298:	1004d43a 	srli	r2,r2,16
  80d29c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d2a0:	00001506 	br	80d2f8 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80d2a4:	e13ffc17 	ldw	r4,-16(fp)
  80d2a8:	e0bffd17 	ldw	r2,-12(fp)
  80d2ac:	10c00d17 	ldw	r3,52(r2)
  80d2b0:	e0bffd17 	ldw	r2,-12(fp)
  80d2b4:	1885883a 	add	r2,r3,r2
  80d2b8:	10820e04 	addi	r2,r2,2104
  80d2bc:	10800003 	ldbu	r2,0(r2)
  80d2c0:	10c03fcc 	andi	r3,r2,255
  80d2c4:	18c0201c 	xori	r3,r3,128
  80d2c8:	18ffe004 	addi	r3,r3,-128
  80d2cc:	2005883a 	mov	r2,r4
  80d2d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d2d4:	e0bffd17 	ldw	r2,-12(fp)
  80d2d8:	10800d17 	ldw	r2,52(r2)
  80d2dc:	10800044 	addi	r2,r2,1
  80d2e0:	10c1ffcc 	andi	r3,r2,2047
  80d2e4:	e0bffd17 	ldw	r2,-12(fp)
  80d2e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80d2ec:	e0bff817 	ldw	r2,-32(fp)
  80d2f0:	10bfffc4 	addi	r2,r2,-1
  80d2f4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d2f8:	e0bff817 	ldw	r2,-32(fp)
  80d2fc:	1005003a 	cmpeq	r2,r2,zero
  80d300:	1000051e 	bne	r2,zero,80d318 <altera_avalon_jtag_uart_irq+0x1c8>
  80d304:	e0bffd17 	ldw	r2,-12(fp)
  80d308:	10c00d17 	ldw	r3,52(r2)
  80d30c:	e0bffd17 	ldw	r2,-12(fp)
  80d310:	10800c17 	ldw	r2,48(r2)
  80d314:	18bfe31e 	bne	r3,r2,80d2a4 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80d318:	e0bff817 	ldw	r2,-32(fp)
  80d31c:	1005003a 	cmpeq	r2,r2,zero
  80d320:	103f961e 	bne	r2,zero,80d17c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d324:	e0bffd17 	ldw	r2,-12(fp)
  80d328:	10c00817 	ldw	r3,32(r2)
  80d32c:	00bfff44 	movi	r2,-3
  80d330:	1886703a 	and	r3,r3,r2
  80d334:	e0bffd17 	ldw	r2,-12(fp)
  80d338:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d33c:	e0bffd17 	ldw	r2,-12(fp)
  80d340:	10800017 	ldw	r2,0(r2)
  80d344:	11000104 	addi	r4,r2,4
  80d348:	e0bffd17 	ldw	r2,-12(fp)
  80d34c:	10800817 	ldw	r2,32(r2)
  80d350:	1007883a 	mov	r3,r2
  80d354:	2005883a 	mov	r2,r4
  80d358:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d35c:	e0bffc17 	ldw	r2,-16(fp)
  80d360:	10800104 	addi	r2,r2,4
  80d364:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80d368:	003f8406 	br	80d17c <altera_avalon_jtag_uart_irq+0x2c>
}
  80d36c:	e037883a 	mov	sp,fp
  80d370:	df000017 	ldw	fp,0(sp)
  80d374:	dec00104 	addi	sp,sp,4
  80d378:	f800283a 	ret

0080d37c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80d37c:	defffc04 	addi	sp,sp,-16
  80d380:	df000315 	stw	fp,12(sp)
  80d384:	df000304 	addi	fp,sp,12
  80d388:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80d38c:	e0bfff17 	ldw	r2,-4(fp)
  80d390:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80d394:	e0bffe17 	ldw	r2,-8(fp)
  80d398:	10800017 	ldw	r2,0(r2)
  80d39c:	10800104 	addi	r2,r2,4
  80d3a0:	10800037 	ldwio	r2,0(r2)
  80d3a4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80d3a8:	e0bffd17 	ldw	r2,-12(fp)
  80d3ac:	1081000c 	andi	r2,r2,1024
  80d3b0:	1005003a 	cmpeq	r2,r2,zero
  80d3b4:	10000c1e 	bne	r2,zero,80d3e8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80d3b8:	e0bffe17 	ldw	r2,-8(fp)
  80d3bc:	10800017 	ldw	r2,0(r2)
  80d3c0:	11000104 	addi	r4,r2,4
  80d3c4:	e0bffe17 	ldw	r2,-8(fp)
  80d3c8:	10800817 	ldw	r2,32(r2)
  80d3cc:	10810014 	ori	r2,r2,1024
  80d3d0:	1007883a 	mov	r3,r2
  80d3d4:	2005883a 	mov	r2,r4
  80d3d8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80d3dc:	e0bffe17 	ldw	r2,-8(fp)
  80d3e0:	10000915 	stw	zero,36(r2)
  80d3e4:	00000a06 	br	80d410 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80d3e8:	e0bffe17 	ldw	r2,-8(fp)
  80d3ec:	10c00917 	ldw	r3,36(r2)
  80d3f0:	00a00034 	movhi	r2,32768
  80d3f4:	10bfff04 	addi	r2,r2,-4
  80d3f8:	10c00536 	bltu	r2,r3,80d410 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80d3fc:	e0bffe17 	ldw	r2,-8(fp)
  80d400:	10800917 	ldw	r2,36(r2)
  80d404:	10c00044 	addi	r3,r2,1
  80d408:	e0bffe17 	ldw	r2,-8(fp)
  80d40c:	10c00915 	stw	r3,36(r2)
  80d410:	00802074 	movhi	r2,129
  80d414:	108f2c04 	addi	r2,r2,15536
  80d418:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80d41c:	e037883a 	mov	sp,fp
  80d420:	df000017 	ldw	fp,0(sp)
  80d424:	dec00104 	addi	sp,sp,4
  80d428:	f800283a 	ret

0080d42c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80d42c:	defffc04 	addi	sp,sp,-16
  80d430:	df000315 	stw	fp,12(sp)
  80d434:	df000304 	addi	fp,sp,12
  80d438:	e13ffd15 	stw	r4,-12(fp)
  80d43c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d440:	00000706 	br	80d460 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80d444:	e0bffe17 	ldw	r2,-8(fp)
  80d448:	1090000c 	andi	r2,r2,16384
  80d44c:	1005003a 	cmpeq	r2,r2,zero
  80d450:	1000031e 	bne	r2,zero,80d460 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80d454:	00bffd44 	movi	r2,-11
  80d458:	e0bfff15 	stw	r2,-4(fp)
  80d45c:	00000b06 	br	80d48c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d460:	e0bffd17 	ldw	r2,-12(fp)
  80d464:	10c00d17 	ldw	r3,52(r2)
  80d468:	e0bffd17 	ldw	r2,-12(fp)
  80d46c:	10800c17 	ldw	r2,48(r2)
  80d470:	18800526 	beq	r3,r2,80d488 <altera_avalon_jtag_uart_close+0x5c>
  80d474:	e0bffd17 	ldw	r2,-12(fp)
  80d478:	10c00917 	ldw	r3,36(r2)
  80d47c:	e0bffd17 	ldw	r2,-12(fp)
  80d480:	10800117 	ldw	r2,4(r2)
  80d484:	18bfef36 	bltu	r3,r2,80d444 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d488:	e03fff15 	stw	zero,-4(fp)
  80d48c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d490:	e037883a 	mov	sp,fp
  80d494:	df000017 	ldw	fp,0(sp)
  80d498:	dec00104 	addi	sp,sp,4
  80d49c:	f800283a 	ret

0080d4a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80d4a0:	defff804 	addi	sp,sp,-32
  80d4a4:	df000715 	stw	fp,28(sp)
  80d4a8:	df000704 	addi	fp,sp,28
  80d4ac:	e13ffb15 	stw	r4,-20(fp)
  80d4b0:	e17ffc15 	stw	r5,-16(fp)
  80d4b4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80d4b8:	00bff9c4 	movi	r2,-25
  80d4bc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80d4c0:	e0bffc17 	ldw	r2,-16(fp)
  80d4c4:	e0bfff15 	stw	r2,-4(fp)
  80d4c8:	e0ffff17 	ldw	r3,-4(fp)
  80d4cc:	189a8060 	cmpeqi	r2,r3,27137
  80d4d0:	1000041e 	bne	r2,zero,80d4e4 <altera_avalon_jtag_uart_ioctl+0x44>
  80d4d4:	e0ffff17 	ldw	r3,-4(fp)
  80d4d8:	189a80a0 	cmpeqi	r2,r3,27138
  80d4dc:	10001b1e 	bne	r2,zero,80d54c <altera_avalon_jtag_uart_ioctl+0xac>
  80d4e0:	00002706 	br	80d580 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80d4e4:	e0bffb17 	ldw	r2,-20(fp)
  80d4e8:	10c00117 	ldw	r3,4(r2)
  80d4ec:	00a00034 	movhi	r2,32768
  80d4f0:	10bfffc4 	addi	r2,r2,-1
  80d4f4:	18802226 	beq	r3,r2,80d580 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80d4f8:	e0bffd17 	ldw	r2,-12(fp)
  80d4fc:	10800017 	ldw	r2,0(r2)
  80d500:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80d504:	e0bff917 	ldw	r2,-28(fp)
  80d508:	10800090 	cmplti	r2,r2,2
  80d50c:	1000071e 	bne	r2,zero,80d52c <altera_avalon_jtag_uart_ioctl+0x8c>
  80d510:	e0fff917 	ldw	r3,-28(fp)
  80d514:	00a00034 	movhi	r2,32768
  80d518:	10bfffc4 	addi	r2,r2,-1
  80d51c:	18800326 	beq	r3,r2,80d52c <altera_avalon_jtag_uart_ioctl+0x8c>
  80d520:	e0bff917 	ldw	r2,-28(fp)
  80d524:	e0bffe15 	stw	r2,-8(fp)
  80d528:	00000306 	br	80d538 <altera_avalon_jtag_uart_ioctl+0x98>
  80d52c:	00e00034 	movhi	r3,32768
  80d530:	18ffff84 	addi	r3,r3,-2
  80d534:	e0fffe15 	stw	r3,-8(fp)
  80d538:	e0bffb17 	ldw	r2,-20(fp)
  80d53c:	e0fffe17 	ldw	r3,-8(fp)
  80d540:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80d544:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80d548:	00000d06 	br	80d580 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80d54c:	e0bffb17 	ldw	r2,-20(fp)
  80d550:	10c00117 	ldw	r3,4(r2)
  80d554:	00a00034 	movhi	r2,32768
  80d558:	10bfffc4 	addi	r2,r2,-1
  80d55c:	18800826 	beq	r3,r2,80d580 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80d560:	e13ffd17 	ldw	r4,-12(fp)
  80d564:	e0bffb17 	ldw	r2,-20(fp)
  80d568:	10c00917 	ldw	r3,36(r2)
  80d56c:	e0bffb17 	ldw	r2,-20(fp)
  80d570:	10800117 	ldw	r2,4(r2)
  80d574:	1885803a 	cmpltu	r2,r3,r2
  80d578:	20800015 	stw	r2,0(r4)
      rc = 0;
  80d57c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80d580:	e0bffa17 	ldw	r2,-24(fp)
}
  80d584:	e037883a 	mov	sp,fp
  80d588:	df000017 	ldw	fp,0(sp)
  80d58c:	dec00104 	addi	sp,sp,4
  80d590:	f800283a 	ret

0080d594 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80d594:	defff204 	addi	sp,sp,-56
  80d598:	dfc00d15 	stw	ra,52(sp)
  80d59c:	df000c15 	stw	fp,48(sp)
  80d5a0:	df000c04 	addi	fp,sp,48
  80d5a4:	e13ffb15 	stw	r4,-20(fp)
  80d5a8:	e17ffc15 	stw	r5,-16(fp)
  80d5ac:	e1bffd15 	stw	r6,-12(fp)
  80d5b0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80d5b4:	e0bffc17 	ldw	r2,-16(fp)
  80d5b8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d5bc:	00004806 	br	80d6e0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80d5c0:	e0bffb17 	ldw	r2,-20(fp)
  80d5c4:	10800a17 	ldw	r2,40(r2)
  80d5c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80d5cc:	e0bffb17 	ldw	r2,-20(fp)
  80d5d0:	10800b17 	ldw	r2,44(r2)
  80d5d4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80d5d8:	e0fff717 	ldw	r3,-36(fp)
  80d5dc:	e0bff617 	ldw	r2,-40(fp)
  80d5e0:	18800536 	bltu	r3,r2,80d5f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80d5e4:	e0bff717 	ldw	r2,-36(fp)
  80d5e8:	e0fff617 	ldw	r3,-40(fp)
  80d5ec:	10c5c83a 	sub	r2,r2,r3
  80d5f0:	e0bff815 	stw	r2,-32(fp)
  80d5f4:	00000406 	br	80d608 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80d5f8:	00820004 	movi	r2,2048
  80d5fc:	e0fff617 	ldw	r3,-40(fp)
  80d600:	10c5c83a 	sub	r2,r2,r3
  80d604:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80d608:	e0bff817 	ldw	r2,-32(fp)
  80d60c:	1005003a 	cmpeq	r2,r2,zero
  80d610:	10001f1e 	bne	r2,zero,80d690 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80d614:	e0fffd17 	ldw	r3,-12(fp)
  80d618:	e0bff817 	ldw	r2,-32(fp)
  80d61c:	1880022e 	bgeu	r3,r2,80d628 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80d620:	e0bffd17 	ldw	r2,-12(fp)
  80d624:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80d628:	e0bffb17 	ldw	r2,-20(fp)
  80d62c:	10c00e04 	addi	r3,r2,56
  80d630:	e0bff617 	ldw	r2,-40(fp)
  80d634:	1887883a 	add	r3,r3,r2
  80d638:	e0bffa17 	ldw	r2,-24(fp)
  80d63c:	1009883a 	mov	r4,r2
  80d640:	180b883a 	mov	r5,r3
  80d644:	e1bff817 	ldw	r6,-32(fp)
  80d648:	0802de40 	call	802de4 <memcpy>
      ptr   += n;
  80d64c:	e0fff817 	ldw	r3,-32(fp)
  80d650:	e0bffa17 	ldw	r2,-24(fp)
  80d654:	10c5883a 	add	r2,r2,r3
  80d658:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80d65c:	e0fffd17 	ldw	r3,-12(fp)
  80d660:	e0bff817 	ldw	r2,-32(fp)
  80d664:	1885c83a 	sub	r2,r3,r2
  80d668:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d66c:	e0fff617 	ldw	r3,-40(fp)
  80d670:	e0bff817 	ldw	r2,-32(fp)
  80d674:	1885883a 	add	r2,r3,r2
  80d678:	10c1ffcc 	andi	r3,r2,2047
  80d67c:	e0bffb17 	ldw	r2,-20(fp)
  80d680:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80d684:	e0bffd17 	ldw	r2,-12(fp)
  80d688:	10800048 	cmpgei	r2,r2,1
  80d68c:	103fcc1e 	bne	r2,zero,80d5c0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80d690:	e0fffa17 	ldw	r3,-24(fp)
  80d694:	e0bffc17 	ldw	r2,-16(fp)
  80d698:	1880141e 	bne	r3,r2,80d6ec <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80d69c:	e0bffe17 	ldw	r2,-8(fp)
  80d6a0:	1090000c 	andi	r2,r2,16384
  80d6a4:	1004c03a 	cmpne	r2,r2,zero
  80d6a8:	1000101e 	bne	r2,zero,80d6ec <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80d6ac:	e0bffb17 	ldw	r2,-20(fp)
  80d6b0:	10c00a17 	ldw	r3,40(r2)
  80d6b4:	e0bff717 	ldw	r2,-36(fp)
  80d6b8:	1880051e 	bne	r3,r2,80d6d0 <altera_avalon_jtag_uart_read+0x13c>
  80d6bc:	e0bffb17 	ldw	r2,-20(fp)
  80d6c0:	10c00917 	ldw	r3,36(r2)
  80d6c4:	e0bffb17 	ldw	r2,-20(fp)
  80d6c8:	10800117 	ldw	r2,4(r2)
  80d6cc:	18bff736 	bltu	r3,r2,80d6ac <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80d6d0:	e0bffb17 	ldw	r2,-20(fp)
  80d6d4:	10c00a17 	ldw	r3,40(r2)
  80d6d8:	e0bff717 	ldw	r2,-36(fp)
  80d6dc:	18800326 	beq	r3,r2,80d6ec <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d6e0:	e0bffd17 	ldw	r2,-12(fp)
  80d6e4:	10800048 	cmpgei	r2,r2,1
  80d6e8:	103fb51e 	bne	r2,zero,80d5c0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80d6ec:	e0fffa17 	ldw	r3,-24(fp)
  80d6f0:	e0bffc17 	ldw	r2,-16(fp)
  80d6f4:	18801926 	beq	r3,r2,80d75c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d6f8:	0005303a 	rdctl	r2,status
  80d6fc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d700:	e0fff517 	ldw	r3,-44(fp)
  80d704:	00bfff84 	movi	r2,-2
  80d708:	1884703a 	and	r2,r3,r2
  80d70c:	1001703a 	wrctl	status,r2
  
  return context;
  80d710:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80d714:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d718:	e0bffb17 	ldw	r2,-20(fp)
  80d71c:	10800817 	ldw	r2,32(r2)
  80d720:	10c00054 	ori	r3,r2,1
  80d724:	e0bffb17 	ldw	r2,-20(fp)
  80d728:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d72c:	e0bffb17 	ldw	r2,-20(fp)
  80d730:	10800017 	ldw	r2,0(r2)
  80d734:	11000104 	addi	r4,r2,4
  80d738:	e0bffb17 	ldw	r2,-20(fp)
  80d73c:	10800817 	ldw	r2,32(r2)
  80d740:	1007883a 	mov	r3,r2
  80d744:	2005883a 	mov	r2,r4
  80d748:	10c00035 	stwio	r3,0(r2)
  80d74c:	e0bff917 	ldw	r2,-28(fp)
  80d750:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d754:	e0bff417 	ldw	r2,-48(fp)
  80d758:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80d75c:	e0fffa17 	ldw	r3,-24(fp)
  80d760:	e0bffc17 	ldw	r2,-16(fp)
  80d764:	18800526 	beq	r3,r2,80d77c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80d768:	e0fffa17 	ldw	r3,-24(fp)
  80d76c:	e0bffc17 	ldw	r2,-16(fp)
  80d770:	1887c83a 	sub	r3,r3,r2
  80d774:	e0ffff15 	stw	r3,-4(fp)
  80d778:	00000906 	br	80d7a0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80d77c:	e0bffe17 	ldw	r2,-8(fp)
  80d780:	1090000c 	andi	r2,r2,16384
  80d784:	1005003a 	cmpeq	r2,r2,zero
  80d788:	1000031e 	bne	r2,zero,80d798 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80d78c:	00bffd44 	movi	r2,-11
  80d790:	e0bfff15 	stw	r2,-4(fp)
  80d794:	00000206 	br	80d7a0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80d798:	00bffec4 	movi	r2,-5
  80d79c:	e0bfff15 	stw	r2,-4(fp)
  80d7a0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d7a4:	e037883a 	mov	sp,fp
  80d7a8:	dfc00117 	ldw	ra,4(sp)
  80d7ac:	df000017 	ldw	fp,0(sp)
  80d7b0:	dec00204 	addi	sp,sp,8
  80d7b4:	f800283a 	ret

0080d7b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d7b8:	defff204 	addi	sp,sp,-56
  80d7bc:	dfc00d15 	stw	ra,52(sp)
  80d7c0:	df000c15 	stw	fp,48(sp)
  80d7c4:	df000c04 	addi	fp,sp,48
  80d7c8:	e13ffb15 	stw	r4,-20(fp)
  80d7cc:	e17ffc15 	stw	r5,-16(fp)
  80d7d0:	e1bffd15 	stw	r6,-12(fp)
  80d7d4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80d7d8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80d7dc:	e0bffc17 	ldw	r2,-16(fp)
  80d7e0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d7e4:	00003a06 	br	80d8d0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80d7e8:	e0bffb17 	ldw	r2,-20(fp)
  80d7ec:	10800c17 	ldw	r2,48(r2)
  80d7f0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80d7f4:	e0bffb17 	ldw	r2,-20(fp)
  80d7f8:	10800d17 	ldw	r2,52(r2)
  80d7fc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80d800:	e0fffa17 	ldw	r3,-24(fp)
  80d804:	e0bff917 	ldw	r2,-28(fp)
  80d808:	1880062e 	bgeu	r3,r2,80d824 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80d80c:	e0fff917 	ldw	r3,-28(fp)
  80d810:	e0bffa17 	ldw	r2,-24(fp)
  80d814:	1885c83a 	sub	r2,r3,r2
  80d818:	10bfffc4 	addi	r2,r2,-1
  80d81c:	e0bff815 	stw	r2,-32(fp)
  80d820:	00000c06 	br	80d854 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80d824:	e0bff917 	ldw	r2,-28(fp)
  80d828:	1005003a 	cmpeq	r2,r2,zero
  80d82c:	1000051e 	bne	r2,zero,80d844 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80d830:	00820004 	movi	r2,2048
  80d834:	e0fffa17 	ldw	r3,-24(fp)
  80d838:	10c5c83a 	sub	r2,r2,r3
  80d83c:	e0bff815 	stw	r2,-32(fp)
  80d840:	00000406 	br	80d854 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80d844:	0081ffc4 	movi	r2,2047
  80d848:	e0fffa17 	ldw	r3,-24(fp)
  80d84c:	10c5c83a 	sub	r2,r2,r3
  80d850:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80d854:	e0bff817 	ldw	r2,-32(fp)
  80d858:	1005003a 	cmpeq	r2,r2,zero
  80d85c:	10001f1e 	bne	r2,zero,80d8dc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80d860:	e0fffd17 	ldw	r3,-12(fp)
  80d864:	e0bff817 	ldw	r2,-32(fp)
  80d868:	1880022e 	bgeu	r3,r2,80d874 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80d86c:	e0bffd17 	ldw	r2,-12(fp)
  80d870:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80d874:	e0bffb17 	ldw	r2,-20(fp)
  80d878:	10c20e04 	addi	r3,r2,2104
  80d87c:	e0bffa17 	ldw	r2,-24(fp)
  80d880:	1885883a 	add	r2,r3,r2
  80d884:	e0fffc17 	ldw	r3,-16(fp)
  80d888:	1009883a 	mov	r4,r2
  80d88c:	180b883a 	mov	r5,r3
  80d890:	e1bff817 	ldw	r6,-32(fp)
  80d894:	0802de40 	call	802de4 <memcpy>
      ptr   += n;
  80d898:	e0fff817 	ldw	r3,-32(fp)
  80d89c:	e0bffc17 	ldw	r2,-16(fp)
  80d8a0:	10c5883a 	add	r2,r2,r3
  80d8a4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80d8a8:	e0fffd17 	ldw	r3,-12(fp)
  80d8ac:	e0bff817 	ldw	r2,-32(fp)
  80d8b0:	1885c83a 	sub	r2,r3,r2
  80d8b4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d8b8:	e0fffa17 	ldw	r3,-24(fp)
  80d8bc:	e0bff817 	ldw	r2,-32(fp)
  80d8c0:	1885883a 	add	r2,r3,r2
  80d8c4:	10c1ffcc 	andi	r3,r2,2047
  80d8c8:	e0bffb17 	ldw	r2,-20(fp)
  80d8cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d8d0:	e0bffd17 	ldw	r2,-12(fp)
  80d8d4:	10800048 	cmpgei	r2,r2,1
  80d8d8:	103fc31e 	bne	r2,zero,80d7e8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d8dc:	0005303a 	rdctl	r2,status
  80d8e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d8e4:	e0fff517 	ldw	r3,-44(fp)
  80d8e8:	00bfff84 	movi	r2,-2
  80d8ec:	1884703a 	and	r2,r3,r2
  80d8f0:	1001703a 	wrctl	status,r2
  
  return context;
  80d8f4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80d8f8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d8fc:	e0bffb17 	ldw	r2,-20(fp)
  80d900:	10800817 	ldw	r2,32(r2)
  80d904:	10c00094 	ori	r3,r2,2
  80d908:	e0bffb17 	ldw	r2,-20(fp)
  80d90c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d910:	e0bffb17 	ldw	r2,-20(fp)
  80d914:	10800017 	ldw	r2,0(r2)
  80d918:	11000104 	addi	r4,r2,4
  80d91c:	e0bffb17 	ldw	r2,-20(fp)
  80d920:	10800817 	ldw	r2,32(r2)
  80d924:	1007883a 	mov	r3,r2
  80d928:	2005883a 	mov	r2,r4
  80d92c:	10c00035 	stwio	r3,0(r2)
  80d930:	e0bff717 	ldw	r2,-36(fp)
  80d934:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d938:	e0bff417 	ldw	r2,-48(fp)
  80d93c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80d940:	e0bffd17 	ldw	r2,-12(fp)
  80d944:	10800050 	cmplti	r2,r2,1
  80d948:	1000111e 	bne	r2,zero,80d990 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80d94c:	e0bffe17 	ldw	r2,-8(fp)
  80d950:	1090000c 	andi	r2,r2,16384
  80d954:	1004c03a 	cmpne	r2,r2,zero
  80d958:	1000101e 	bne	r2,zero,80d99c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80d95c:	e0bffb17 	ldw	r2,-20(fp)
  80d960:	10c00d17 	ldw	r3,52(r2)
  80d964:	e0bff917 	ldw	r2,-28(fp)
  80d968:	1880051e 	bne	r3,r2,80d980 <altera_avalon_jtag_uart_write+0x1c8>
  80d96c:	e0bffb17 	ldw	r2,-20(fp)
  80d970:	10c00917 	ldw	r3,36(r2)
  80d974:	e0bffb17 	ldw	r2,-20(fp)
  80d978:	10800117 	ldw	r2,4(r2)
  80d97c:	18bff736 	bltu	r3,r2,80d95c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80d980:	e0bffb17 	ldw	r2,-20(fp)
  80d984:	10c00d17 	ldw	r3,52(r2)
  80d988:	e0bff917 	ldw	r2,-28(fp)
  80d98c:	18800326 	beq	r3,r2,80d99c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80d990:	e0bffd17 	ldw	r2,-12(fp)
  80d994:	10800048 	cmpgei	r2,r2,1
  80d998:	103fcd1e 	bne	r2,zero,80d8d0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80d99c:	e0fffc17 	ldw	r3,-16(fp)
  80d9a0:	e0bff617 	ldw	r2,-40(fp)
  80d9a4:	18800526 	beq	r3,r2,80d9bc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80d9a8:	e0fffc17 	ldw	r3,-16(fp)
  80d9ac:	e0bff617 	ldw	r2,-40(fp)
  80d9b0:	1887c83a 	sub	r3,r3,r2
  80d9b4:	e0ffff15 	stw	r3,-4(fp)
  80d9b8:	00000906 	br	80d9e0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80d9bc:	e0bffe17 	ldw	r2,-8(fp)
  80d9c0:	1090000c 	andi	r2,r2,16384
  80d9c4:	1005003a 	cmpeq	r2,r2,zero
  80d9c8:	1000031e 	bne	r2,zero,80d9d8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80d9cc:	00bffd44 	movi	r2,-11
  80d9d0:	e0bfff15 	stw	r2,-4(fp)
  80d9d4:	00000206 	br	80d9e0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80d9d8:	00bffec4 	movi	r2,-5
  80d9dc:	e0bfff15 	stw	r2,-4(fp)
  80d9e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d9e4:	e037883a 	mov	sp,fp
  80d9e8:	dfc00117 	ldw	ra,4(sp)
  80d9ec:	df000017 	ldw	fp,0(sp)
  80d9f0:	dec00204 	addi	sp,sp,8
  80d9f4:	f800283a 	ret

0080d9f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80d9f8:	defff904 	addi	sp,sp,-28
  80d9fc:	dfc00615 	stw	ra,24(sp)
  80da00:	df000515 	stw	fp,20(sp)
  80da04:	df000504 	addi	fp,sp,20
  80da08:	e13ffe15 	stw	r4,-8(fp)
  80da0c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80da10:	e0bffe17 	ldw	r2,-8(fp)
  80da14:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80da18:	e0bffe17 	ldw	r2,-8(fp)
  80da1c:	10800104 	addi	r2,r2,4
  80da20:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da24:	0005303a 	rdctl	r2,status
  80da28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80da2c:	e0fffc17 	ldw	r3,-16(fp)
  80da30:	00bfff84 	movi	r2,-2
  80da34:	1884703a 	and	r2,r3,r2
  80da38:	1001703a 	wrctl	status,r2
  
  return context;
  80da3c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80da40:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  80da44:	080c8c00 	call	80c8c0 <alt_tick>
  80da48:	e0bffd17 	ldw	r2,-12(fp)
  80da4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80da50:	e0bffb17 	ldw	r2,-20(fp)
  80da54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80da58:	e037883a 	mov	sp,fp
  80da5c:	dfc00117 	ldw	ra,4(sp)
  80da60:	df000017 	ldw	fp,0(sp)
  80da64:	dec00204 	addi	sp,sp,8
  80da68:	f800283a 	ret

0080da6c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80da6c:	defff904 	addi	sp,sp,-28
  80da70:	dfc00615 	stw	ra,24(sp)
  80da74:	df000515 	stw	fp,20(sp)
  80da78:	df000504 	addi	fp,sp,20
  80da7c:	e13ffc15 	stw	r4,-16(fp)
  80da80:	e17ffd15 	stw	r5,-12(fp)
  80da84:	e1bffe15 	stw	r6,-8(fp)
  80da88:	e1ffff15 	stw	r7,-4(fp)
  80da8c:	e0bfff17 	ldw	r2,-4(fp)
  80da90:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80da94:	00802074 	movhi	r2,129
  80da98:	108f2c04 	addi	r2,r2,15536
  80da9c:	10800017 	ldw	r2,0(r2)
  80daa0:	1004c03a 	cmpne	r2,r2,zero
  80daa4:	1000041e 	bne	r2,zero,80dab8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80daa8:	00c02074 	movhi	r3,129
  80daac:	18cf2c04 	addi	r3,r3,15536
  80dab0:	e0bffb17 	ldw	r2,-20(fp)
  80dab4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80dab8:	e0bffc17 	ldw	r2,-16(fp)
  80dabc:	10800104 	addi	r2,r2,4
  80dac0:	1007883a 	mov	r3,r2
  80dac4:	008001c4 	movi	r2,7
  80dac8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  80dacc:	e13ffe17 	ldw	r4,-8(fp)
  80dad0:	e17ffc17 	ldw	r5,-16(fp)
  80dad4:	01802074 	movhi	r6,129
  80dad8:	31b67e04 	addi	r6,r6,-9736
  80dadc:	080f1e00 	call	80f1e0 <alt_irq_register>
#endif  
}
  80dae0:	e037883a 	mov	sp,fp
  80dae4:	dfc00117 	ldw	ra,4(sp)
  80dae8:	df000017 	ldw	fp,0(sp)
  80daec:	dec00204 	addi	sp,sp,8
  80daf0:	f800283a 	ret

0080daf4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  80daf4:	defffc04 	addi	sp,sp,-16
  80daf8:	df000315 	stw	fp,12(sp)
  80dafc:	df000304 	addi	fp,sp,12
  80db00:	e13ffe15 	stw	r4,-8(fp)
  80db04:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  80db08:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  80db0c:	e0bfff17 	ldw	r2,-4(fp)
  80db10:	1004c03a 	cmpne	r2,r2,zero
  80db14:	1000061e 	bne	r2,zero,80db30 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  80db18:	e0bffe17 	ldw	r2,-8(fp)
  80db1c:	1007883a 	mov	r3,r2
  80db20:	e0bffd03 	ldbu	r2,-12(fp)
  80db24:	10c4b03a 	or	r2,r2,r3
  80db28:	e0bffd05 	stb	r2,-12(fp)
  80db2c:	00000806 	br	80db50 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  80db30:	e0bffe17 	ldw	r2,-8(fp)
  80db34:	1007883a 	mov	r3,r2
  80db38:	e0bffd03 	ldbu	r2,-12(fp)
  80db3c:	10c4b03a 	or	r2,r2,r3
  80db40:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  80db44:	e0bffd03 	ldbu	r2,-12(fp)
  80db48:	10801014 	ori	r2,r2,64
  80db4c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  80db50:	e0fffd03 	ldbu	r3,-12(fp)
  80db54:	00bfe004 	movi	r2,-128
  80db58:	1884b03a 	or	r2,r3,r2
  80db5c:	10803fcc 	andi	r2,r2,255
}
  80db60:	e037883a 	mov	sp,fp
  80db64:	df000017 	ldw	fp,0(sp)
  80db68:	dec00104 	addi	sp,sp,4
  80db6c:	f800283a 	ret

0080db70 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  80db70:	defffd04 	addi	sp,sp,-12
  80db74:	df000215 	stw	fp,8(sp)
  80db78:	df000204 	addi	fp,sp,8
  80db7c:	e13ffe15 	stw	r4,-8(fp)
  80db80:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  80db84:	e0bffe17 	ldw	r2,-8(fp)
  80db88:	10800a17 	ldw	r2,40(r2)
  80db8c:	e0ffff03 	ldbu	r3,-4(fp)
  80db90:	10c00025 	stbio	r3,0(r2)
}
  80db94:	e037883a 	mov	sp,fp
  80db98:	df000017 	ldw	fp,0(sp)
  80db9c:	dec00104 	addi	sp,sp,4
  80dba0:	f800283a 	ret

0080dba4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  80dba4:	defffe04 	addi	sp,sp,-8
  80dba8:	df000115 	stw	fp,4(sp)
  80dbac:	df000104 	addi	fp,sp,4
  80dbb0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  80dbb4:	e0bfff17 	ldw	r2,-4(fp)
  80dbb8:	10800a17 	ldw	r2,40(r2)
  80dbbc:	1007883a 	mov	r3,r2
  80dbc0:	00800044 	movi	r2,1
  80dbc4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  80dbc8:	e037883a 	mov	sp,fp
  80dbcc:	df000017 	ldw	fp,0(sp)
  80dbd0:	dec00104 	addi	sp,sp,4
  80dbd4:	f800283a 	ret

0080dbd8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  80dbd8:	defffc04 	addi	sp,sp,-16
  80dbdc:	dfc00315 	stw	ra,12(sp)
  80dbe0:	df000215 	stw	fp,8(sp)
  80dbe4:	df000204 	addi	fp,sp,8
  80dbe8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  80dbec:	e13fff17 	ldw	r4,-4(fp)
  80dbf0:	01402074 	movhi	r5,129
  80dbf4:	29481204 	addi	r5,r5,8264
  80dbf8:	080efe00 	call	80efe0 <alt_find_dev>
  80dbfc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80dc00:	e0bffe17 	ldw	r2,-8(fp)
}
  80dc04:	e037883a 	mov	sp,fp
  80dc08:	dfc00117 	ldw	ra,4(sp)
  80dc0c:	df000017 	ldw	fp,0(sp)
  80dc10:	dec00204 	addi	sp,sp,8
  80dc14:	f800283a 	ret

0080dc18 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  80dc18:	defffb04 	addi	sp,sp,-20
  80dc1c:	df000415 	stw	fp,16(sp)
  80dc20:	df000404 	addi	fp,sp,16
  80dc24:	e13ffd15 	stw	r4,-12(fp)
  80dc28:	e17ffe15 	stw	r5,-8(fp)
  80dc2c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  80dc30:	e03ffc15 	stw	zero,-16(fp)
  80dc34:	00000f06 	br	80dc74 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  80dc38:	e0bffd17 	ldw	r2,-12(fp)
  80dc3c:	10800a17 	ldw	r2,40(r2)
  80dc40:	11000044 	addi	r4,r2,1
  80dc44:	e0fffc17 	ldw	r3,-16(fp)
  80dc48:	e0bffe17 	ldw	r2,-8(fp)
  80dc4c:	1885883a 	add	r2,r3,r2
  80dc50:	10800003 	ldbu	r2,0(r2)
  80dc54:	10c03fcc 	andi	r3,r2,255
  80dc58:	18c0201c 	xori	r3,r3,128
  80dc5c:	18ffe004 	addi	r3,r3,-128
  80dc60:	2005883a 	mov	r2,r4
  80dc64:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  80dc68:	e0bffc17 	ldw	r2,-16(fp)
  80dc6c:	10800044 	addi	r2,r2,1
  80dc70:	e0bffc15 	stw	r2,-16(fp)
  80dc74:	e0fffc17 	ldw	r3,-16(fp)
  80dc78:	e0bfff17 	ldw	r2,-4(fp)
  80dc7c:	18bfee36 	bltu	r3,r2,80dc38 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  80dc80:	e037883a 	mov	sp,fp
  80dc84:	df000017 	ldw	fp,0(sp)
  80dc88:	dec00104 	addi	sp,sp,4
  80dc8c:	f800283a 	ret

0080dc90 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  80dc90:	defffd04 	addi	sp,sp,-12
  80dc94:	df000215 	stw	fp,8(sp)
  80dc98:	df000204 	addi	fp,sp,8
  80dc9c:	e13ffe15 	stw	r4,-8(fp)
  80dca0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  80dca4:	00000d06 	br	80dcdc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  80dca8:	e0bffe17 	ldw	r2,-8(fp)
  80dcac:	10800a17 	ldw	r2,40(r2)
  80dcb0:	11000044 	addi	r4,r2,1
  80dcb4:	e0bfff17 	ldw	r2,-4(fp)
  80dcb8:	10800003 	ldbu	r2,0(r2)
  80dcbc:	10c03fcc 	andi	r3,r2,255
  80dcc0:	18c0201c 	xori	r3,r3,128
  80dcc4:	18ffe004 	addi	r3,r3,-128
  80dcc8:	2005883a 	mov	r2,r4
  80dccc:	10c00025 	stbio	r3,0(r2)
		++ptr;
  80dcd0:	e0bfff17 	ldw	r2,-4(fp)
  80dcd4:	10800044 	addi	r2,r2,1
  80dcd8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  80dcdc:	e0bfff17 	ldw	r2,-4(fp)
  80dce0:	10800003 	ldbu	r2,0(r2)
  80dce4:	10803fcc 	andi	r2,r2,255
  80dce8:	1080201c 	xori	r2,r2,128
  80dcec:	10bfe004 	addi	r2,r2,-128
  80dcf0:	1004c03a 	cmpne	r2,r2,zero
  80dcf4:	103fec1e 	bne	r2,zero,80dca8 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  80dcf8:	e037883a 	mov	sp,fp
  80dcfc:	df000017 	ldw	fp,0(sp)
  80dd00:	dec00104 	addi	sp,sp,4
  80dd04:	f800283a 	ret

0080dd08 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  80dd08:	defffb04 	addi	sp,sp,-20
  80dd0c:	dfc00415 	stw	ra,16(sp)
  80dd10:	df000315 	stw	fp,12(sp)
  80dd14:	df000304 	addi	fp,sp,12
  80dd18:	e13ffd15 	stw	r4,-12(fp)
  80dd1c:	e17ffe15 	stw	r5,-8(fp)
  80dd20:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  80dd24:	e0bffd17 	ldw	r2,-12(fp)
  80dd28:	10800017 	ldw	r2,0(r2)
  80dd2c:	1009883a 	mov	r4,r2
  80dd30:	e1bfff17 	ldw	r6,-4(fp)
  80dd34:	e17ffe17 	ldw	r5,-8(fp)
  80dd38:	080dc180 	call	80dc18 <alt_up_character_lcd_write>
	return 0;
  80dd3c:	0005883a 	mov	r2,zero
}
  80dd40:	e037883a 	mov	sp,fp
  80dd44:	dfc00117 	ldw	ra,4(sp)
  80dd48:	df000017 	ldw	fp,0(sp)
  80dd4c:	dec00204 	addi	sp,sp,8
  80dd50:	f800283a 	ret

0080dd54 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  80dd54:	defff904 	addi	sp,sp,-28
  80dd58:	dfc00615 	stw	ra,24(sp)
  80dd5c:	df000515 	stw	fp,20(sp)
  80dd60:	df000504 	addi	fp,sp,20
  80dd64:	e13ffc15 	stw	r4,-16(fp)
  80dd68:	e17ffd15 	stw	r5,-12(fp)
  80dd6c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  80dd70:	e0bffd17 	ldw	r2,-12(fp)
  80dd74:	10800a28 	cmpgeui	r2,r2,40
  80dd78:	1000031e 	bne	r2,zero,80dd88 <alt_up_character_lcd_set_cursor_pos+0x34>
  80dd7c:	e0bffe17 	ldw	r2,-8(fp)
  80dd80:	108000b0 	cmpltui	r2,r2,2
  80dd84:	1000031e 	bne	r2,zero,80dd94 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  80dd88:	00bfffc4 	movi	r2,-1
  80dd8c:	e0bfff15 	stw	r2,-4(fp)
  80dd90:	00000806 	br	80ddb4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80dd94:	e13ffd17 	ldw	r4,-12(fp)
  80dd98:	e17ffe17 	ldw	r5,-8(fp)
  80dd9c:	080daf40 	call	80daf4 <get_DDRAM_addr>
  80dda0:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  80dda4:	e17ffb03 	ldbu	r5,-20(fp)
  80dda8:	e13ffc17 	ldw	r4,-16(fp)
  80ddac:	080db700 	call	80db70 <alt_up_character_lcd_send_cmd>
	return 0;
  80ddb0:	e03fff15 	stw	zero,-4(fp)
  80ddb4:	e0bfff17 	ldw	r2,-4(fp)
}
  80ddb8:	e037883a 	mov	sp,fp
  80ddbc:	dfc00117 	ldw	ra,4(sp)
  80ddc0:	df000017 	ldw	fp,0(sp)
  80ddc4:	dec00204 	addi	sp,sp,8
  80ddc8:	f800283a 	ret

0080ddcc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80ddcc:	defff904 	addi	sp,sp,-28
  80ddd0:	dfc00615 	stw	ra,24(sp)
  80ddd4:	df000515 	stw	fp,20(sp)
  80ddd8:	df000504 	addi	fp,sp,20
  80dddc:	e13ffc15 	stw	r4,-16(fp)
  80dde0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80dde4:	e0bffd17 	ldw	r2,-12(fp)
  80dde8:	1005003a 	cmpeq	r2,r2,zero
  80ddec:	10001e1e 	bne	r2,zero,80de68 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  80ddf0:	e0bffd17 	ldw	r2,-12(fp)
  80ddf4:	10800050 	cmplti	r2,r2,1
  80ddf8:	1000031e 	bne	r2,zero,80de08 <alt_up_character_lcd_shift_cursor+0x3c>
  80ddfc:	00800504 	movi	r2,20
  80de00:	e0bfff05 	stb	r2,-4(fp)
  80de04:	00000206 	br	80de10 <alt_up_character_lcd_shift_cursor+0x44>
  80de08:	00c00404 	movi	r3,16
  80de0c:	e0ffff05 	stb	r3,-4(fp)
  80de10:	e0bfff03 	ldbu	r2,-4(fp)
  80de14:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80de18:	e0fffd17 	ldw	r3,-12(fp)
  80de1c:	e0fffe15 	stw	r3,-8(fp)
  80de20:	e0fffe17 	ldw	r3,-8(fp)
  80de24:	1804403a 	cmpge	r2,r3,zero
  80de28:	1000031e 	bne	r2,zero,80de38 <alt_up_character_lcd_shift_cursor+0x6c>
  80de2c:	e0bffe17 	ldw	r2,-8(fp)
  80de30:	0085c83a 	sub	r2,zero,r2
  80de34:	e0bffe15 	stw	r2,-8(fp)
  80de38:	e0fffe17 	ldw	r3,-8(fp)
  80de3c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80de40:	00000306 	br	80de50 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80de44:	e17ffb43 	ldbu	r5,-19(fp)
  80de48:	e13ffc17 	ldw	r4,-16(fp)
  80de4c:	080db700 	call	80db70 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80de50:	e0bffb03 	ldbu	r2,-20(fp)
  80de54:	10bfffc4 	addi	r2,r2,-1
  80de58:	e0bffb05 	stb	r2,-20(fp)
  80de5c:	e0bffb03 	ldbu	r2,-20(fp)
  80de60:	10803fd8 	cmpnei	r2,r2,255
  80de64:	103ff71e 	bne	r2,zero,80de44 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80de68:	e037883a 	mov	sp,fp
  80de6c:	dfc00117 	ldw	ra,4(sp)
  80de70:	df000017 	ldw	fp,0(sp)
  80de74:	dec00204 	addi	sp,sp,8
  80de78:	f800283a 	ret

0080de7c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80de7c:	defff904 	addi	sp,sp,-28
  80de80:	dfc00615 	stw	ra,24(sp)
  80de84:	df000515 	stw	fp,20(sp)
  80de88:	df000504 	addi	fp,sp,20
  80de8c:	e13ffc15 	stw	r4,-16(fp)
  80de90:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80de94:	e0bffd17 	ldw	r2,-12(fp)
  80de98:	1005003a 	cmpeq	r2,r2,zero
  80de9c:	10001e1e 	bne	r2,zero,80df18 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  80dea0:	e0bffd17 	ldw	r2,-12(fp)
  80dea4:	10800050 	cmplti	r2,r2,1
  80dea8:	1000031e 	bne	r2,zero,80deb8 <alt_up_character_lcd_shift_display+0x3c>
  80deac:	00800704 	movi	r2,28
  80deb0:	e0bfff05 	stb	r2,-4(fp)
  80deb4:	00000206 	br	80dec0 <alt_up_character_lcd_shift_display+0x44>
  80deb8:	00c00604 	movi	r3,24
  80debc:	e0ffff05 	stb	r3,-4(fp)
  80dec0:	e0bfff03 	ldbu	r2,-4(fp)
  80dec4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80dec8:	e0fffd17 	ldw	r3,-12(fp)
  80decc:	e0fffe15 	stw	r3,-8(fp)
  80ded0:	e0fffe17 	ldw	r3,-8(fp)
  80ded4:	1804403a 	cmpge	r2,r3,zero
  80ded8:	1000031e 	bne	r2,zero,80dee8 <alt_up_character_lcd_shift_display+0x6c>
  80dedc:	e0bffe17 	ldw	r2,-8(fp)
  80dee0:	0085c83a 	sub	r2,zero,r2
  80dee4:	e0bffe15 	stw	r2,-8(fp)
  80dee8:	e0fffe17 	ldw	r3,-8(fp)
  80deec:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80def0:	00000306 	br	80df00 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80def4:	e17ffb43 	ldbu	r5,-19(fp)
  80def8:	e13ffc17 	ldw	r4,-16(fp)
  80defc:	080db700 	call	80db70 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80df00:	e0bffb03 	ldbu	r2,-20(fp)
  80df04:	10bfffc4 	addi	r2,r2,-1
  80df08:	e0bffb05 	stb	r2,-20(fp)
  80df0c:	e0bffb03 	ldbu	r2,-20(fp)
  80df10:	10803fd8 	cmpnei	r2,r2,255
  80df14:	103ff71e 	bne	r2,zero,80def4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80df18:	e037883a 	mov	sp,fp
  80df1c:	dfc00117 	ldw	ra,4(sp)
  80df20:	df000017 	ldw	fp,0(sp)
  80df24:	dec00204 	addi	sp,sp,8
  80df28:	f800283a 	ret

0080df2c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  80df2c:	defff904 	addi	sp,sp,-28
  80df30:	dfc00615 	stw	ra,24(sp)
  80df34:	df000515 	stw	fp,20(sp)
  80df38:	df000504 	addi	fp,sp,20
  80df3c:	e13ffc15 	stw	r4,-16(fp)
  80df40:	e17ffd15 	stw	r5,-12(fp)
  80df44:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  80df48:	e0bffd17 	ldw	r2,-12(fp)
  80df4c:	10800a28 	cmpgeui	r2,r2,40
  80df50:	1000031e 	bne	r2,zero,80df60 <alt_up_character_lcd_erase_pos+0x34>
  80df54:	e0bffe17 	ldw	r2,-8(fp)
  80df58:	108000b0 	cmpltui	r2,r2,2
  80df5c:	1000031e 	bne	r2,zero,80df6c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  80df60:	00bfffc4 	movi	r2,-1
  80df64:	e0bfff15 	stw	r2,-4(fp)
  80df68:	00000e06 	br	80dfa4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80df6c:	e13ffd17 	ldw	r4,-12(fp)
  80df70:	e17ffe17 	ldw	r5,-8(fp)
  80df74:	080daf40 	call	80daf4 <get_DDRAM_addr>
  80df78:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  80df7c:	e17ffb03 	ldbu	r5,-20(fp)
  80df80:	e13ffc17 	ldw	r4,-16(fp)
  80df84:	080db700 	call	80db70 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  80df88:	e0bffc17 	ldw	r2,-16(fp)
  80df8c:	10800a17 	ldw	r2,40(r2)
  80df90:	10800044 	addi	r2,r2,1
  80df94:	1007883a 	mov	r3,r2
  80df98:	00800084 	movi	r2,2
  80df9c:	18800025 	stbio	r2,0(r3)
	return 0;
  80dfa0:	e03fff15 	stw	zero,-4(fp)
  80dfa4:	e0bfff17 	ldw	r2,-4(fp)
}
  80dfa8:	e037883a 	mov	sp,fp
  80dfac:	dfc00117 	ldw	ra,4(sp)
  80dfb0:	df000017 	ldw	fp,0(sp)
  80dfb4:	dec00204 	addi	sp,sp,8
  80dfb8:	f800283a 	ret

0080dfbc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  80dfbc:	defffd04 	addi	sp,sp,-12
  80dfc0:	dfc00215 	stw	ra,8(sp)
  80dfc4:	df000115 	stw	fp,4(sp)
  80dfc8:	df000104 	addi	fp,sp,4
  80dfcc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  80dfd0:	e13fff17 	ldw	r4,-4(fp)
  80dfd4:	01400304 	movi	r5,12
  80dfd8:	080db700 	call	80db70 <alt_up_character_lcd_send_cmd>
}
  80dfdc:	e037883a 	mov	sp,fp
  80dfe0:	dfc00117 	ldw	ra,4(sp)
  80dfe4:	df000017 	ldw	fp,0(sp)
  80dfe8:	dec00204 	addi	sp,sp,8
  80dfec:	f800283a 	ret

0080dff0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  80dff0:	defffd04 	addi	sp,sp,-12
  80dff4:	dfc00215 	stw	ra,8(sp)
  80dff8:	df000115 	stw	fp,4(sp)
  80dffc:	df000104 	addi	fp,sp,4
  80e000:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  80e004:	e13fff17 	ldw	r4,-4(fp)
  80e008:	014003c4 	movi	r5,15
  80e00c:	080db700 	call	80db70 <alt_up_character_lcd_send_cmd>
}
  80e010:	e037883a 	mov	sp,fp
  80e014:	dfc00117 	ldw	ra,4(sp)
  80e018:	df000017 	ldw	fp,0(sp)
  80e01c:	dec00204 	addi	sp,sp,8
  80e020:	f800283a 	ret

0080e024 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
  80e024:	defffd04 	addi	sp,sp,-12
  80e028:	df000215 	stw	fp,8(sp)
  80e02c:	df000204 	addi	fp,sp,8
  80e030:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
  80e034:	e0bfff17 	ldw	r2,-4(fp)
  80e038:	1080400c 	andi	r2,r2,256
  80e03c:	1004d23a 	srli	r2,r2,8
  80e040:	e0bffe05 	stb	r2,-8(fp)
	return ri;
  80e044:	e0bffe03 	ldbu	r2,-8(fp)
}
  80e048:	e037883a 	mov	sp,fp
  80e04c:	df000017 	ldw	fp,0(sp)
  80e050:	dec00104 	addi	sp,sp,4
  80e054:	f800283a 	ret

0080e058 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
  80e058:	defffd04 	addi	sp,sp,-12
  80e05c:	df000215 	stw	fp,8(sp)
  80e060:	df000204 	addi	fp,sp,8
  80e064:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
  80e068:	e0bfff17 	ldw	r2,-4(fp)
  80e06c:	1080004c 	andi	r2,r2,1
  80e070:	e0bffe05 	stb	r2,-8(fp)
	return re;
  80e074:	e0bffe03 	ldbu	r2,-8(fp)
}
  80e078:	e037883a 	mov	sp,fp
  80e07c:	df000017 	ldw	fp,0(sp)
  80e080:	dec00104 	addi	sp,sp,4
  80e084:	f800283a 	ret

0080e088 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
  80e088:	defffd04 	addi	sp,sp,-12
  80e08c:	df000215 	stw	fp,8(sp)
  80e090:	df000204 	addi	fp,sp,8
  80e094:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
  80e098:	e0bfff17 	ldw	r2,-4(fp)
  80e09c:	1081000c 	andi	r2,r2,1024
  80e0a0:	1004d2ba 	srli	r2,r2,10
  80e0a4:	e0bffe05 	stb	r2,-8(fp)
	return re;
  80e0a8:	e0bffe03 	ldbu	r2,-8(fp)
}
  80e0ac:	e037883a 	mov	sp,fp
  80e0b0:	df000017 	ldw	fp,0(sp)
  80e0b4:	dec00104 	addi	sp,sp,4
  80e0b8:	f800283a 	ret

0080e0bc <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
  80e0bc:	defffd04 	addi	sp,sp,-12
  80e0c0:	df000215 	stw	fp,8(sp)
  80e0c4:	df000204 	addi	fp,sp,8
  80e0c8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
  80e0cc:	e0bfff17 	ldw	r2,-4(fp)
  80e0d0:	10bfffec 	andhi	r2,r2,65535
  80e0d4:	1004d43a 	srli	r2,r2,16
  80e0d8:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
  80e0dc:	e0bffe0b 	ldhu	r2,-8(fp)
}
  80e0e0:	e037883a 	mov	sp,fp
  80e0e4:	df000017 	ldw	fp,0(sp)
  80e0e8:	dec00104 	addi	sp,sp,4
  80e0ec:	f800283a 	ret

0080e0f0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
  80e0f0:	defffd04 	addi	sp,sp,-12
  80e0f4:	df000215 	stw	fp,8(sp)
  80e0f8:	df000204 	addi	fp,sp,8
  80e0fc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
  80e100:	e0bfff17 	ldw	r2,-4(fp)
  80e104:	10a0000c 	andi	r2,r2,32768
  80e108:	1004d3fa 	srli	r2,r2,15
  80e10c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
  80e110:	e0bffe03 	ldbu	r2,-8(fp)
}
  80e114:	e037883a 	mov	sp,fp
  80e118:	df000017 	ldw	fp,0(sp)
  80e11c:	dec00104 	addi	sp,sp,4
  80e120:	f800283a 	ret

0080e124 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
  80e124:	defffd04 	addi	sp,sp,-12
  80e128:	df000215 	stw	fp,8(sp)
  80e12c:	df000204 	addi	fp,sp,8
  80e130:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
  80e134:	e0bfff17 	ldw	r2,-4(fp)
  80e138:	e0bffe05 	stb	r2,-8(fp)
	return data;
  80e13c:	e0bffe03 	ldbu	r2,-8(fp)
}
  80e140:	e037883a 	mov	sp,fp
  80e144:	df000017 	ldw	fp,0(sp)
  80e148:	dec00104 	addi	sp,sp,4
  80e14c:	f800283a 	ret

0080e150 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
  80e150:	defffb04 	addi	sp,sp,-20
  80e154:	dfc00415 	stw	ra,16(sp)
  80e158:	df000315 	stw	fp,12(sp)
  80e15c:	df000304 	addi	fp,sp,12
  80e160:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
  80e164:	e13fff17 	ldw	r4,-4(fp)
  80e168:	01403fc4 	movi	r5,255
  80e16c:	080e3b00 	call	80e3b0 <alt_up_ps2_write_data_byte_with_ack>
  80e170:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
  80e174:	e0bffd17 	ldw	r2,-12(fp)
  80e178:	1004c03a 	cmpne	r2,r2,zero
  80e17c:	1000221e 	bne	r2,zero,80e208 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
  80e180:	e17ffe04 	addi	r5,fp,-8
  80e184:	e13fff17 	ldw	r4,-4(fp)
  80e188:	080e41c0 	call	80e41c <alt_up_ps2_read_data_byte_timeout>
  80e18c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
  80e190:	e0bffd17 	ldw	r2,-12(fp)
  80e194:	1004c03a 	cmpne	r2,r2,zero
  80e198:	10001b1e 	bne	r2,zero,80e208 <alt_up_ps2_init+0xb8>
  80e19c:	e0bffe03 	ldbu	r2,-8(fp)
  80e1a0:	10803fcc 	andi	r2,r2,255
  80e1a4:	10802a98 	cmpnei	r2,r2,170
  80e1a8:	1000171e 	bne	r2,zero,80e208 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
  80e1ac:	e17ffe04 	addi	r5,fp,-8
  80e1b0:	e13fff17 	ldw	r4,-4(fp)
  80e1b4:	080e41c0 	call	80e41c <alt_up_ps2_read_data_byte_timeout>
  80e1b8:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
  80e1bc:	e0bffd17 	ldw	r2,-12(fp)
  80e1c0:	10bfe318 	cmpnei	r2,r2,-116
  80e1c4:	1000041e 	bne	r2,zero,80e1d8 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
  80e1c8:	e0ffff17 	ldw	r3,-4(fp)
  80e1cc:	00800044 	movi	r2,1
  80e1d0:	18800d15 	stw	r2,52(r3)
  80e1d4:	00000c06 	br	80e208 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
  80e1d8:	e0bffd17 	ldw	r2,-12(fp)
  80e1dc:	1004c03a 	cmpne	r2,r2,zero
  80e1e0:	1000091e 	bne	r2,zero,80e208 <alt_up_ps2_init+0xb8>
  80e1e4:	e0bffe03 	ldbu	r2,-8(fp)
  80e1e8:	10803fcc 	andi	r2,r2,255
  80e1ec:	1004c03a 	cmpne	r2,r2,zero
  80e1f0:	1000051e 	bne	r2,zero,80e208 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
  80e1f4:	e0bfff17 	ldw	r2,-4(fp)
  80e1f8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
  80e1fc:	e13fff17 	ldw	r4,-4(fp)
  80e200:	01403d04 	movi	r5,244
  80e204:	080e2c80 	call	80e2c8 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
  80e208:	e037883a 	mov	sp,fp
  80e20c:	dfc00117 	ldw	ra,4(sp)
  80e210:	df000017 	ldw	fp,0(sp)
  80e214:	dec00204 	addi	sp,sp,8
  80e218:	f800283a 	ret

0080e21c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
  80e21c:	defffd04 	addi	sp,sp,-12
  80e220:	df000215 	stw	fp,8(sp)
  80e224:	df000204 	addi	fp,sp,8
  80e228:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  80e22c:	e0bfff17 	ldw	r2,-4(fp)
  80e230:	10800a17 	ldw	r2,40(r2)
  80e234:	10800104 	addi	r2,r2,4
  80e238:	10800037 	ldwio	r2,0(r2)
  80e23c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
  80e240:	e0bffe17 	ldw	r2,-8(fp)
  80e244:	10800054 	ori	r2,r2,1
  80e248:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  80e24c:	e0bfff17 	ldw	r2,-4(fp)
  80e250:	10800a17 	ldw	r2,40(r2)
  80e254:	10800104 	addi	r2,r2,4
  80e258:	e0fffe17 	ldw	r3,-8(fp)
  80e25c:	10c00035 	stwio	r3,0(r2)
}
  80e260:	e037883a 	mov	sp,fp
  80e264:	df000017 	ldw	fp,0(sp)
  80e268:	dec00104 	addi	sp,sp,4
  80e26c:	f800283a 	ret

0080e270 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
  80e270:	defffd04 	addi	sp,sp,-12
  80e274:	df000215 	stw	fp,8(sp)
  80e278:	df000204 	addi	fp,sp,8
  80e27c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  80e280:	e0bfff17 	ldw	r2,-4(fp)
  80e284:	10800a17 	ldw	r2,40(r2)
  80e288:	10800104 	addi	r2,r2,4
  80e28c:	10800037 	ldwio	r2,0(r2)
  80e290:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
  80e294:	e0fffe17 	ldw	r3,-8(fp)
  80e298:	00bfff84 	movi	r2,-2
  80e29c:	1884703a 	and	r2,r3,r2
  80e2a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  80e2a4:	e0bfff17 	ldw	r2,-4(fp)
  80e2a8:	10800a17 	ldw	r2,40(r2)
  80e2ac:	10800104 	addi	r2,r2,4
  80e2b0:	e0fffe17 	ldw	r3,-8(fp)
  80e2b4:	10c00035 	stwio	r3,0(r2)
}
  80e2b8:	e037883a 	mov	sp,fp
  80e2bc:	df000017 	ldw	fp,0(sp)
  80e2c0:	dec00104 	addi	sp,sp,4
  80e2c4:	f800283a 	ret

0080e2c8 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
  80e2c8:	defffa04 	addi	sp,sp,-24
  80e2cc:	dfc00515 	stw	ra,20(sp)
  80e2d0:	df000415 	stw	fp,16(sp)
  80e2d4:	df000404 	addi	fp,sp,16
  80e2d8:	e13ffd15 	stw	r4,-12(fp)
  80e2dc:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  80e2e0:	e0bffd17 	ldw	r2,-12(fp)
  80e2e4:	10800a17 	ldw	r2,40(r2)
  80e2e8:	e0fffe03 	ldbu	r3,-8(fp)
  80e2ec:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  80e2f0:	e0bffd17 	ldw	r2,-12(fp)
  80e2f4:	10800a17 	ldw	r2,40(r2)
  80e2f8:	10800104 	addi	r2,r2,4
  80e2fc:	10800037 	ldwio	r2,0(r2)
  80e300:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
  80e304:	e13ffc17 	ldw	r4,-16(fp)
  80e308:	080e0880 	call	80e088 <read_CE_bit>
  80e30c:	10803fcc 	andi	r2,r2,255
  80e310:	1005003a 	cmpeq	r2,r2,zero
  80e314:	1000031e 	bne	r2,zero,80e324 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
  80e318:	00bffec4 	movi	r2,-5
  80e31c:	e0bfff15 	stw	r2,-4(fp)
  80e320:	00000106 	br	80e328 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
  80e324:	e03fff15 	stw	zero,-4(fp)
  80e328:	e0bfff17 	ldw	r2,-4(fp)
}
  80e32c:	e037883a 	mov	sp,fp
  80e330:	dfc00117 	ldw	ra,4(sp)
  80e334:	df000017 	ldw	fp,0(sp)
  80e338:	dec00204 	addi	sp,sp,8
  80e33c:	f800283a 	ret

0080e340 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
  80e340:	defffb04 	addi	sp,sp,-20
  80e344:	dfc00415 	stw	ra,16(sp)
  80e348:	df000315 	stw	fp,12(sp)
  80e34c:	df000304 	addi	fp,sp,12
  80e350:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
  80e354:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
  80e358:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
  80e35c:	e17ffd44 	addi	r5,fp,-11
  80e360:	e13ffe17 	ldw	r4,-8(fp)
  80e364:	080e41c0 	call	80e41c <alt_up_ps2_read_data_byte_timeout>
  80e368:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
  80e36c:	e0bffd03 	ldbu	r2,-12(fp)
  80e370:	1004c03a 	cmpne	r2,r2,zero
  80e374:	1000061e 	bne	r2,zero,80e390 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
  80e378:	e0bffd43 	ldbu	r2,-11(fp)
  80e37c:	10803fcc 	andi	r2,r2,255
  80e380:	10803e98 	cmpnei	r2,r2,250
  80e384:	103ff51e 	bne	r2,zero,80e35c <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
  80e388:	e03fff15 	stw	zero,-4(fp)
  80e38c:	00000206 	br	80e398 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
  80e390:	e0bffd03 	ldbu	r2,-12(fp)
  80e394:	e0bfff15 	stw	r2,-4(fp)
  80e398:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
  80e39c:	e037883a 	mov	sp,fp
  80e3a0:	dfc00117 	ldw	ra,4(sp)
  80e3a4:	df000017 	ldw	fp,0(sp)
  80e3a8:	dec00204 	addi	sp,sp,8
  80e3ac:	f800283a 	ret

0080e3b0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
  80e3b0:	defff904 	addi	sp,sp,-28
  80e3b4:	dfc00615 	stw	ra,24(sp)
  80e3b8:	df000515 	stw	fp,20(sp)
  80e3bc:	df000504 	addi	fp,sp,20
  80e3c0:	e13ffd15 	stw	r4,-12(fp)
  80e3c4:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
  80e3c8:	e17ffe03 	ldbu	r5,-8(fp)
  80e3cc:	e13ffd17 	ldw	r4,-12(fp)
  80e3d0:	080e2c80 	call	80e2c8 <alt_up_ps2_write_data_byte>
  80e3d4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
  80e3d8:	e0bffc17 	ldw	r2,-16(fp)
  80e3dc:	1005003a 	cmpeq	r2,r2,zero
  80e3e0:	1000031e 	bne	r2,zero,80e3f0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
  80e3e4:	e0bffc17 	ldw	r2,-16(fp)
  80e3e8:	e0bfff15 	stw	r2,-4(fp)
  80e3ec:	00000506 	br	80e404 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
  80e3f0:	e13ffd17 	ldw	r4,-12(fp)
  80e3f4:	080e3400 	call	80e340 <alt_up_ps2_wait_for_ack>
  80e3f8:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
  80e3fc:	e0bffb17 	ldw	r2,-20(fp)
  80e400:	e0bfff15 	stw	r2,-4(fp)
  80e404:	e0bfff17 	ldw	r2,-4(fp)
}
  80e408:	e037883a 	mov	sp,fp
  80e40c:	dfc00117 	ldw	ra,4(sp)
  80e410:	df000017 	ldw	fp,0(sp)
  80e414:	dec00204 	addi	sp,sp,8
  80e418:	f800283a 	ret

0080e41c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  80e41c:	defff904 	addi	sp,sp,-28
  80e420:	dfc00615 	stw	ra,24(sp)
  80e424:	df000515 	stw	fp,20(sp)
  80e428:	df000504 	addi	fp,sp,20
  80e42c:	e13ffd15 	stw	r4,-12(fp)
  80e430:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
  80e434:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
  80e438:	e03ffb15 	stw	zero,-20(fp)
  80e43c:	00000006 	br	80e440 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
  80e440:	e0bffb17 	ldw	r2,-20(fp)
  80e444:	10800044 	addi	r2,r2,1
  80e448:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  80e44c:	e0bffd17 	ldw	r2,-12(fp)
  80e450:	10800a17 	ldw	r2,40(r2)
  80e454:	10800037 	ldwio	r2,0(r2)
  80e458:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
  80e45c:	e13ffc17 	ldw	r4,-16(fp)
  80e460:	080e0f00 	call	80e0f0 <read_data_valid>
  80e464:	10803fcc 	andi	r2,r2,255
  80e468:	1005003a 	cmpeq	r2,r2,zero
  80e46c:	1000071e 	bne	r2,zero,80e48c <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
  80e470:	e13ffc17 	ldw	r4,-16(fp)
  80e474:	080e1240 	call	80e124 <read_data_byte>
  80e478:	1007883a 	mov	r3,r2
  80e47c:	e0bffe17 	ldw	r2,-8(fp)
  80e480:	10c00005 	stb	r3,0(r2)
			return 0;
  80e484:	e03fff15 	stw	zero,-4(fp)
  80e488:	00000a06 	br	80e4b4 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  80e48c:	e0bffd17 	ldw	r2,-12(fp)
  80e490:	10800c17 	ldw	r2,48(r2)
  80e494:	1005003a 	cmpeq	r2,r2,zero
  80e498:	103fe91e 	bne	r2,zero,80e440 <alt_up_ps2_read_data_byte_timeout+0x24>
  80e49c:	e0bffd17 	ldw	r2,-12(fp)
  80e4a0:	10c00c17 	ldw	r3,48(r2)
  80e4a4:	e0bffb17 	ldw	r2,-20(fp)
  80e4a8:	18bfe52e 	bgeu	r3,r2,80e440 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
  80e4ac:	00bfe304 	movi	r2,-116
  80e4b0:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
  80e4b4:	e0bfff17 	ldw	r2,-4(fp)
}
  80e4b8:	e037883a 	mov	sp,fp
  80e4bc:	dfc00117 	ldw	ra,4(sp)
  80e4c0:	df000017 	ldw	fp,0(sp)
  80e4c4:	dec00204 	addi	sp,sp,8
  80e4c8:	f800283a 	ret

0080e4cc <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  80e4cc:	defffa04 	addi	sp,sp,-24
  80e4d0:	dfc00515 	stw	ra,20(sp)
  80e4d4:	df000415 	stw	fp,16(sp)
  80e4d8:	df000404 	addi	fp,sp,16
  80e4dc:	e13ffd15 	stw	r4,-12(fp)
  80e4e0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
  80e4e4:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  80e4e8:	e0bffd17 	ldw	r2,-12(fp)
  80e4ec:	10800a17 	ldw	r2,40(r2)
  80e4f0:	10800037 	ldwio	r2,0(r2)
  80e4f4:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
  80e4f8:	e13ffc17 	ldw	r4,-16(fp)
  80e4fc:	080e0f00 	call	80e0f0 <read_data_valid>
  80e500:	10803fcc 	andi	r2,r2,255
  80e504:	1005003a 	cmpeq	r2,r2,zero
  80e508:	1000071e 	bne	r2,zero,80e528 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
  80e50c:	e13ffc17 	ldw	r4,-16(fp)
  80e510:	080e1240 	call	80e124 <read_data_byte>
  80e514:	1007883a 	mov	r3,r2
  80e518:	e0bffe17 	ldw	r2,-8(fp)
  80e51c:	10c00005 	stb	r3,0(r2)
		return 0;
  80e520:	e03fff15 	stw	zero,-4(fp)
  80e524:	00000206 	br	80e530 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
  80e528:	00bfffc4 	movi	r2,-1
  80e52c:	e0bfff15 	stw	r2,-4(fp)
  80e530:	e0bfff17 	ldw	r2,-4(fp)
}
  80e534:	e037883a 	mov	sp,fp
  80e538:	dfc00117 	ldw	ra,4(sp)
  80e53c:	df000017 	ldw	fp,0(sp)
  80e540:	dec00204 	addi	sp,sp,8
  80e544:	f800283a 	ret

0080e548 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
  80e548:	defffb04 	addi	sp,sp,-20
  80e54c:	dfc00415 	stw	ra,16(sp)
  80e550:	df000315 	stw	fp,12(sp)
  80e554:	df000304 	addi	fp,sp,12
  80e558:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
  80e55c:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
  80e560:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  80e564:	e0bfff17 	ldw	r2,-4(fp)
  80e568:	10800a17 	ldw	r2,40(r2)
  80e56c:	10800037 	ldwio	r2,0(r2)
  80e570:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
  80e574:	e13ffd17 	ldw	r4,-12(fp)
  80e578:	080e0bc0 	call	80e0bc <read_num_bytes_available>
  80e57c:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
  80e580:	e0bffe0b 	ldhu	r2,-8(fp)
  80e584:	1004c03a 	cmpne	r2,r2,zero
  80e588:	103ff61e 	bne	r2,zero,80e564 <alt_up_ps2_clear_fifo+0x1c>
}
  80e58c:	e037883a 	mov	sp,fp
  80e590:	dfc00117 	ldw	ra,4(sp)
  80e594:	df000017 	ldw	fp,0(sp)
  80e598:	dec00204 	addi	sp,sp,8
  80e59c:	f800283a 	ret

0080e5a0 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
  80e5a0:	defff704 	addi	sp,sp,-36
  80e5a4:	dfc00815 	stw	ra,32(sp)
  80e5a8:	df000715 	stw	fp,28(sp)
  80e5ac:	df000704 	addi	fp,sp,28
  80e5b0:	e13ffc15 	stw	r4,-16(fp)
  80e5b4:	e17ffd15 	stw	r5,-12(fp)
  80e5b8:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  80e5bc:	e0bffc17 	ldw	r2,-16(fp)
  80e5c0:	10800017 	ldw	r2,0(r2)
  80e5c4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
  80e5c8:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
  80e5cc:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
  80e5d0:	e0fff917 	ldw	r3,-28(fp)
  80e5d4:	e0bffe17 	ldw	r2,-8(fp)
  80e5d8:	18bffd16 	blt	r3,r2,80e5d0 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
  80e5dc:	e17ffd17 	ldw	r5,-12(fp)
  80e5e0:	e0bffd17 	ldw	r2,-12(fp)
  80e5e4:	10800044 	addi	r2,r2,1
  80e5e8:	e0bffd15 	stw	r2,-12(fp)
  80e5ec:	e13ffb17 	ldw	r4,-20(fp)
  80e5f0:	080e41c0 	call	80e41c <alt_up_ps2_read_data_byte_timeout>
  80e5f4:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
  80e5f8:	e0bffa17 	ldw	r2,-24(fp)
  80e5fc:	1005003a 	cmpeq	r2,r2,zero
  80e600:	1000031e 	bne	r2,zero,80e610 <alt_up_ps2_read_fd+0x70>
			return count;
  80e604:	e0bff917 	ldw	r2,-28(fp)
  80e608:	e0bfff15 	stw	r2,-4(fp)
  80e60c:	00000506 	br	80e624 <alt_up_ps2_read_fd+0x84>
		count++;
  80e610:	e0bff917 	ldw	r2,-28(fp)
  80e614:	10800044 	addi	r2,r2,1
  80e618:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
  80e61c:	e0bff917 	ldw	r2,-28(fp)
  80e620:	e0bfff15 	stw	r2,-4(fp)
  80e624:	e0bfff17 	ldw	r2,-4(fp)
}
  80e628:	e037883a 	mov	sp,fp
  80e62c:	dfc00117 	ldw	ra,4(sp)
  80e630:	df000017 	ldw	fp,0(sp)
  80e634:	dec00204 	addi	sp,sp,8
  80e638:	f800283a 	ret

0080e63c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
  80e63c:	defff704 	addi	sp,sp,-36
  80e640:	dfc00815 	stw	ra,32(sp)
  80e644:	df000715 	stw	fp,28(sp)
  80e648:	df000704 	addi	fp,sp,28
  80e64c:	e13ffc15 	stw	r4,-16(fp)
  80e650:	e17ffd15 	stw	r5,-12(fp)
  80e654:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  80e658:	e0bffc17 	ldw	r2,-16(fp)
  80e65c:	10800017 	ldw	r2,0(r2)
  80e660:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
  80e664:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
  80e668:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
  80e66c:	00001206 	br	80e6b8 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
  80e670:	e0bffd17 	ldw	r2,-12(fp)
  80e674:	10800003 	ldbu	r2,0(r2)
  80e678:	11403fcc 	andi	r5,r2,255
  80e67c:	e0bffd17 	ldw	r2,-12(fp)
  80e680:	10800044 	addi	r2,r2,1
  80e684:	e0bffd15 	stw	r2,-12(fp)
  80e688:	e13ffb17 	ldw	r4,-20(fp)
  80e68c:	080e2c80 	call	80e2c8 <alt_up_ps2_write_data_byte>
  80e690:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
  80e694:	e0bffa17 	ldw	r2,-24(fp)
  80e698:	1005003a 	cmpeq	r2,r2,zero
  80e69c:	1000031e 	bne	r2,zero,80e6ac <alt_up_ps2_write_fd+0x70>
			return count;
  80e6a0:	e0bff917 	ldw	r2,-28(fp)
  80e6a4:	e0bfff15 	stw	r2,-4(fp)
  80e6a8:	00000806 	br	80e6cc <alt_up_ps2_write_fd+0x90>
		count++;
  80e6ac:	e0bff917 	ldw	r2,-28(fp)
  80e6b0:	10800044 	addi	r2,r2,1
  80e6b4:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
  80e6b8:	e0fff917 	ldw	r3,-28(fp)
  80e6bc:	e0bffe17 	ldw	r2,-8(fp)
  80e6c0:	18bfeb16 	blt	r3,r2,80e670 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
  80e6c4:	e0bff917 	ldw	r2,-28(fp)
  80e6c8:	e0bfff15 	stw	r2,-4(fp)
  80e6cc:	e0bfff17 	ldw	r2,-4(fp)
}
  80e6d0:	e037883a 	mov	sp,fp
  80e6d4:	dfc00117 	ldw	ra,4(sp)
  80e6d8:	df000017 	ldw	fp,0(sp)
  80e6dc:	dec00204 	addi	sp,sp,8
  80e6e0:	f800283a 	ret

0080e6e4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
  80e6e4:	defffc04 	addi	sp,sp,-16
  80e6e8:	dfc00315 	stw	ra,12(sp)
  80e6ec:	df000215 	stw	fp,8(sp)
  80e6f0:	df000204 	addi	fp,sp,8
  80e6f4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
  80e6f8:	e13fff17 	ldw	r4,-4(fp)
  80e6fc:	01402074 	movhi	r5,129
  80e700:	29481204 	addi	r5,r5,8264
  80e704:	080efe00 	call	80efe0 <alt_find_dev>
  80e708:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80e70c:	e0bffe17 	ldw	r2,-8(fp)
}
  80e710:	e037883a 	mov	sp,fp
  80e714:	dfc00117 	ldw	ra,4(sp)
  80e718:	df000017 	ldw	fp,0(sp)
  80e71c:	dec00204 	addi	sp,sp,8
  80e720:	f800283a 	ret

0080e724 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  80e724:	defffd04 	addi	sp,sp,-12
  80e728:	df000215 	stw	fp,8(sp)
  80e72c:	df000204 	addi	fp,sp,8
  80e730:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  80e734:	e0bfff17 	ldw	r2,-4(fp)
  80e738:	10800a17 	ldw	r2,40(r2)
  80e73c:	10800104 	addi	r2,r2,4
  80e740:	10800037 	ldwio	r2,0(r2)
  80e744:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  80e748:	e0bffe17 	ldw	r2,-8(fp)
  80e74c:	10800054 	ori	r2,r2,1
  80e750:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  80e754:	e0bfff17 	ldw	r2,-4(fp)
  80e758:	10800a17 	ldw	r2,40(r2)
  80e75c:	10800104 	addi	r2,r2,4
  80e760:	e0fffe17 	ldw	r3,-8(fp)
  80e764:	10c00035 	stwio	r3,0(r2)
}
  80e768:	e037883a 	mov	sp,fp
  80e76c:	df000017 	ldw	fp,0(sp)
  80e770:	dec00104 	addi	sp,sp,4
  80e774:	f800283a 	ret

0080e778 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  80e778:	defffd04 	addi	sp,sp,-12
  80e77c:	df000215 	stw	fp,8(sp)
  80e780:	df000204 	addi	fp,sp,8
  80e784:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  80e788:	e0bfff17 	ldw	r2,-4(fp)
  80e78c:	10800a17 	ldw	r2,40(r2)
  80e790:	10800104 	addi	r2,r2,4
  80e794:	10800037 	ldwio	r2,0(r2)
  80e798:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  80e79c:	e0fffe17 	ldw	r3,-8(fp)
  80e7a0:	00bfff84 	movi	r2,-2
  80e7a4:	1884703a 	and	r2,r3,r2
  80e7a8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  80e7ac:	e0bfff17 	ldw	r2,-4(fp)
  80e7b0:	10800a17 	ldw	r2,40(r2)
  80e7b4:	10800104 	addi	r2,r2,4
  80e7b8:	e0fffe17 	ldw	r3,-8(fp)
  80e7bc:	10c00035 	stwio	r3,0(r2)
}
  80e7c0:	e037883a 	mov	sp,fp
  80e7c4:	df000017 	ldw	fp,0(sp)
  80e7c8:	dec00104 	addi	sp,sp,4
  80e7cc:	f800283a 	ret

0080e7d0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  80e7d0:	defffd04 	addi	sp,sp,-12
  80e7d4:	df000215 	stw	fp,8(sp)
  80e7d8:	df000204 	addi	fp,sp,8
  80e7dc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  80e7e0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  80e7e4:	e0bfff17 	ldw	r2,-4(fp)
  80e7e8:	10800a17 	ldw	r2,40(r2)
  80e7ec:	10800084 	addi	r2,r2,2
  80e7f0:	1080002b 	ldhuio	r2,0(r2)
  80e7f4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  80e7f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
  80e7fc:	e037883a 	mov	sp,fp
  80e800:	df000017 	ldw	fp,0(sp)
  80e804:	dec00104 	addi	sp,sp,4
  80e808:	f800283a 	ret

0080e80c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  80e80c:	defffd04 	addi	sp,sp,-12
  80e810:	df000215 	stw	fp,8(sp)
  80e814:	df000204 	addi	fp,sp,8
  80e818:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  80e81c:	e0bfff17 	ldw	r2,-4(fp)
  80e820:	10800a17 	ldw	r2,40(r2)
  80e824:	10800104 	addi	r2,r2,4
  80e828:	10800037 	ldwio	r2,0(r2)
  80e82c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  80e830:	e0bffe17 	ldw	r2,-8(fp)
  80e834:	10bfffec 	andhi	r2,r2,65535
  80e838:	1004d43a 	srli	r2,r2,16
}
  80e83c:	e037883a 	mov	sp,fp
  80e840:	df000017 	ldw	fp,0(sp)
  80e844:	dec00104 	addi	sp,sp,4
  80e848:	f800283a 	ret

0080e84c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  80e84c:	defffc04 	addi	sp,sp,-16
  80e850:	df000315 	stw	fp,12(sp)
  80e854:	df000304 	addi	fp,sp,12
  80e858:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  80e85c:	e0bffe17 	ldw	r2,-8(fp)
  80e860:	1080800c 	andi	r2,r2,512
  80e864:	1004d27a 	srli	r2,r2,9
  80e868:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  80e86c:	e0bffd17 	ldw	r2,-12(fp)
  80e870:	1005003a 	cmpeq	r2,r2,zero
  80e874:	1000031e 	bne	r2,zero,80e884 <alt_up_rs232_check_parity+0x38>
  80e878:	00bfffc4 	movi	r2,-1
  80e87c:	e0bfff15 	stw	r2,-4(fp)
  80e880:	00000106 	br	80e888 <alt_up_rs232_check_parity+0x3c>
  80e884:	e03fff15 	stw	zero,-4(fp)
  80e888:	e0bfff17 	ldw	r2,-4(fp)
}
  80e88c:	e037883a 	mov	sp,fp
  80e890:	df000017 	ldw	fp,0(sp)
  80e894:	dec00104 	addi	sp,sp,4
  80e898:	f800283a 	ret

0080e89c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  80e89c:	defffc04 	addi	sp,sp,-16
  80e8a0:	df000315 	stw	fp,12(sp)
  80e8a4:	df000304 	addi	fp,sp,12
  80e8a8:	e13ffe15 	stw	r4,-8(fp)
  80e8ac:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  80e8b0:	e0bffe17 	ldw	r2,-8(fp)
  80e8b4:	10800a17 	ldw	r2,40(r2)
  80e8b8:	10800037 	ldwio	r2,0(r2)
  80e8bc:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  80e8c0:	e0bffe17 	ldw	r2,-8(fp)
  80e8c4:	10800a17 	ldw	r2,40(r2)
  80e8c8:	e0ffff03 	ldbu	r3,-4(fp)
  80e8cc:	10c00035 	stwio	r3,0(r2)
	return 0;
  80e8d0:	0005883a 	mov	r2,zero
}
  80e8d4:	e037883a 	mov	sp,fp
  80e8d8:	df000017 	ldw	fp,0(sp)
  80e8dc:	dec00104 	addi	sp,sp,4
  80e8e0:	f800283a 	ret

0080e8e4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  80e8e4:	defffa04 	addi	sp,sp,-24
  80e8e8:	dfc00515 	stw	ra,20(sp)
  80e8ec:	df000415 	stw	fp,16(sp)
  80e8f0:	df000404 	addi	fp,sp,16
  80e8f4:	e13ffd15 	stw	r4,-12(fp)
  80e8f8:	e17ffe15 	stw	r5,-8(fp)
  80e8fc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  80e900:	e0bffd17 	ldw	r2,-12(fp)
  80e904:	10800a17 	ldw	r2,40(r2)
  80e908:	10800037 	ldwio	r2,0(r2)
  80e90c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  80e910:	e0bffc17 	ldw	r2,-16(fp)
  80e914:	1007883a 	mov	r3,r2
  80e918:	e0bffe17 	ldw	r2,-8(fp)
  80e91c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  80e920:	e13ffc17 	ldw	r4,-16(fp)
  80e924:	080e84c0 	call	80e84c <alt_up_rs232_check_parity>
  80e928:	1007883a 	mov	r3,r2
  80e92c:	e0bfff17 	ldw	r2,-4(fp)
  80e930:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  80e934:	e0bffc17 	ldw	r2,-16(fp)
  80e938:	10a0000c 	andi	r2,r2,32768
  80e93c:	1004d3fa 	srli	r2,r2,15
  80e940:	10bfffc4 	addi	r2,r2,-1
}
  80e944:	e037883a 	mov	sp,fp
  80e948:	dfc00117 	ldw	ra,4(sp)
  80e94c:	df000017 	ldw	fp,0(sp)
  80e950:	dec00204 	addi	sp,sp,8
  80e954:	f800283a 	ret

0080e958 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  80e958:	defff804 	addi	sp,sp,-32
  80e95c:	dfc00715 	stw	ra,28(sp)
  80e960:	df000615 	stw	fp,24(sp)
  80e964:	df000604 	addi	fp,sp,24
  80e968:	e13ffd15 	stw	r4,-12(fp)
  80e96c:	e17ffe15 	stw	r5,-8(fp)
  80e970:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  80e974:	e0bffd17 	ldw	r2,-12(fp)
  80e978:	10800017 	ldw	r2,0(r2)
  80e97c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  80e980:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  80e984:	00000c06 	br	80e9b8 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  80e988:	e17ffe17 	ldw	r5,-8(fp)
  80e98c:	e0bffe17 	ldw	r2,-8(fp)
  80e990:	10800044 	addi	r2,r2,1
  80e994:	e0bffe15 	stw	r2,-8(fp)
  80e998:	e1bffc04 	addi	r6,fp,-16
  80e99c:	e13ffb17 	ldw	r4,-20(fp)
  80e9a0:	080e8e40 	call	80e8e4 <alt_up_rs232_read_data>
  80e9a4:	1004c03a 	cmpne	r2,r2,zero
  80e9a8:	1000091e 	bne	r2,zero,80e9d0 <alt_up_rs232_read_fd+0x78>
			count++;
  80e9ac:	e0bffa17 	ldw	r2,-24(fp)
  80e9b0:	10800044 	addi	r2,r2,1
  80e9b4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  80e9b8:	e0bfff17 	ldw	r2,-4(fp)
  80e9bc:	10bfffc4 	addi	r2,r2,-1
  80e9c0:	e0bfff15 	stw	r2,-4(fp)
  80e9c4:	e0bfff17 	ldw	r2,-4(fp)
  80e9c8:	10bfffd8 	cmpnei	r2,r2,-1
  80e9cc:	103fee1e 	bne	r2,zero,80e988 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  80e9d0:	e0bffa17 	ldw	r2,-24(fp)
}
  80e9d4:	e037883a 	mov	sp,fp
  80e9d8:	dfc00117 	ldw	ra,4(sp)
  80e9dc:	df000017 	ldw	fp,0(sp)
  80e9e0:	dec00204 	addi	sp,sp,8
  80e9e4:	f800283a 	ret

0080e9e8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  80e9e8:	defff904 	addi	sp,sp,-28
  80e9ec:	dfc00615 	stw	ra,24(sp)
  80e9f0:	df000515 	stw	fp,20(sp)
  80e9f4:	df000504 	addi	fp,sp,20
  80e9f8:	e13ffd15 	stw	r4,-12(fp)
  80e9fc:	e17ffe15 	stw	r5,-8(fp)
  80ea00:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  80ea04:	e0bffd17 	ldw	r2,-12(fp)
  80ea08:	10800017 	ldw	r2,0(r2)
  80ea0c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  80ea10:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  80ea14:	00000d06 	br	80ea4c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  80ea18:	e0bffe17 	ldw	r2,-8(fp)
  80ea1c:	10800003 	ldbu	r2,0(r2)
  80ea20:	11403fcc 	andi	r5,r2,255
  80ea24:	e13ffc17 	ldw	r4,-16(fp)
  80ea28:	080e89c0 	call	80e89c <alt_up_rs232_write_data>
  80ea2c:	1004c03a 	cmpne	r2,r2,zero
  80ea30:	10000c1e 	bne	r2,zero,80ea64 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  80ea34:	e0bffb17 	ldw	r2,-20(fp)
  80ea38:	10800044 	addi	r2,r2,1
  80ea3c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  80ea40:	e0bffe17 	ldw	r2,-8(fp)
  80ea44:	10800044 	addi	r2,r2,1
  80ea48:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  80ea4c:	e0bfff17 	ldw	r2,-4(fp)
  80ea50:	10bfffc4 	addi	r2,r2,-1
  80ea54:	e0bfff15 	stw	r2,-4(fp)
  80ea58:	e0bfff17 	ldw	r2,-4(fp)
  80ea5c:	10bfffd8 	cmpnei	r2,r2,-1
  80ea60:	103fed1e 	bne	r2,zero,80ea18 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  80ea64:	e0bffb17 	ldw	r2,-20(fp)
}
  80ea68:	e037883a 	mov	sp,fp
  80ea6c:	dfc00117 	ldw	ra,4(sp)
  80ea70:	df000017 	ldw	fp,0(sp)
  80ea74:	dec00204 	addi	sp,sp,8
  80ea78:	f800283a 	ret

0080ea7c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  80ea7c:	defffc04 	addi	sp,sp,-16
  80ea80:	dfc00315 	stw	ra,12(sp)
  80ea84:	df000215 	stw	fp,8(sp)
  80ea88:	df000204 	addi	fp,sp,8
  80ea8c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  80ea90:	e13fff17 	ldw	r4,-4(fp)
  80ea94:	01402074 	movhi	r5,129
  80ea98:	29481204 	addi	r5,r5,8264
  80ea9c:	080efe00 	call	80efe0 <alt_find_dev>
  80eaa0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80eaa4:	e0bffe17 	ldw	r2,-8(fp)
}
  80eaa8:	e037883a 	mov	sp,fp
  80eaac:	dfc00117 	ldw	ra,4(sp)
  80eab0:	df000017 	ldw	fp,0(sp)
  80eab4:	dec00204 	addi	sp,sp,8
  80eab8:	f800283a 	ret

0080eabc <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  80eabc:	defffc04 	addi	sp,sp,-16
  80eac0:	dfc00315 	stw	ra,12(sp)
  80eac4:	df000215 	stw	fp,8(sp)
  80eac8:	df000204 	addi	fp,sp,8
  80eacc:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  80ead0:	e0bfff17 	ldw	r2,-4(fp)
  80ead4:	10800217 	ldw	r2,8(r2)
  80ead8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  80eadc:	00000c06 	br	80eb10 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  80eae0:	e13ffe17 	ldw	r4,-8(fp)
  80eae4:	01402074 	movhi	r5,129
  80eae8:	29410e04 	addi	r5,r5,1080
  80eaec:	08095400 	call	809540 <strcmp>
  80eaf0:	1004c03a 	cmpne	r2,r2,zero
  80eaf4:	1000031e 	bne	r2,zero,80eb04 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  80eaf8:	e0bffe17 	ldw	r2,-8(fp)
  80eafc:	10000005 	stb	zero,0(r2)
			break;
  80eb00:	00000a06 	br	80eb2c <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  80eb04:	e0bffe17 	ldw	r2,-8(fp)
  80eb08:	10800044 	addi	r2,r2,1
  80eb0c:	e0bffe15 	stw	r2,-8(fp)
  80eb10:	e0bffe17 	ldw	r2,-8(fp)
  80eb14:	10800003 	ldbu	r2,0(r2)
  80eb18:	10803fcc 	andi	r2,r2,255
  80eb1c:	1080201c 	xori	r2,r2,128
  80eb20:	10bfe004 	addi	r2,r2,-128
  80eb24:	1004c03a 	cmpne	r2,r2,zero
  80eb28:	103fed1e 	bne	r2,zero,80eae0 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  80eb2c:	e037883a 	mov	sp,fp
  80eb30:	dfc00117 	ldw	ra,4(sp)
  80eb34:	df000017 	ldw	fp,0(sp)
  80eb38:	dec00204 	addi	sp,sp,8
  80eb3c:	f800283a 	ret

0080eb40 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  80eb40:	defffc04 	addi	sp,sp,-16
  80eb44:	dfc00315 	stw	ra,12(sp)
  80eb48:	df000215 	stw	fp,8(sp)
  80eb4c:	df000204 	addi	fp,sp,8
  80eb50:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  80eb54:	e13fff17 	ldw	r4,-4(fp)
  80eb58:	01402074 	movhi	r5,129
  80eb5c:	29481204 	addi	r5,r5,8264
  80eb60:	080efe00 	call	80efe0 <alt_find_dev>
  80eb64:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80eb68:	e0bffe17 	ldw	r2,-8(fp)
}
  80eb6c:	e037883a 	mov	sp,fp
  80eb70:	dfc00117 	ldw	ra,4(sp)
  80eb74:	df000017 	ldw	fp,0(sp)
  80eb78:	dec00204 	addi	sp,sp,8
  80eb7c:	f800283a 	ret

0080eb80 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  80eb80:	defff904 	addi	sp,sp,-28
  80eb84:	df000615 	stw	fp,24(sp)
  80eb88:	df000604 	addi	fp,sp,24
  80eb8c:	e13ffb15 	stw	r4,-20(fp)
  80eb90:	e1bffd15 	stw	r6,-12(fp)
  80eb94:	e1fffe15 	stw	r7,-8(fp)
  80eb98:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  80eb9c:	e0bffb17 	ldw	r2,-20(fp)
  80eba0:	10c00c17 	ldw	r3,48(r2)
  80eba4:	e0bffd17 	ldw	r2,-12(fp)
  80eba8:	10c0042e 	bgeu	r2,r3,80ebbc <alt_up_char_buffer_draw+0x3c>
  80ebac:	e0bffb17 	ldw	r2,-20(fp)
  80ebb0:	10c00d17 	ldw	r3,52(r2)
  80ebb4:	e0bffe17 	ldw	r2,-8(fp)
  80ebb8:	10c00336 	bltu	r2,r3,80ebc8 <alt_up_char_buffer_draw+0x48>
		return -1;
  80ebbc:	00bfffc4 	movi	r2,-1
  80ebc0:	e0bfff15 	stw	r2,-4(fp)
  80ebc4:	00001d06 	br	80ec3c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  80ebc8:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  80ebcc:	e0bffb17 	ldw	r2,-20(fp)
  80ebd0:	10c00f17 	ldw	r3,60(r2)
  80ebd4:	e0bffd17 	ldw	r2,-12(fp)
  80ebd8:	1886703a 	and	r3,r3,r2
  80ebdc:	e0bffb17 	ldw	r2,-20(fp)
  80ebe0:	10800e17 	ldw	r2,56(r2)
  80ebe4:	1886983a 	sll	r3,r3,r2
  80ebe8:	e0bffa17 	ldw	r2,-24(fp)
  80ebec:	10c4b03a 	or	r2,r2,r3
  80ebf0:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  80ebf4:	e0bffb17 	ldw	r2,-20(fp)
  80ebf8:	10c01117 	ldw	r3,68(r2)
  80ebfc:	e0bffe17 	ldw	r2,-8(fp)
  80ec00:	1886703a 	and	r3,r3,r2
  80ec04:	e0bffb17 	ldw	r2,-20(fp)
  80ec08:	10801017 	ldw	r2,64(r2)
  80ec0c:	1886983a 	sll	r3,r3,r2
  80ec10:	e0bffa17 	ldw	r2,-24(fp)
  80ec14:	10c4b03a 	or	r2,r2,r3
  80ec18:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  80ec1c:	e0bffb17 	ldw	r2,-20(fp)
  80ec20:	10800b17 	ldw	r2,44(r2)
  80ec24:	1007883a 	mov	r3,r2
  80ec28:	e0bffa17 	ldw	r2,-24(fp)
  80ec2c:	1885883a 	add	r2,r3,r2
  80ec30:	e0fffc03 	ldbu	r3,-16(fp)
  80ec34:	10c00025 	stbio	r3,0(r2)

	return 0;
  80ec38:	e03fff15 	stw	zero,-4(fp)
  80ec3c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ec40:	e037883a 	mov	sp,fp
  80ec44:	df000017 	ldw	fp,0(sp)
  80ec48:	dec00104 	addi	sp,sp,4
  80ec4c:	f800283a 	ret

0080ec50 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  80ec50:	defff904 	addi	sp,sp,-28
  80ec54:	df000615 	stw	fp,24(sp)
  80ec58:	df000604 	addi	fp,sp,24
  80ec5c:	e13ffb15 	stw	r4,-20(fp)
  80ec60:	e17ffc15 	stw	r5,-16(fp)
  80ec64:	e1bffd15 	stw	r6,-12(fp)
  80ec68:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  80ec6c:	e0bffb17 	ldw	r2,-20(fp)
  80ec70:	10c00c17 	ldw	r3,48(r2)
  80ec74:	e0bffd17 	ldw	r2,-12(fp)
  80ec78:	10c0042e 	bgeu	r2,r3,80ec8c <alt_up_char_buffer_string+0x3c>
  80ec7c:	e0bffb17 	ldw	r2,-20(fp)
  80ec80:	10c00d17 	ldw	r3,52(r2)
  80ec84:	e0bffe17 	ldw	r2,-8(fp)
  80ec88:	10c00336 	bltu	r2,r3,80ec98 <alt_up_char_buffer_string+0x48>
		return -1;
  80ec8c:	00bfffc4 	movi	r2,-1
  80ec90:	e0bfff15 	stw	r2,-4(fp)
  80ec94:	00002e06 	br	80ed50 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  80ec98:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  80ec9c:	e0bffb17 	ldw	r2,-20(fp)
  80eca0:	10801017 	ldw	r2,64(r2)
  80eca4:	1007883a 	mov	r3,r2
  80eca8:	e0bffe17 	ldw	r2,-8(fp)
  80ecac:	10c6983a 	sll	r3,r2,r3
  80ecb0:	e0bffd17 	ldw	r2,-12(fp)
  80ecb4:	1885883a 	add	r2,r3,r2
  80ecb8:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  80ecbc:	00001c06 	br	80ed30 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  80ecc0:	e0bffb17 	ldw	r2,-20(fp)
  80ecc4:	10800b17 	ldw	r2,44(r2)
  80ecc8:	1007883a 	mov	r3,r2
  80eccc:	e0bffa17 	ldw	r2,-24(fp)
  80ecd0:	1889883a 	add	r4,r3,r2
  80ecd4:	e0bffc17 	ldw	r2,-16(fp)
  80ecd8:	10800003 	ldbu	r2,0(r2)
  80ecdc:	10c03fcc 	andi	r3,r2,255
  80ece0:	18c0201c 	xori	r3,r3,128
  80ece4:	18ffe004 	addi	r3,r3,-128
  80ece8:	2005883a 	mov	r2,r4
  80ecec:	10c00025 	stbio	r3,0(r2)
		++ptr;
  80ecf0:	e0bffc17 	ldw	r2,-16(fp)
  80ecf4:	10800044 	addi	r2,r2,1
  80ecf8:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  80ecfc:	e0bffd17 	ldw	r2,-12(fp)
  80ed00:	10800044 	addi	r2,r2,1
  80ed04:	e0bffd15 	stw	r2,-12(fp)
  80ed08:	e0bffb17 	ldw	r2,-20(fp)
  80ed0c:	10c00c17 	ldw	r3,48(r2)
  80ed10:	e0bffd17 	ldw	r2,-12(fp)
  80ed14:	10c00336 	bltu	r2,r3,80ed24 <alt_up_char_buffer_string+0xd4>
			return -1;
  80ed18:	00bfffc4 	movi	r2,-1
  80ed1c:	e0bfff15 	stw	r2,-4(fp)
  80ed20:	00000b06 	br	80ed50 <alt_up_char_buffer_string+0x100>
		++offset;
  80ed24:	e0bffa17 	ldw	r2,-24(fp)
  80ed28:	10800044 	addi	r2,r2,1
  80ed2c:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  80ed30:	e0bffc17 	ldw	r2,-16(fp)
  80ed34:	10800003 	ldbu	r2,0(r2)
  80ed38:	10803fcc 	andi	r2,r2,255
  80ed3c:	1080201c 	xori	r2,r2,128
  80ed40:	10bfe004 	addi	r2,r2,-128
  80ed44:	1004c03a 	cmpne	r2,r2,zero
  80ed48:	103fdd1e 	bne	r2,zero,80ecc0 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  80ed4c:	e03fff15 	stw	zero,-4(fp)
  80ed50:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed54:	e037883a 	mov	sp,fp
  80ed58:	df000017 	ldw	fp,0(sp)
  80ed5c:	dec00104 	addi	sp,sp,4
  80ed60:	f800283a 	ret

0080ed64 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  80ed64:	defffe04 	addi	sp,sp,-8
  80ed68:	df000115 	stw	fp,4(sp)
  80ed6c:	df000104 	addi	fp,sp,4
  80ed70:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  80ed74:	e0bfff17 	ldw	r2,-4(fp)
  80ed78:	10800a17 	ldw	r2,40(r2)
  80ed7c:	10800084 	addi	r2,r2,2
  80ed80:	1007883a 	mov	r3,r2
  80ed84:	00800044 	movi	r2,1
  80ed88:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  80ed8c:	e0bfff17 	ldw	r2,-4(fp)
  80ed90:	10800a17 	ldw	r2,40(r2)
  80ed94:	10800084 	addi	r2,r2,2
  80ed98:	10800023 	ldbuio	r2,0(r2)
  80ed9c:	1080004c 	andi	r2,r2,1
  80eda0:	10803fcc 	andi	r2,r2,255
  80eda4:	1004c03a 	cmpne	r2,r2,zero
  80eda8:	103ff81e 	bne	r2,zero,80ed8c <alt_up_char_buffer_clear+0x28>
	return 0;
  80edac:	0005883a 	mov	r2,zero
}
  80edb0:	e037883a 	mov	sp,fp
  80edb4:	df000017 	ldw	fp,0(sp)
  80edb8:	dec00104 	addi	sp,sp,4
  80edbc:	f800283a 	ret

0080edc0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80edc0:	defffe04 	addi	sp,sp,-8
  80edc4:	df000115 	stw	fp,4(sp)
  80edc8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80edcc:	e03fff15 	stw	zero,-4(fp)
  80edd0:	00000506 	br	80ede8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80edd4:	e0bfff17 	ldw	r2,-4(fp)
  80edd8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80eddc:	e0bfff17 	ldw	r2,-4(fp)
  80ede0:	10800804 	addi	r2,r2,32
  80ede4:	e0bfff15 	stw	r2,-4(fp)
  80ede8:	e0bfff17 	ldw	r2,-4(fp)
  80edec:	10900030 	cmpltui	r2,r2,16384
  80edf0:	103ff81e 	bne	r2,zero,80edd4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80edf4:	e037883a 	mov	sp,fp
  80edf8:	df000017 	ldw	fp,0(sp)
  80edfc:	dec00104 	addi	sp,sp,4
  80ee00:	f800283a 	ret

0080ee04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80ee04:	defff904 	addi	sp,sp,-28
  80ee08:	dfc00615 	stw	ra,24(sp)
  80ee0c:	df000515 	stw	fp,20(sp)
  80ee10:	df000504 	addi	fp,sp,20
  80ee14:	e13ffd15 	stw	r4,-12(fp)
  80ee18:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80ee1c:	e0bffd17 	ldw	r2,-12(fp)
  80ee20:	1005003a 	cmpeq	r2,r2,zero
  80ee24:	1000041e 	bne	r2,zero,80ee38 <alt_dev_llist_insert+0x34>
  80ee28:	e0bffd17 	ldw	r2,-12(fp)
  80ee2c:	10800217 	ldw	r2,8(r2)
  80ee30:	1004c03a 	cmpne	r2,r2,zero
  80ee34:	1000071e 	bne	r2,zero,80ee54 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80ee38:	080eeb80 	call	80eeb8 <alt_get_errno>
  80ee3c:	1007883a 	mov	r3,r2
  80ee40:	00800584 	movi	r2,22
  80ee44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80ee48:	00bffa84 	movi	r2,-22
  80ee4c:	e0bfff15 	stw	r2,-4(fp)
  80ee50:	00001306 	br	80eea0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80ee54:	e0fffd17 	ldw	r3,-12(fp)
  80ee58:	e0bffe17 	ldw	r2,-8(fp)
  80ee5c:	e0bffb15 	stw	r2,-20(fp)
  80ee60:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ee64:	e0fffc17 	ldw	r3,-16(fp)
  80ee68:	e0bffb17 	ldw	r2,-20(fp)
  80ee6c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80ee70:	e0bffb17 	ldw	r2,-20(fp)
  80ee74:	10c00017 	ldw	r3,0(r2)
  80ee78:	e0bffc17 	ldw	r2,-16(fp)
  80ee7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ee80:	e0bffb17 	ldw	r2,-20(fp)
  80ee84:	10c00017 	ldw	r3,0(r2)
  80ee88:	e0bffc17 	ldw	r2,-16(fp)
  80ee8c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80ee90:	e0fffb17 	ldw	r3,-20(fp)
  80ee94:	e0bffc17 	ldw	r2,-16(fp)
  80ee98:	18800015 	stw	r2,0(r3)

  return 0;  
  80ee9c:	e03fff15 	stw	zero,-4(fp)
  80eea0:	e0bfff17 	ldw	r2,-4(fp)
}
  80eea4:	e037883a 	mov	sp,fp
  80eea8:	dfc00117 	ldw	ra,4(sp)
  80eeac:	df000017 	ldw	fp,0(sp)
  80eeb0:	dec00204 	addi	sp,sp,8
  80eeb4:	f800283a 	ret

0080eeb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80eeb8:	defffd04 	addi	sp,sp,-12
  80eebc:	dfc00215 	stw	ra,8(sp)
  80eec0:	df000115 	stw	fp,4(sp)
  80eec4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80eec8:	00802074 	movhi	r2,129
  80eecc:	10881504 	addi	r2,r2,8276
  80eed0:	10800017 	ldw	r2,0(r2)
  80eed4:	1005003a 	cmpeq	r2,r2,zero
  80eed8:	1000061e 	bne	r2,zero,80eef4 <alt_get_errno+0x3c>
  80eedc:	00802074 	movhi	r2,129
  80eee0:	10881504 	addi	r2,r2,8276
  80eee4:	10800017 	ldw	r2,0(r2)
  80eee8:	103ee83a 	callr	r2
  80eeec:	e0bfff15 	stw	r2,-4(fp)
  80eef0:	00000306 	br	80ef00 <alt_get_errno+0x48>
  80eef4:	00802074 	movhi	r2,129
  80eef8:	108f2504 	addi	r2,r2,15508
  80eefc:	e0bfff15 	stw	r2,-4(fp)
  80ef00:	e0bfff17 	ldw	r2,-4(fp)
}
  80ef04:	e037883a 	mov	sp,fp
  80ef08:	dfc00117 	ldw	ra,4(sp)
  80ef0c:	df000017 	ldw	fp,0(sp)
  80ef10:	dec00204 	addi	sp,sp,8
  80ef14:	f800283a 	ret

0080ef18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ef18:	defffd04 	addi	sp,sp,-12
  80ef1c:	dfc00215 	stw	ra,8(sp)
  80ef20:	df000115 	stw	fp,4(sp)
  80ef24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ef28:	00bfff04 	movi	r2,-4
  80ef2c:	00c02074 	movhi	r3,129
  80ef30:	18ff5904 	addi	r3,r3,-668
  80ef34:	1885883a 	add	r2,r3,r2
  80ef38:	e0bfff15 	stw	r2,-4(fp)
  80ef3c:	00000606 	br	80ef58 <_do_ctors+0x40>
        (*ctor) (); 
  80ef40:	e0bfff17 	ldw	r2,-4(fp)
  80ef44:	10800017 	ldw	r2,0(r2)
  80ef48:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ef4c:	e0bfff17 	ldw	r2,-4(fp)
  80ef50:	10bfff04 	addi	r2,r2,-4
  80ef54:	e0bfff15 	stw	r2,-4(fp)
  80ef58:	e0ffff17 	ldw	r3,-4(fp)
  80ef5c:	00802074 	movhi	r2,129
  80ef60:	10bf5804 	addi	r2,r2,-672
  80ef64:	18bff62e 	bgeu	r3,r2,80ef40 <_do_ctors+0x28>
        (*ctor) (); 
}
  80ef68:	e037883a 	mov	sp,fp
  80ef6c:	dfc00117 	ldw	ra,4(sp)
  80ef70:	df000017 	ldw	fp,0(sp)
  80ef74:	dec00204 	addi	sp,sp,8
  80ef78:	f800283a 	ret

0080ef7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ef7c:	defffd04 	addi	sp,sp,-12
  80ef80:	dfc00215 	stw	ra,8(sp)
  80ef84:	df000115 	stw	fp,4(sp)
  80ef88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ef8c:	00bfff04 	movi	r2,-4
  80ef90:	00c02074 	movhi	r3,129
  80ef94:	18ff5904 	addi	r3,r3,-668
  80ef98:	1885883a 	add	r2,r3,r2
  80ef9c:	e0bfff15 	stw	r2,-4(fp)
  80efa0:	00000606 	br	80efbc <_do_dtors+0x40>
        (*dtor) (); 
  80efa4:	e0bfff17 	ldw	r2,-4(fp)
  80efa8:	10800017 	ldw	r2,0(r2)
  80efac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80efb0:	e0bfff17 	ldw	r2,-4(fp)
  80efb4:	10bfff04 	addi	r2,r2,-4
  80efb8:	e0bfff15 	stw	r2,-4(fp)
  80efbc:	e0ffff17 	ldw	r3,-4(fp)
  80efc0:	00802074 	movhi	r2,129
  80efc4:	10bf5904 	addi	r2,r2,-668
  80efc8:	18bff62e 	bgeu	r3,r2,80efa4 <_do_dtors+0x28>
        (*dtor) (); 
}
  80efcc:	e037883a 	mov	sp,fp
  80efd0:	dfc00117 	ldw	ra,4(sp)
  80efd4:	df000017 	ldw	fp,0(sp)
  80efd8:	dec00204 	addi	sp,sp,8
  80efdc:	f800283a 	ret

0080efe0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80efe0:	defff904 	addi	sp,sp,-28
  80efe4:	dfc00615 	stw	ra,24(sp)
  80efe8:	df000515 	stw	fp,20(sp)
  80efec:	df000504 	addi	fp,sp,20
  80eff0:	e13ffd15 	stw	r4,-12(fp)
  80eff4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80eff8:	e0bffe17 	ldw	r2,-8(fp)
  80effc:	10800017 	ldw	r2,0(r2)
  80f000:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80f004:	e13ffd17 	ldw	r4,-12(fp)
  80f008:	08036300 	call	803630 <strlen>
  80f00c:	10800044 	addi	r2,r2,1
  80f010:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f014:	00000d06 	br	80f04c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80f018:	e0bffc17 	ldw	r2,-16(fp)
  80f01c:	11000217 	ldw	r4,8(r2)
  80f020:	e1bffb17 	ldw	r6,-20(fp)
  80f024:	e17ffd17 	ldw	r5,-12(fp)
  80f028:	080f9380 	call	80f938 <memcmp>
  80f02c:	1004c03a 	cmpne	r2,r2,zero
  80f030:	1000031e 	bne	r2,zero,80f040 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80f034:	e0bffc17 	ldw	r2,-16(fp)
  80f038:	e0bfff15 	stw	r2,-4(fp)
  80f03c:	00000706 	br	80f05c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80f040:	e0bffc17 	ldw	r2,-16(fp)
  80f044:	10800017 	ldw	r2,0(r2)
  80f048:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f04c:	e0fffe17 	ldw	r3,-8(fp)
  80f050:	e0bffc17 	ldw	r2,-16(fp)
  80f054:	10fff01e 	bne	r2,r3,80f018 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80f058:	e03fff15 	stw	zero,-4(fp)
  80f05c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f060:	e037883a 	mov	sp,fp
  80f064:	dfc00117 	ldw	ra,4(sp)
  80f068:	df000017 	ldw	fp,0(sp)
  80f06c:	dec00204 	addi	sp,sp,8
  80f070:	f800283a 	ret

0080f074 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80f074:	defffe04 	addi	sp,sp,-8
  80f078:	dfc00115 	stw	ra,4(sp)
  80f07c:	df000015 	stw	fp,0(sp)
  80f080:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80f084:	0009883a 	mov	r4,zero
  80f088:	01480004 	movi	r5,8192
  80f08c:	080f85c0 	call	80f85c <alt_icache_flush>
#endif
}
  80f090:	e037883a 	mov	sp,fp
  80f094:	dfc00117 	ldw	ra,4(sp)
  80f098:	df000017 	ldw	fp,0(sp)
  80f09c:	dec00204 	addi	sp,sp,8
  80f0a0:	f800283a 	ret

0080f0a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80f0a4:	defff904 	addi	sp,sp,-28
  80f0a8:	dfc00615 	stw	ra,24(sp)
  80f0ac:	df000515 	stw	fp,20(sp)
  80f0b0:	df000504 	addi	fp,sp,20
  80f0b4:	e13ffc15 	stw	r4,-16(fp)
  80f0b8:	e17ffd15 	stw	r5,-12(fp)
  80f0bc:	e1bffe15 	stw	r6,-8(fp)
  80f0c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80f0c4:	e13ffd17 	ldw	r4,-12(fp)
  80f0c8:	e17ffe17 	ldw	r5,-8(fp)
  80f0cc:	e1bfff17 	ldw	r6,-4(fp)
  80f0d0:	080f47c0 	call	80f47c <open>
  80f0d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80f0d8:	e0bffb17 	ldw	r2,-20(fp)
  80f0dc:	1004803a 	cmplt	r2,r2,zero
  80f0e0:	10001c1e 	bne	r2,zero,80f154 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80f0e4:	e0bffb17 	ldw	r2,-20(fp)
  80f0e8:	00c02074 	movhi	r3,129
  80f0ec:	18c32404 	addi	r3,r3,3216
  80f0f0:	10800324 	muli	r2,r2,12
  80f0f4:	10c5883a 	add	r2,r2,r3
  80f0f8:	10c00017 	ldw	r3,0(r2)
  80f0fc:	e0bffc17 	ldw	r2,-16(fp)
  80f100:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80f104:	e0bffb17 	ldw	r2,-20(fp)
  80f108:	00c02074 	movhi	r3,129
  80f10c:	18c32404 	addi	r3,r3,3216
  80f110:	10800324 	muli	r2,r2,12
  80f114:	10c5883a 	add	r2,r2,r3
  80f118:	10800104 	addi	r2,r2,4
  80f11c:	10c00017 	ldw	r3,0(r2)
  80f120:	e0bffc17 	ldw	r2,-16(fp)
  80f124:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80f128:	e0bffb17 	ldw	r2,-20(fp)
  80f12c:	00c02074 	movhi	r3,129
  80f130:	18c32404 	addi	r3,r3,3216
  80f134:	10800324 	muli	r2,r2,12
  80f138:	10c5883a 	add	r2,r2,r3
  80f13c:	10800204 	addi	r2,r2,8
  80f140:	10c00017 	ldw	r3,0(r2)
  80f144:	e0bffc17 	ldw	r2,-16(fp)
  80f148:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80f14c:	e13ffb17 	ldw	r4,-20(fp)
  80f150:	080c70c0 	call	80c70c <alt_release_fd>
  }
} 
  80f154:	e037883a 	mov	sp,fp
  80f158:	dfc00117 	ldw	ra,4(sp)
  80f15c:	df000017 	ldw	fp,0(sp)
  80f160:	dec00204 	addi	sp,sp,8
  80f164:	f800283a 	ret

0080f168 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80f168:	defffb04 	addi	sp,sp,-20
  80f16c:	dfc00415 	stw	ra,16(sp)
  80f170:	df000315 	stw	fp,12(sp)
  80f174:	df000304 	addi	fp,sp,12
  80f178:	e13ffd15 	stw	r4,-12(fp)
  80f17c:	e17ffe15 	stw	r5,-8(fp)
  80f180:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80f184:	01002074 	movhi	r4,129
  80f188:	21032704 	addi	r4,r4,3228
  80f18c:	e17ffd17 	ldw	r5,-12(fp)
  80f190:	01800044 	movi	r6,1
  80f194:	01c07fc4 	movi	r7,511
  80f198:	080f0a40 	call	80f0a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80f19c:	01002074 	movhi	r4,129
  80f1a0:	21032404 	addi	r4,r4,3216
  80f1a4:	e17ffe17 	ldw	r5,-8(fp)
  80f1a8:	000d883a 	mov	r6,zero
  80f1ac:	01c07fc4 	movi	r7,511
  80f1b0:	080f0a40 	call	80f0a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80f1b4:	01002074 	movhi	r4,129
  80f1b8:	21032a04 	addi	r4,r4,3240
  80f1bc:	e17fff17 	ldw	r5,-4(fp)
  80f1c0:	01800044 	movi	r6,1
  80f1c4:	01c07fc4 	movi	r7,511
  80f1c8:	080f0a40 	call	80f0a4 <alt_open_fd>
}  
  80f1cc:	e037883a 	mov	sp,fp
  80f1d0:	dfc00117 	ldw	ra,4(sp)
  80f1d4:	df000017 	ldw	fp,0(sp)
  80f1d8:	dec00204 	addi	sp,sp,8
  80f1dc:	f800283a 	ret

0080f1e0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80f1e0:	deffef04 	addi	sp,sp,-68
  80f1e4:	df001015 	stw	fp,64(sp)
  80f1e8:	df001004 	addi	fp,sp,64
  80f1ec:	e13ffc15 	stw	r4,-16(fp)
  80f1f0:	e17ffd15 	stw	r5,-12(fp)
  80f1f4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80f1f8:	00bffa84 	movi	r2,-22
  80f1fc:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80f200:	e0bffc17 	ldw	r2,-16(fp)
  80f204:	10800828 	cmpgeui	r2,r2,32
  80f208:	1000601e 	bne	r2,zero,80f38c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f20c:	0005303a 	rdctl	r2,status
  80f210:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f214:	e0fff917 	ldw	r3,-28(fp)
  80f218:	00bfff84 	movi	r2,-2
  80f21c:	1884703a 	and	r2,r3,r2
  80f220:	1001703a 	wrctl	status,r2
  
  return context;
  80f224:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80f228:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80f22c:	e0bffc17 	ldw	r2,-16(fp)
  80f230:	00c02074 	movhi	r3,129
  80f234:	18cf5c04 	addi	r3,r3,15728
  80f238:	100490fa 	slli	r2,r2,3
  80f23c:	10c7883a 	add	r3,r2,r3
  80f240:	e0bffe17 	ldw	r2,-8(fp)
  80f244:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80f248:	e0bffc17 	ldw	r2,-16(fp)
  80f24c:	00c02074 	movhi	r3,129
  80f250:	18cf5c04 	addi	r3,r3,15728
  80f254:	100490fa 	slli	r2,r2,3
  80f258:	10c5883a 	add	r2,r2,r3
  80f25c:	10c00104 	addi	r3,r2,4
  80f260:	e0bffd17 	ldw	r2,-12(fp)
  80f264:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80f268:	e0bffe17 	ldw	r2,-8(fp)
  80f26c:	1005003a 	cmpeq	r2,r2,zero
  80f270:	1000201e 	bne	r2,zero,80f2f4 <alt_irq_register+0x114>
  80f274:	e0bffc17 	ldw	r2,-16(fp)
  80f278:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f27c:	0005303a 	rdctl	r2,status
  80f280:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f284:	e0fff617 	ldw	r3,-40(fp)
  80f288:	00bfff84 	movi	r2,-2
  80f28c:	1884703a 	and	r2,r3,r2
  80f290:	1001703a 	wrctl	status,r2
  
  return context;
  80f294:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f298:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80f29c:	e0fff717 	ldw	r3,-36(fp)
  80f2a0:	00800044 	movi	r2,1
  80f2a4:	10c4983a 	sll	r2,r2,r3
  80f2a8:	1007883a 	mov	r3,r2
  80f2ac:	00802074 	movhi	r2,129
  80f2b0:	108f3004 	addi	r2,r2,15552
  80f2b4:	10800017 	ldw	r2,0(r2)
  80f2b8:	1886b03a 	or	r3,r3,r2
  80f2bc:	00802074 	movhi	r2,129
  80f2c0:	108f3004 	addi	r2,r2,15552
  80f2c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f2c8:	00802074 	movhi	r2,129
  80f2cc:	108f3004 	addi	r2,r2,15552
  80f2d0:	10800017 	ldw	r2,0(r2)
  80f2d4:	100170fa 	wrctl	ienable,r2
  80f2d8:	e0bff817 	ldw	r2,-32(fp)
  80f2dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2e0:	e0bff517 	ldw	r2,-44(fp)
  80f2e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f2e8:	0005883a 	mov	r2,zero
  80f2ec:	e0bfff15 	stw	r2,-4(fp)
  80f2f0:	00002006 	br	80f374 <alt_irq_register+0x194>
  80f2f4:	e0bffc17 	ldw	r2,-16(fp)
  80f2f8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f2fc:	0005303a 	rdctl	r2,status
  80f300:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f304:	e0fff217 	ldw	r3,-56(fp)
  80f308:	00bfff84 	movi	r2,-2
  80f30c:	1884703a 	and	r2,r3,r2
  80f310:	1001703a 	wrctl	status,r2
  
  return context;
  80f314:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f318:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80f31c:	e0fff317 	ldw	r3,-52(fp)
  80f320:	00800044 	movi	r2,1
  80f324:	10c4983a 	sll	r2,r2,r3
  80f328:	0084303a 	nor	r2,zero,r2
  80f32c:	1007883a 	mov	r3,r2
  80f330:	00802074 	movhi	r2,129
  80f334:	108f3004 	addi	r2,r2,15552
  80f338:	10800017 	ldw	r2,0(r2)
  80f33c:	1886703a 	and	r3,r3,r2
  80f340:	00802074 	movhi	r2,129
  80f344:	108f3004 	addi	r2,r2,15552
  80f348:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f34c:	00802074 	movhi	r2,129
  80f350:	108f3004 	addi	r2,r2,15552
  80f354:	10800017 	ldw	r2,0(r2)
  80f358:	100170fa 	wrctl	ienable,r2
  80f35c:	e0bff417 	ldw	r2,-48(fp)
  80f360:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f364:	e0bff117 	ldw	r2,-60(fp)
  80f368:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f36c:	0005883a 	mov	r2,zero
  80f370:	e0bfff15 	stw	r2,-4(fp)
  80f374:	e0bfff17 	ldw	r2,-4(fp)
  80f378:	e0bffb15 	stw	r2,-20(fp)
  80f37c:	e0bffa17 	ldw	r2,-24(fp)
  80f380:	e0bff015 	stw	r2,-64(fp)
  80f384:	e0bff017 	ldw	r2,-64(fp)
  80f388:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80f38c:	e0bffb17 	ldw	r2,-20(fp)
}
  80f390:	e037883a 	mov	sp,fp
  80f394:	df000017 	ldw	fp,0(sp)
  80f398:	dec00104 	addi	sp,sp,4
  80f39c:	f800283a 	ret

0080f3a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f3a0:	defffc04 	addi	sp,sp,-16
  80f3a4:	df000315 	stw	fp,12(sp)
  80f3a8:	df000304 	addi	fp,sp,12
  80f3ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f3b0:	e0bffe17 	ldw	r2,-8(fp)
  80f3b4:	10800217 	ldw	r2,8(r2)
  80f3b8:	10d00034 	orhi	r3,r2,16384
  80f3bc:	e0bffe17 	ldw	r2,-8(fp)
  80f3c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f3c4:	e03ffd15 	stw	zero,-12(fp)
  80f3c8:	00002006 	br	80f44c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f3cc:	e0bffd17 	ldw	r2,-12(fp)
  80f3d0:	00c02074 	movhi	r3,129
  80f3d4:	18c32404 	addi	r3,r3,3216
  80f3d8:	10800324 	muli	r2,r2,12
  80f3dc:	10c5883a 	add	r2,r2,r3
  80f3e0:	10c00017 	ldw	r3,0(r2)
  80f3e4:	e0bffe17 	ldw	r2,-8(fp)
  80f3e8:	10800017 	ldw	r2,0(r2)
  80f3ec:	1880141e 	bne	r3,r2,80f440 <alt_file_locked+0xa0>
  80f3f0:	e0bffd17 	ldw	r2,-12(fp)
  80f3f4:	00c02074 	movhi	r3,129
  80f3f8:	18c32404 	addi	r3,r3,3216
  80f3fc:	10800324 	muli	r2,r2,12
  80f400:	10c5883a 	add	r2,r2,r3
  80f404:	10800204 	addi	r2,r2,8
  80f408:	10800017 	ldw	r2,0(r2)
  80f40c:	1004403a 	cmpge	r2,r2,zero
  80f410:	10000b1e 	bne	r2,zero,80f440 <alt_file_locked+0xa0>
  80f414:	e0bffd17 	ldw	r2,-12(fp)
  80f418:	10800324 	muli	r2,r2,12
  80f41c:	1007883a 	mov	r3,r2
  80f420:	00802074 	movhi	r2,129
  80f424:	10832404 	addi	r2,r2,3216
  80f428:	1887883a 	add	r3,r3,r2
  80f42c:	e0bffe17 	ldw	r2,-8(fp)
  80f430:	18800326 	beq	r3,r2,80f440 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f434:	00bffcc4 	movi	r2,-13
  80f438:	e0bfff15 	stw	r2,-4(fp)
  80f43c:	00000a06 	br	80f468 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f440:	e0bffd17 	ldw	r2,-12(fp)
  80f444:	10800044 	addi	r2,r2,1
  80f448:	e0bffd15 	stw	r2,-12(fp)
  80f44c:	00802074 	movhi	r2,129
  80f450:	10881404 	addi	r2,r2,8272
  80f454:	10800017 	ldw	r2,0(r2)
  80f458:	1007883a 	mov	r3,r2
  80f45c:	e0bffd17 	ldw	r2,-12(fp)
  80f460:	18bfda2e 	bgeu	r3,r2,80f3cc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f464:	e03fff15 	stw	zero,-4(fp)
  80f468:	e0bfff17 	ldw	r2,-4(fp)
}
  80f46c:	e037883a 	mov	sp,fp
  80f470:	df000017 	ldw	fp,0(sp)
  80f474:	dec00104 	addi	sp,sp,4
  80f478:	f800283a 	ret

0080f47c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f47c:	defff404 	addi	sp,sp,-48
  80f480:	dfc00b15 	stw	ra,44(sp)
  80f484:	df000a15 	stw	fp,40(sp)
  80f488:	df000a04 	addi	fp,sp,40
  80f48c:	e13ffb15 	stw	r4,-20(fp)
  80f490:	e17ffc15 	stw	r5,-16(fp)
  80f494:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f498:	00bfffc4 	movi	r2,-1
  80f49c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80f4a0:	00bffb44 	movi	r2,-19
  80f4a4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80f4a8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f4ac:	e13ffb17 	ldw	r4,-20(fp)
  80f4b0:	01402074 	movhi	r5,129
  80f4b4:	29481204 	addi	r5,r5,8264
  80f4b8:	080efe00 	call	80efe0 <alt_find_dev>
  80f4bc:	e0bffa15 	stw	r2,-24(fp)
  80f4c0:	e0bffa17 	ldw	r2,-24(fp)
  80f4c4:	1004c03a 	cmpne	r2,r2,zero
  80f4c8:	1000051e 	bne	r2,zero,80f4e0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f4cc:	e13ffb17 	ldw	r4,-20(fp)
  80f4d0:	080f6840 	call	80f684 <alt_find_file>
  80f4d4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80f4d8:	00800044 	movi	r2,1
  80f4dc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f4e0:	e0bffa17 	ldw	r2,-24(fp)
  80f4e4:	1005003a 	cmpeq	r2,r2,zero
  80f4e8:	1000301e 	bne	r2,zero,80f5ac <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f4ec:	e13ffa17 	ldw	r4,-24(fp)
  80f4f0:	080f7a40 	call	80f7a4 <alt_get_fd>
  80f4f4:	e0bff815 	stw	r2,-32(fp)
  80f4f8:	e0bff817 	ldw	r2,-32(fp)
  80f4fc:	1004403a 	cmpge	r2,r2,zero
  80f500:	1000031e 	bne	r2,zero,80f510 <open+0x94>
    {
      status = index;
  80f504:	e0bff817 	ldw	r2,-32(fp)
  80f508:	e0bff715 	stw	r2,-36(fp)
  80f50c:	00002906 	br	80f5b4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f510:	e0bff817 	ldw	r2,-32(fp)
  80f514:	10800324 	muli	r2,r2,12
  80f518:	1007883a 	mov	r3,r2
  80f51c:	00802074 	movhi	r2,129
  80f520:	10832404 	addi	r2,r2,3216
  80f524:	1885883a 	add	r2,r3,r2
  80f528:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f52c:	e0fffc17 	ldw	r3,-16(fp)
  80f530:	00900034 	movhi	r2,16384
  80f534:	10bfffc4 	addi	r2,r2,-1
  80f538:	1886703a 	and	r3,r3,r2
  80f53c:	e0bff917 	ldw	r2,-28(fp)
  80f540:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f544:	e0bff617 	ldw	r2,-40(fp)
  80f548:	1004c03a 	cmpne	r2,r2,zero
  80f54c:	1000061e 	bne	r2,zero,80f568 <open+0xec>
  80f550:	e13ff917 	ldw	r4,-28(fp)
  80f554:	080f3a00 	call	80f3a0 <alt_file_locked>
  80f558:	e0bff715 	stw	r2,-36(fp)
  80f55c:	e0bff717 	ldw	r2,-36(fp)
  80f560:	1004803a 	cmplt	r2,r2,zero
  80f564:	1000131e 	bne	r2,zero,80f5b4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f568:	e0bffa17 	ldw	r2,-24(fp)
  80f56c:	10800317 	ldw	r2,12(r2)
  80f570:	1005003a 	cmpeq	r2,r2,zero
  80f574:	1000091e 	bne	r2,zero,80f59c <open+0x120>
  80f578:	e0bffa17 	ldw	r2,-24(fp)
  80f57c:	10800317 	ldw	r2,12(r2)
  80f580:	e13ff917 	ldw	r4,-28(fp)
  80f584:	e17ffb17 	ldw	r5,-20(fp)
  80f588:	e1bffc17 	ldw	r6,-16(fp)
  80f58c:	e1fffd17 	ldw	r7,-12(fp)
  80f590:	103ee83a 	callr	r2
  80f594:	e0bfff15 	stw	r2,-4(fp)
  80f598:	00000106 	br	80f5a0 <open+0x124>
  80f59c:	e03fff15 	stw	zero,-4(fp)
  80f5a0:	e0bfff17 	ldw	r2,-4(fp)
  80f5a4:	e0bff715 	stw	r2,-36(fp)
  80f5a8:	00000206 	br	80f5b4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f5ac:	00bffb44 	movi	r2,-19
  80f5b0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f5b4:	e0bff717 	ldw	r2,-36(fp)
  80f5b8:	1004403a 	cmpge	r2,r2,zero
  80f5bc:	1000091e 	bne	r2,zero,80f5e4 <open+0x168>
  {
    alt_release_fd (index);  
  80f5c0:	e13ff817 	ldw	r4,-32(fp)
  80f5c4:	080c70c0 	call	80c70c <alt_release_fd>
    ALT_ERRNO = -status;
  80f5c8:	080f6040 	call	80f604 <alt_get_errno>
  80f5cc:	e0fff717 	ldw	r3,-36(fp)
  80f5d0:	00c7c83a 	sub	r3,zero,r3
  80f5d4:	10c00015 	stw	r3,0(r2)
    return -1;
  80f5d8:	00bfffc4 	movi	r2,-1
  80f5dc:	e0bffe15 	stw	r2,-8(fp)
  80f5e0:	00000206 	br	80f5ec <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80f5e4:	e0bff817 	ldw	r2,-32(fp)
  80f5e8:	e0bffe15 	stw	r2,-8(fp)
  80f5ec:	e0bffe17 	ldw	r2,-8(fp)
}
  80f5f0:	e037883a 	mov	sp,fp
  80f5f4:	dfc00117 	ldw	ra,4(sp)
  80f5f8:	df000017 	ldw	fp,0(sp)
  80f5fc:	dec00204 	addi	sp,sp,8
  80f600:	f800283a 	ret

0080f604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f604:	defffd04 	addi	sp,sp,-12
  80f608:	dfc00215 	stw	ra,8(sp)
  80f60c:	df000115 	stw	fp,4(sp)
  80f610:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f614:	00802074 	movhi	r2,129
  80f618:	10881504 	addi	r2,r2,8276
  80f61c:	10800017 	ldw	r2,0(r2)
  80f620:	1005003a 	cmpeq	r2,r2,zero
  80f624:	1000061e 	bne	r2,zero,80f640 <alt_get_errno+0x3c>
  80f628:	00802074 	movhi	r2,129
  80f62c:	10881504 	addi	r2,r2,8276
  80f630:	10800017 	ldw	r2,0(r2)
  80f634:	103ee83a 	callr	r2
  80f638:	e0bfff15 	stw	r2,-4(fp)
  80f63c:	00000306 	br	80f64c <alt_get_errno+0x48>
  80f640:	00802074 	movhi	r2,129
  80f644:	108f2504 	addi	r2,r2,15508
  80f648:	e0bfff15 	stw	r2,-4(fp)
  80f64c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f650:	e037883a 	mov	sp,fp
  80f654:	dfc00117 	ldw	ra,4(sp)
  80f658:	df000017 	ldw	fp,0(sp)
  80f65c:	dec00204 	addi	sp,sp,8
  80f660:	f800283a 	ret

0080f664 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80f664:	deffff04 	addi	sp,sp,-4
  80f668:	df000015 	stw	fp,0(sp)
  80f66c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80f670:	000170fa 	wrctl	ienable,zero
}
  80f674:	e037883a 	mov	sp,fp
  80f678:	df000017 	ldw	fp,0(sp)
  80f67c:	dec00104 	addi	sp,sp,4
  80f680:	f800283a 	ret

0080f684 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80f684:	defffa04 	addi	sp,sp,-24
  80f688:	dfc00515 	stw	ra,20(sp)
  80f68c:	df000415 	stw	fp,16(sp)
  80f690:	df000404 	addi	fp,sp,16
  80f694:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80f698:	00802074 	movhi	r2,129
  80f69c:	10881004 	addi	r2,r2,8256
  80f6a0:	10800017 	ldw	r2,0(r2)
  80f6a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f6a8:	00003306 	br	80f778 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80f6ac:	e0bffd17 	ldw	r2,-12(fp)
  80f6b0:	11000217 	ldw	r4,8(r2)
  80f6b4:	08036300 	call	803630 <strlen>
  80f6b8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80f6bc:	e0bffd17 	ldw	r2,-12(fp)
  80f6c0:	10c00217 	ldw	r3,8(r2)
  80f6c4:	e0bffc17 	ldw	r2,-16(fp)
  80f6c8:	1885883a 	add	r2,r3,r2
  80f6cc:	10bfffc4 	addi	r2,r2,-1
  80f6d0:	10800003 	ldbu	r2,0(r2)
  80f6d4:	10803fcc 	andi	r2,r2,255
  80f6d8:	1080201c 	xori	r2,r2,128
  80f6dc:	10bfe004 	addi	r2,r2,-128
  80f6e0:	10800bd8 	cmpnei	r2,r2,47
  80f6e4:	1000031e 	bne	r2,zero,80f6f4 <alt_find_file+0x70>
    {
      len -= 1;
  80f6e8:	e0bffc17 	ldw	r2,-16(fp)
  80f6ec:	10bfffc4 	addi	r2,r2,-1
  80f6f0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f6f4:	e0bffc17 	ldw	r2,-16(fp)
  80f6f8:	1007883a 	mov	r3,r2
  80f6fc:	e0bffe17 	ldw	r2,-8(fp)
  80f700:	1885883a 	add	r2,r3,r2
  80f704:	10800003 	ldbu	r2,0(r2)
  80f708:	10803fcc 	andi	r2,r2,255
  80f70c:	1080201c 	xori	r2,r2,128
  80f710:	10bfe004 	addi	r2,r2,-128
  80f714:	10800be0 	cmpeqi	r2,r2,47
  80f718:	10000a1e 	bne	r2,zero,80f744 <alt_find_file+0xc0>
  80f71c:	e0bffc17 	ldw	r2,-16(fp)
  80f720:	1007883a 	mov	r3,r2
  80f724:	e0bffe17 	ldw	r2,-8(fp)
  80f728:	1885883a 	add	r2,r3,r2
  80f72c:	10800003 	ldbu	r2,0(r2)
  80f730:	10803fcc 	andi	r2,r2,255
  80f734:	1080201c 	xori	r2,r2,128
  80f738:	10bfe004 	addi	r2,r2,-128
  80f73c:	1004c03a 	cmpne	r2,r2,zero
  80f740:	10000a1e 	bne	r2,zero,80f76c <alt_find_file+0xe8>
  80f744:	e0bffd17 	ldw	r2,-12(fp)
  80f748:	11000217 	ldw	r4,8(r2)
  80f74c:	e1bffc17 	ldw	r6,-16(fp)
  80f750:	e17ffe17 	ldw	r5,-8(fp)
  80f754:	080f9380 	call	80f938 <memcmp>
  80f758:	1004c03a 	cmpne	r2,r2,zero
  80f75c:	1000031e 	bne	r2,zero,80f76c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80f760:	e0bffd17 	ldw	r2,-12(fp)
  80f764:	e0bfff15 	stw	r2,-4(fp)
  80f768:	00000806 	br	80f78c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80f76c:	e0bffd17 	ldw	r2,-12(fp)
  80f770:	10800017 	ldw	r2,0(r2)
  80f774:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f778:	00c02074 	movhi	r3,129
  80f77c:	18c81004 	addi	r3,r3,8256
  80f780:	e0bffd17 	ldw	r2,-12(fp)
  80f784:	10ffc91e 	bne	r2,r3,80f6ac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80f788:	e03fff15 	stw	zero,-4(fp)
  80f78c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f790:	e037883a 	mov	sp,fp
  80f794:	dfc00117 	ldw	ra,4(sp)
  80f798:	df000017 	ldw	fp,0(sp)
  80f79c:	dec00204 	addi	sp,sp,8
  80f7a0:	f800283a 	ret

0080f7a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80f7a4:	defffc04 	addi	sp,sp,-16
  80f7a8:	df000315 	stw	fp,12(sp)
  80f7ac:	df000304 	addi	fp,sp,12
  80f7b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80f7b4:	00bffa04 	movi	r2,-24
  80f7b8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f7bc:	e03ffe15 	stw	zero,-8(fp)
  80f7c0:	00001e06 	br	80f83c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80f7c4:	e0bffe17 	ldw	r2,-8(fp)
  80f7c8:	00c02074 	movhi	r3,129
  80f7cc:	18c32404 	addi	r3,r3,3216
  80f7d0:	10800324 	muli	r2,r2,12
  80f7d4:	10c5883a 	add	r2,r2,r3
  80f7d8:	10800017 	ldw	r2,0(r2)
  80f7dc:	1004c03a 	cmpne	r2,r2,zero
  80f7e0:	1000131e 	bne	r2,zero,80f830 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80f7e4:	e0bffe17 	ldw	r2,-8(fp)
  80f7e8:	00c02074 	movhi	r3,129
  80f7ec:	18c32404 	addi	r3,r3,3216
  80f7f0:	10800324 	muli	r2,r2,12
  80f7f4:	10c7883a 	add	r3,r2,r3
  80f7f8:	e0bfff17 	ldw	r2,-4(fp)
  80f7fc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80f800:	00802074 	movhi	r2,129
  80f804:	10881404 	addi	r2,r2,8272
  80f808:	10c00017 	ldw	r3,0(r2)
  80f80c:	e0bffe17 	ldw	r2,-8(fp)
  80f810:	1880040e 	bge	r3,r2,80f824 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80f814:	00c02074 	movhi	r3,129
  80f818:	18c81404 	addi	r3,r3,8272
  80f81c:	e0bffe17 	ldw	r2,-8(fp)
  80f820:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80f824:	e0bffe17 	ldw	r2,-8(fp)
  80f828:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80f82c:	00000606 	br	80f848 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f830:	e0bffe17 	ldw	r2,-8(fp)
  80f834:	10800044 	addi	r2,r2,1
  80f838:	e0bffe15 	stw	r2,-8(fp)
  80f83c:	e0bffe17 	ldw	r2,-8(fp)
  80f840:	10800810 	cmplti	r2,r2,32
  80f844:	103fdf1e 	bne	r2,zero,80f7c4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80f848:	e0bffd17 	ldw	r2,-12(fp)
}
  80f84c:	e037883a 	mov	sp,fp
  80f850:	df000017 	ldw	fp,0(sp)
  80f854:	dec00104 	addi	sp,sp,4
  80f858:	f800283a 	ret

0080f85c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80f85c:	defffb04 	addi	sp,sp,-20
  80f860:	df000415 	stw	fp,16(sp)
  80f864:	df000404 	addi	fp,sp,16
  80f868:	e13ffe15 	stw	r4,-8(fp)
  80f86c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80f870:	e0bfff17 	ldw	r2,-4(fp)
  80f874:	10880070 	cmpltui	r2,r2,8193
  80f878:	1000021e 	bne	r2,zero,80f884 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80f87c:	00880004 	movi	r2,8192
  80f880:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80f884:	e0fffe17 	ldw	r3,-8(fp)
  80f888:	e0bfff17 	ldw	r2,-4(fp)
  80f88c:	1885883a 	add	r2,r3,r2
  80f890:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f894:	e0bffe17 	ldw	r2,-8(fp)
  80f898:	e0bffd15 	stw	r2,-12(fp)
  80f89c:	00000506 	br	80f8b4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80f8a0:	e0bffd17 	ldw	r2,-12(fp)
  80f8a4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f8a8:	e0bffd17 	ldw	r2,-12(fp)
  80f8ac:	10800804 	addi	r2,r2,32
  80f8b0:	e0bffd15 	stw	r2,-12(fp)
  80f8b4:	e0fffd17 	ldw	r3,-12(fp)
  80f8b8:	e0bffc17 	ldw	r2,-16(fp)
  80f8bc:	18bff836 	bltu	r3,r2,80f8a0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80f8c0:	e0bffe17 	ldw	r2,-8(fp)
  80f8c4:	108007cc 	andi	r2,r2,31
  80f8c8:	1005003a 	cmpeq	r2,r2,zero
  80f8cc:	1000021e 	bne	r2,zero,80f8d8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80f8d0:	e0bffd17 	ldw	r2,-12(fp)
  80f8d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80f8d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80f8dc:	e037883a 	mov	sp,fp
  80f8e0:	df000017 	ldw	fp,0(sp)
  80f8e4:	dec00104 	addi	sp,sp,4
  80f8e8:	f800283a 	ret

0080f8ec <atexit>:
  80f8ec:	200b883a 	mov	r5,r4
  80f8f0:	000d883a 	mov	r6,zero
  80f8f4:	0009883a 	mov	r4,zero
  80f8f8:	000f883a 	mov	r7,zero
  80f8fc:	080f9ac1 	jmpi	80f9ac <__register_exitproc>

0080f900 <exit>:
  80f900:	defffe04 	addi	sp,sp,-8
  80f904:	000b883a 	mov	r5,zero
  80f908:	dc000015 	stw	r16,0(sp)
  80f90c:	dfc00115 	stw	ra,4(sp)
  80f910:	2021883a 	mov	r16,r4
  80f914:	080fae40 	call	80fae4 <__call_exitprocs>
  80f918:	00802074 	movhi	r2,129
  80f91c:	10880d04 	addi	r2,r2,8244
  80f920:	11000017 	ldw	r4,0(r2)
  80f924:	20800f17 	ldw	r2,60(r4)
  80f928:	10000126 	beq	r2,zero,80f930 <exit+0x30>
  80f92c:	103ee83a 	callr	r2
  80f930:	8009883a 	mov	r4,r16
  80f934:	080fcd40 	call	80fcd4 <_exit>

0080f938 <memcmp>:
  80f938:	00c000c4 	movi	r3,3
  80f93c:	1980032e 	bgeu	r3,r6,80f94c <memcmp+0x14>
  80f940:	2144b03a 	or	r2,r4,r5
  80f944:	10c4703a 	and	r2,r2,r3
  80f948:	10000f26 	beq	r2,zero,80f988 <memcmp+0x50>
  80f94c:	31ffffc4 	addi	r7,r6,-1
  80f950:	3000061e 	bne	r6,zero,80f96c <memcmp+0x34>
  80f954:	00000a06 	br	80f980 <memcmp+0x48>
  80f958:	39ffffc4 	addi	r7,r7,-1
  80f95c:	00bfffc4 	movi	r2,-1
  80f960:	21000044 	addi	r4,r4,1
  80f964:	29400044 	addi	r5,r5,1
  80f968:	38800526 	beq	r7,r2,80f980 <memcmp+0x48>
  80f96c:	20c00003 	ldbu	r3,0(r4)
  80f970:	28800003 	ldbu	r2,0(r5)
  80f974:	18bff826 	beq	r3,r2,80f958 <memcmp+0x20>
  80f978:	1885c83a 	sub	r2,r3,r2
  80f97c:	f800283a 	ret
  80f980:	0005883a 	mov	r2,zero
  80f984:	f800283a 	ret
  80f988:	180f883a 	mov	r7,r3
  80f98c:	20c00017 	ldw	r3,0(r4)
  80f990:	28800017 	ldw	r2,0(r5)
  80f994:	18bfed1e 	bne	r3,r2,80f94c <memcmp+0x14>
  80f998:	31bfff04 	addi	r6,r6,-4
  80f99c:	21000104 	addi	r4,r4,4
  80f9a0:	29400104 	addi	r5,r5,4
  80f9a4:	39bff936 	bltu	r7,r6,80f98c <memcmp+0x54>
  80f9a8:	003fe806 	br	80f94c <memcmp+0x14>

0080f9ac <__register_exitproc>:
  80f9ac:	defffa04 	addi	sp,sp,-24
  80f9b0:	00802074 	movhi	r2,129
  80f9b4:	10880d04 	addi	r2,r2,8244
  80f9b8:	dc000015 	stw	r16,0(sp)
  80f9bc:	14000017 	ldw	r16,0(r2)
  80f9c0:	dd000415 	stw	r20,16(sp)
  80f9c4:	2829883a 	mov	r20,r5
  80f9c8:	81405217 	ldw	r5,328(r16)
  80f9cc:	dcc00315 	stw	r19,12(sp)
  80f9d0:	dc800215 	stw	r18,8(sp)
  80f9d4:	dc400115 	stw	r17,4(sp)
  80f9d8:	dfc00515 	stw	ra,20(sp)
  80f9dc:	2023883a 	mov	r17,r4
  80f9e0:	3027883a 	mov	r19,r6
  80f9e4:	3825883a 	mov	r18,r7
  80f9e8:	28002526 	beq	r5,zero,80fa80 <__register_exitproc+0xd4>
  80f9ec:	29000117 	ldw	r4,4(r5)
  80f9f0:	008007c4 	movi	r2,31
  80f9f4:	11002716 	blt	r2,r4,80fa94 <__register_exitproc+0xe8>
  80f9f8:	8800101e 	bne	r17,zero,80fa3c <__register_exitproc+0x90>
  80f9fc:	2105883a 	add	r2,r4,r4
  80fa00:	1085883a 	add	r2,r2,r2
  80fa04:	20c00044 	addi	r3,r4,1
  80fa08:	1145883a 	add	r2,r2,r5
  80fa0c:	0009883a 	mov	r4,zero
  80fa10:	15000215 	stw	r20,8(r2)
  80fa14:	28c00115 	stw	r3,4(r5)
  80fa18:	2005883a 	mov	r2,r4
  80fa1c:	dfc00517 	ldw	ra,20(sp)
  80fa20:	dd000417 	ldw	r20,16(sp)
  80fa24:	dcc00317 	ldw	r19,12(sp)
  80fa28:	dc800217 	ldw	r18,8(sp)
  80fa2c:	dc400117 	ldw	r17,4(sp)
  80fa30:	dc000017 	ldw	r16,0(sp)
  80fa34:	dec00604 	addi	sp,sp,24
  80fa38:	f800283a 	ret
  80fa3c:	29802204 	addi	r6,r5,136
  80fa40:	00800044 	movi	r2,1
  80fa44:	110e983a 	sll	r7,r2,r4
  80fa48:	30c04017 	ldw	r3,256(r6)
  80fa4c:	2105883a 	add	r2,r4,r4
  80fa50:	1085883a 	add	r2,r2,r2
  80fa54:	1185883a 	add	r2,r2,r6
  80fa58:	19c6b03a 	or	r3,r3,r7
  80fa5c:	14802015 	stw	r18,128(r2)
  80fa60:	14c00015 	stw	r19,0(r2)
  80fa64:	00800084 	movi	r2,2
  80fa68:	30c04015 	stw	r3,256(r6)
  80fa6c:	88bfe31e 	bne	r17,r2,80f9fc <__register_exitproc+0x50>
  80fa70:	30804117 	ldw	r2,260(r6)
  80fa74:	11c4b03a 	or	r2,r2,r7
  80fa78:	30804115 	stw	r2,260(r6)
  80fa7c:	003fdf06 	br	80f9fc <__register_exitproc+0x50>
  80fa80:	00802074 	movhi	r2,129
  80fa84:	108f9c04 	addi	r2,r2,15984
  80fa88:	100b883a 	mov	r5,r2
  80fa8c:	80805215 	stw	r2,328(r16)
  80fa90:	003fd606 	br	80f9ec <__register_exitproc+0x40>
  80fa94:	00802034 	movhi	r2,128
  80fa98:	1089a404 	addi	r2,r2,9872
  80fa9c:	1000021e 	bne	r2,zero,80faa8 <__register_exitproc+0xfc>
  80faa0:	013fffc4 	movi	r4,-1
  80faa4:	003fdc06 	br	80fa18 <__register_exitproc+0x6c>
  80faa8:	01006404 	movi	r4,400
  80faac:	103ee83a 	callr	r2
  80fab0:	1007883a 	mov	r3,r2
  80fab4:	103ffa26 	beq	r2,zero,80faa0 <__register_exitproc+0xf4>
  80fab8:	80805217 	ldw	r2,328(r16)
  80fabc:	180b883a 	mov	r5,r3
  80fac0:	18000115 	stw	zero,4(r3)
  80fac4:	18800015 	stw	r2,0(r3)
  80fac8:	80c05215 	stw	r3,328(r16)
  80facc:	18006215 	stw	zero,392(r3)
  80fad0:	18006315 	stw	zero,396(r3)
  80fad4:	0009883a 	mov	r4,zero
  80fad8:	883fc826 	beq	r17,zero,80f9fc <__register_exitproc+0x50>
  80fadc:	003fd706 	br	80fa3c <__register_exitproc+0x90>

0080fae0 <register_fini>:
  80fae0:	f800283a 	ret

0080fae4 <__call_exitprocs>:
  80fae4:	00802074 	movhi	r2,129
  80fae8:	10880d04 	addi	r2,r2,8244
  80faec:	10800017 	ldw	r2,0(r2)
  80faf0:	defff304 	addi	sp,sp,-52
  80faf4:	df000b15 	stw	fp,44(sp)
  80faf8:	d8800115 	stw	r2,4(sp)
  80fafc:	00802034 	movhi	r2,128
  80fb00:	10899f04 	addi	r2,r2,9852
  80fb04:	1005003a 	cmpeq	r2,r2,zero
  80fb08:	d8800215 	stw	r2,8(sp)
  80fb0c:	d8800117 	ldw	r2,4(sp)
  80fb10:	dd400815 	stw	r21,32(sp)
  80fb14:	dd000715 	stw	r20,28(sp)
  80fb18:	10805204 	addi	r2,r2,328
  80fb1c:	dfc00c15 	stw	ra,48(sp)
  80fb20:	ddc00a15 	stw	r23,40(sp)
  80fb24:	dd800915 	stw	r22,36(sp)
  80fb28:	dcc00615 	stw	r19,24(sp)
  80fb2c:	dc800515 	stw	r18,20(sp)
  80fb30:	dc400415 	stw	r17,16(sp)
  80fb34:	dc000315 	stw	r16,12(sp)
  80fb38:	282b883a 	mov	r21,r5
  80fb3c:	2039883a 	mov	fp,r4
  80fb40:	d8800015 	stw	r2,0(sp)
  80fb44:	2829003a 	cmpeq	r20,r5,zero
  80fb48:	d8800117 	ldw	r2,4(sp)
  80fb4c:	14405217 	ldw	r17,328(r2)
  80fb50:	88001026 	beq	r17,zero,80fb94 <__call_exitprocs+0xb0>
  80fb54:	ddc00017 	ldw	r23,0(sp)
  80fb58:	88800117 	ldw	r2,4(r17)
  80fb5c:	8c802204 	addi	r18,r17,136
  80fb60:	143fffc4 	addi	r16,r2,-1
  80fb64:	80000916 	blt	r16,zero,80fb8c <__call_exitprocs+0xa8>
  80fb68:	05bfffc4 	movi	r22,-1
  80fb6c:	a000151e 	bne	r20,zero,80fbc4 <__call_exitprocs+0xe0>
  80fb70:	8409883a 	add	r4,r16,r16
  80fb74:	2105883a 	add	r2,r4,r4
  80fb78:	1485883a 	add	r2,r2,r18
  80fb7c:	10c02017 	ldw	r3,128(r2)
  80fb80:	a8c01126 	beq	r21,r3,80fbc8 <__call_exitprocs+0xe4>
  80fb84:	843fffc4 	addi	r16,r16,-1
  80fb88:	85bff81e 	bne	r16,r22,80fb6c <__call_exitprocs+0x88>
  80fb8c:	d8800217 	ldw	r2,8(sp)
  80fb90:	10003126 	beq	r2,zero,80fc58 <__call_exitprocs+0x174>
  80fb94:	dfc00c17 	ldw	ra,48(sp)
  80fb98:	df000b17 	ldw	fp,44(sp)
  80fb9c:	ddc00a17 	ldw	r23,40(sp)
  80fba0:	dd800917 	ldw	r22,36(sp)
  80fba4:	dd400817 	ldw	r21,32(sp)
  80fba8:	dd000717 	ldw	r20,28(sp)
  80fbac:	dcc00617 	ldw	r19,24(sp)
  80fbb0:	dc800517 	ldw	r18,20(sp)
  80fbb4:	dc400417 	ldw	r17,16(sp)
  80fbb8:	dc000317 	ldw	r16,12(sp)
  80fbbc:	dec00d04 	addi	sp,sp,52
  80fbc0:	f800283a 	ret
  80fbc4:	8409883a 	add	r4,r16,r16
  80fbc8:	88c00117 	ldw	r3,4(r17)
  80fbcc:	2105883a 	add	r2,r4,r4
  80fbd0:	1445883a 	add	r2,r2,r17
  80fbd4:	18ffffc4 	addi	r3,r3,-1
  80fbd8:	11800217 	ldw	r6,8(r2)
  80fbdc:	1c001526 	beq	r3,r16,80fc34 <__call_exitprocs+0x150>
  80fbe0:	10000215 	stw	zero,8(r2)
  80fbe4:	303fe726 	beq	r6,zero,80fb84 <__call_exitprocs+0xa0>
  80fbe8:	00c00044 	movi	r3,1
  80fbec:	1c06983a 	sll	r3,r3,r16
  80fbf0:	90804017 	ldw	r2,256(r18)
  80fbf4:	8cc00117 	ldw	r19,4(r17)
  80fbf8:	1884703a 	and	r2,r3,r2
  80fbfc:	10001426 	beq	r2,zero,80fc50 <__call_exitprocs+0x16c>
  80fc00:	90804117 	ldw	r2,260(r18)
  80fc04:	1884703a 	and	r2,r3,r2
  80fc08:	10000c1e 	bne	r2,zero,80fc3c <__call_exitprocs+0x158>
  80fc0c:	2105883a 	add	r2,r4,r4
  80fc10:	1485883a 	add	r2,r2,r18
  80fc14:	11400017 	ldw	r5,0(r2)
  80fc18:	e009883a 	mov	r4,fp
  80fc1c:	303ee83a 	callr	r6
  80fc20:	88800117 	ldw	r2,4(r17)
  80fc24:	98bfc81e 	bne	r19,r2,80fb48 <__call_exitprocs+0x64>
  80fc28:	b8800017 	ldw	r2,0(r23)
  80fc2c:	147fd526 	beq	r2,r17,80fb84 <__call_exitprocs+0xa0>
  80fc30:	003fc506 	br	80fb48 <__call_exitprocs+0x64>
  80fc34:	8c000115 	stw	r16,4(r17)
  80fc38:	003fea06 	br	80fbe4 <__call_exitprocs+0x100>
  80fc3c:	2105883a 	add	r2,r4,r4
  80fc40:	1485883a 	add	r2,r2,r18
  80fc44:	11000017 	ldw	r4,0(r2)
  80fc48:	303ee83a 	callr	r6
  80fc4c:	003ff406 	br	80fc20 <__call_exitprocs+0x13c>
  80fc50:	303ee83a 	callr	r6
  80fc54:	003ff206 	br	80fc20 <__call_exitprocs+0x13c>
  80fc58:	88800117 	ldw	r2,4(r17)
  80fc5c:	1000081e 	bne	r2,zero,80fc80 <__call_exitprocs+0x19c>
  80fc60:	89000017 	ldw	r4,0(r17)
  80fc64:	20000726 	beq	r4,zero,80fc84 <__call_exitprocs+0x1a0>
  80fc68:	b9000015 	stw	r4,0(r23)
  80fc6c:	8809883a 	mov	r4,r17
  80fc70:	080267c0 	call	80267c <free>
  80fc74:	bc400017 	ldw	r17,0(r23)
  80fc78:	883fb71e 	bne	r17,zero,80fb58 <__call_exitprocs+0x74>
  80fc7c:	003fc506 	br	80fb94 <__call_exitprocs+0xb0>
  80fc80:	89000017 	ldw	r4,0(r17)
  80fc84:	882f883a 	mov	r23,r17
  80fc88:	2023883a 	mov	r17,r4
  80fc8c:	883fb21e 	bne	r17,zero,80fb58 <__call_exitprocs+0x74>
  80fc90:	003fc006 	br	80fb94 <__call_exitprocs+0xb0>

0080fc94 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80fc94:	defffd04 	addi	sp,sp,-12
  80fc98:	df000215 	stw	fp,8(sp)
  80fc9c:	df000204 	addi	fp,sp,8
  80fca0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80fca4:	e0bfff17 	ldw	r2,-4(fp)
  80fca8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80fcac:	e0bffe17 	ldw	r2,-8(fp)
  80fcb0:	1005003a 	cmpeq	r2,r2,zero
  80fcb4:	1000021e 	bne	r2,zero,80fcc0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80fcb8:	002af070 	cmpltui	zero,zero,43969
  80fcbc:	00000106 	br	80fcc4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80fcc0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80fcc4:	e037883a 	mov	sp,fp
  80fcc8:	df000017 	ldw	fp,0(sp)
  80fccc:	dec00104 	addi	sp,sp,4
  80fcd0:	f800283a 	ret

0080fcd4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80fcd4:	defffd04 	addi	sp,sp,-12
  80fcd8:	dfc00215 	stw	ra,8(sp)
  80fcdc:	df000115 	stw	fp,4(sp)
  80fce0:	df000104 	addi	fp,sp,4
  80fce4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80fce8:	e13fff17 	ldw	r4,-4(fp)
  80fcec:	080fc940 	call	80fc94 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80fcf0:	003fff06 	br	80fcf0 <_exit+0x1c>
  80fcf4:	00000010 	cmplti	zero,zero,0
  80fcf8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80fcfc:	00527a01 	jmpi	527a0 <__alt_mem_sdram-0x7ad860>
  80fd00:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram-0x6e0840>
  80fd04:	001b0c0b 	ldhu	zero,27696(zero)
  80fd08:	00000028 	cmpgeui	zero,zero,0
  80fd0c:	00000018 	cmpnei	zero,zero,0
  80fd10:	00809a90 	cmplti	r2,zero,618
  80fd14:	000005dc 	xori	zero,zero,23
  80fd18:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  80fd1c:	92099170 	cmpltui	r8,r18,9797
  80fd20:	95079308 	cmpgei	r20,r18,7756
  80fd24:	97049605 	stb	fp,4696(r18)
  80fd28:	90019f03 	ldbu	zero,1660(r18)
  80fd2c:	9c06940a 	0x9c06940a
  80fd30:	00000002 	0x2
  80fd34:	00000028 	cmpgeui	zero,zero,0
  80fd38:	00000044 	movi	zero,1
  80fd3c:	0080a06c 	andhi	r2,zero,641
  80fd40:	000005b0 	cmpltui	zero,zero,22
  80fd44:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  80fd48:	92099168 	cmpgeui	r8,r18,9797
  80fd4c:	95079308 	cmpgei	r20,r18,7756
  80fd50:	9c039705 	stb	r16,3676(r19)
  80fd54:	90019f02 	0x90019f02
  80fd58:	9606940a 	0x9606940a
  80fd5c:	00000004 	movi	zero,0
  80fd60:	0080fae0 	cmpeqi	r2,zero,1003
